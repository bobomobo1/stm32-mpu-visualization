
gyroscopeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009064  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080091f8  080091f8  0000a1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009674  08009674  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009674  08009674  0000a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800967c  0800967c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009680  08009680  0000a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009684  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  08009858  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08009858  0000b444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2a0  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203a  00000000  00000000  000194a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0001b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0a  00000000  00000000  0001c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fe4  00000000  00000000  0001cbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f23b  00000000  00000000  0003dbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3dc8  00000000  00000000  0004ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  00110c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001156e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091dc 	.word	0x080091dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080091dc 	.word	0x080091dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init (void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	2275      	movs	r2, #117	@ 0x75
 8001038:	21d0      	movs	r1, #208	@ 0xd0
 800103a:	4823      	ldr	r0, [pc, #140]	@ (80010c8 <MPU6050_Init+0xa8>)
 800103c:	f001 f956 	bl	80022ec <HAL_I2C_Mem_Read>
	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b68      	cmp	r3, #104	@ 0x68
 8001044:	d13b      	bne.n	80010be <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1,&Data, 1, 1000);
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	226b      	movs	r2, #107	@ 0x6b
 800105c:	21d0      	movs	r1, #208	@ 0xd0
 800105e:	481a      	ldr	r0, [pc, #104]	@ (80010c8 <MPU6050_Init+0xa8>)
 8001060:	f001 f830 	bl	80020c4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001064:	2307      	movs	r3, #7
 8001066:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1dbb      	adds	r3, r7, #6
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2219      	movs	r2, #25
 800107a:	21d0      	movs	r1, #208	@ 0xd0
 800107c:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <MPU6050_Init+0xa8>)
 800107e:	f001 f821 	bl	80020c4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 8001082:	2300      	movs	r3, #0
 8001084:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 8001086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	@ 0xd0
 800109a:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <MPU6050_Init+0xa8>)
 800109c:	f001 f812 	bl	80020c4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 80010a0:	2300      	movs	r3, #0
 80010a2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 80010a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	2301      	movs	r3, #1
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	1dbb      	adds	r3, r7, #6
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	221c      	movs	r2, #28
 80010b6:	21d0      	movs	r1, #208	@ 0xd0
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <MPU6050_Init+0xa8>)
 80010ba:	f001 f803 	bl	80020c4 <HAL_I2C_Mem_Write>
	}

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001f0 	.word	0x200001f0

080010cc <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2306      	movs	r3, #6
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	463b      	mov	r3, r7
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	223b      	movs	r2, #59	@ 0x3b
 80010e4:	21d0      	movs	r1, #208	@ 0xd0
 80010e6:	4827      	ldr	r0, [pc, #156]	@ (8001184 <MPU6050_Read_Accel+0xb8>)
 80010e8:	f001 f900 	bl	80022ec <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010ec:	783b      	ldrb	r3, [r7, #0]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MPU6050_Read_Accel+0xbc>)
 80010fe:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001100:	78bb      	ldrb	r3, [r7, #2]
 8001102:	b21b      	sxth	r3, r3
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <MPU6050_Read_Accel+0xc0>)
 8001112:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	b21b      	sxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	797b      	ldrb	r3, [r7, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MPU6050_Read_Accel+0xc4>)
 8001126:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MPU6050_Read_Accel+0xbc>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001136:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001194 <MPU6050_Read_Accel+0xc8>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <MPU6050_Read_Accel+0xcc>)
 8001140:	edc3 7a00 	vstr	s15, [r3]
	Ay = (float)Accel_Y_RAW/16384.0;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MPU6050_Read_Accel+0xc0>)
 8001146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001194 <MPU6050_Read_Accel+0xc8>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MPU6050_Read_Accel+0xd0>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
	Az = (float)Accel_Z_RAW/16384.0;
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MPU6050_Read_Accel+0xc4>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001194 <MPU6050_Read_Accel+0xc8>
 8001172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <MPU6050_Read_Accel+0xd4>)
 8001178:	edc3 7a00 	vstr	s15, [r3]
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001f0 	.word	0x200001f0
 8001188:	200002cc 	.word	0x200002cc
 800118c:	200002ce 	.word	0x200002ce
 8001190:	200002d0 	.word	0x200002d0
 8001194:	46800000 	.word	0x46800000
 8001198:	200002d8 	.word	0x200002d8
 800119c:	200002dc 	.word	0x200002dc
 80011a0:	200002e0 	.word	0x200002e0

080011a4 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2306      	movs	r3, #6
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	463b      	mov	r3, r7
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	2243      	movs	r2, #67	@ 0x43
 80011bc:	21d0      	movs	r1, #208	@ 0xd0
 80011be:	4827      	ldr	r0, [pc, #156]	@ (800125c <MPU6050_Read_Gyro+0xb8>)
 80011c0:	f001 f894 	bl	80022ec <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80011c4:	783b      	ldrb	r3, [r7, #0]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MPU6050_Read_Gyro+0xbc>)
 80011d6:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80011d8:	78bb      	ldrb	r3, [r7, #2]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <MPU6050_Read_Gyro+0xc0>)
 80011ea:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80011ec:	793b      	ldrb	r3, [r7, #4]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	797b      	ldrb	r3, [r7, #5]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MPU6050_Read_Gyro+0xc4>)
 80011fe:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (ｰ/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = (float)Gyro_X_RAW/131.0;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MPU6050_Read_Gyro+0xbc>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800126c <MPU6050_Read_Gyro+0xc8>
 8001212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MPU6050_Read_Gyro+0xcc>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
	Gy = (float)Gyro_Y_RAW/131.0;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MPU6050_Read_Gyro+0xc0>)
 800121e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800126c <MPU6050_Read_Gyro+0xc8>
 800122e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <MPU6050_Read_Gyro+0xd0>)
 8001234:	edc3 7a00 	vstr	s15, [r3]
	Gz = (float)Gyro_Z_RAW/131.0;
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MPU6050_Read_Gyro+0xc4>)
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001246:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800126c <MPU6050_Read_Gyro+0xc8>
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <MPU6050_Read_Gyro+0xd4>)
 8001250:	edc3 7a00 	vstr	s15, [r3]
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001f0 	.word	0x200001f0
 8001260:	200002d2 	.word	0x200002d2
 8001264:	200002d4 	.word	0x200002d4
 8001268:	200002d6 	.word	0x200002d6
 800126c:	43030000 	.word	0x43030000
 8001270:	200002e4 	.word	0x200002e4
 8001274:	200002e8 	.word	0x200002e8
 8001278:	200002ec 	.word	0x200002ec

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fb83 	bl	800198a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f820 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 f8f0 	bl	800146c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800128c:	f000 f8be 	bl	800140c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001290:	f000 f87c 	bl	800138c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001294:	f7ff fec4 	bl	8001020 <MPU6050_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // read the Accelerometer and Gyro values
	  MPU6050_Read_Accel();
 8001298:	f7ff ff18 	bl	80010cc <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 800129c:	f7ff ff82 	bl	80011a4 <MPU6050_Read_Gyro>
	  printf("Az: %.2f\r\n", Az);
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <main+0x44>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f94f 	bl	8000548 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <main+0x48>)
 80012b0:	f004 fb40 	bl	8005934 <iprintf>
	  HAL_Delay(250);
 80012b4:	20fa      	movs	r0, #250	@ 0xfa
 80012b6:	f000 fbdd 	bl	8001a74 <HAL_Delay>
  {
 80012ba:	bf00      	nop
 80012bc:	e7ec      	b.n	8001298 <main+0x1c>
 80012be:	bf00      	nop
 80012c0:	200002e0 	.word	0x200002e0
 80012c4:	080091f8 	.word	0x080091f8

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b096      	sub	sp, #88	@ 0x58
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2244      	movs	r2, #68	@ 0x44
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 fba3 	bl	8005a22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012ee:	f001 fc8f 	bl	8002c10 <HAL_PWREx_ControlVoltageScaling>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012f8:	f000 f92a 	bl	8001550 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012fc:	f001 fc6a 	bl	8002bd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <SystemClock_Config+0xc0>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001306:	4a20      	ldr	r2, [pc, #128]	@ (8001388 <SystemClock_Config+0xc0>)
 8001308:	f023 0318 	bic.w	r3, r3, #24
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001310:	2314      	movs	r3, #20
 8001312:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001320:	2360      	movs	r3, #96	@ 0x60
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001328:	2301      	movs	r3, #1
 800132a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001330:	2310      	movs	r3, #16
 8001332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001334:	2307      	movs	r3, #7
 8001336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fcb9 	bl	8002cbc <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001350:	f000 f8fe 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001354:	230f      	movs	r3, #15
 8001356:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2303      	movs	r3, #3
 800135a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f002 f8b9 	bl	80034e4 <HAL_RCC_ClockConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001378:	f000 f8ea 	bl	8001550 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800137c:	f002 fccc 	bl	8003d18 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001380:	bf00      	nop
 8001382:	3758      	adds	r7, #88	@ 0x58
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000

0800138c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <MX_I2C1_Init+0x74>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <MX_I2C1_Init+0x78>)
 8001394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_I2C1_Init+0x74>)
 8001398:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <MX_I2C1_Init+0x7c>)
 800139a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c6:	480e      	ldr	r0, [pc, #56]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013c8:	f000 fde0 	bl	8001f8c <HAL_I2C_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013d2:	f000 f8bd 	bl	8001550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4809      	ldr	r0, [pc, #36]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013da:	f001 fb63 	bl	8002aa4 <HAL_I2CEx_ConfigAnalogFilter>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013e4:	f000 f8b4 	bl	8001550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_I2C1_Init+0x74>)
 80013ec:	f001 fba5 	bl	8002b3a <HAL_I2CEx_ConfigDigitalFilter>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013f6:	f000 f8ab 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001f0 	.word	0x200001f0
 8001404:	40005400 	.word	0x40005400
 8001408:	00b07cb4 	.word	0x00b07cb4

0800140c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001412:	4a15      	ldr	r2, [pc, #84]	@ (8001468 <MX_USART2_UART_Init+0x5c>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_USART2_UART_Init+0x58>)
 8001450:	f002 fd64 	bl	8003f1c <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800145a:	f000 f879 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000244 	.word	0x20000244
 8001468:	40004400 	.word	0x40004400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_GPIO_Init+0x8c>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2108      	movs	r1, #8
 80014ce:	480b      	ldr	r0, [pc, #44]	@ (80014fc <MX_GPIO_Init+0x90>)
 80014d0:	f000 fd44 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80014d4:	2308      	movs	r3, #8
 80014d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_GPIO_Init+0x90>)
 80014ec:	f000 fbcc 	bl	8001c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48000400 	.word	0x48000400

08001500 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001508:	1d39      	adds	r1, r7, #4
 800150a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800150e:	2201      	movs	r2, #1
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <__io_putchar+0x20>)
 8001512:	f002 fd51 	bl	8003fb8 <HAL_UART_Transmit>
  return ch;
 8001516:	687b      	ldr	r3, [r7, #4]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000244 	.word	0x20000244

08001524 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]
  // Clear the Overrun flag just before receiving the first character
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <__io_getchar+0x28>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2208      	movs	r2, #8
 8001534:	621a      	str	r2, [r3, #32]

  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 5);
 8001536:	1df9      	adds	r1, r7, #7
 8001538:	2305      	movs	r3, #5
 800153a:	2201      	movs	r2, #1
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <__io_getchar+0x28>)
 800153e:	f002 fdc4 	bl	80040ca <HAL_UART_Receive>
  return ch;
 8001542:	79fb      	ldrb	r3, [r7, #7]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000244 	.word	0x20000244

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <Error_Handler+0x8>

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_MspInit+0x44>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001566:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_MspInit+0x44>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6613      	str	r3, [r2, #96]	@ 0x60
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_MspInit+0x44>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x44>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x44>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6593      	str	r3, [r2, #88]	@ 0x58
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x44>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b09e      	sub	sp, #120	@ 0x78
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2254      	movs	r2, #84	@ 0x54
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fa2c 	bl	8005a22 <memset>
  if(hi2c->Instance==I2C1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <HAL_I2C_MspInit+0xa8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d137      	bne.n	8001644 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d4:	2340      	movs	r3, #64	@ 0x40
 80015d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d8:	2300      	movs	r3, #0
 80015da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 f9a3 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015ec:	f7ff ffb0 	bl	8001550 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <HAL_I2C_MspInit+0xac>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	4a16      	ldr	r2, [pc, #88]	@ (8001650 <HAL_I2C_MspInit+0xac>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <HAL_I2C_MspInit+0xac>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001608:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800160c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	2312      	movs	r3, #18
 8001610:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161a:	2304      	movs	r3, #4
 800161c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001628:	f000 fb2e 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <HAL_I2C_MspInit+0xac>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	4a07      	ldr	r2, [pc, #28]	@ (8001650 <HAL_I2C_MspInit+0xac>)
 8001632:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001636:	6593      	str	r3, [r2, #88]	@ 0x58
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_I2C_MspInit+0xac>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001644:	bf00      	nop
 8001646:	3778      	adds	r7, #120	@ 0x78
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40005400 	.word	0x40005400
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09e      	sub	sp, #120	@ 0x78
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2254      	movs	r2, #84	@ 0x54
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f004 f9d4 	bl	8005a22 <memset>
  if(huart->Instance==USART2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a28      	ldr	r2, [pc, #160]	@ (8001720 <HAL_UART_MspInit+0xcc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d148      	bne.n	8001716 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001684:	2302      	movs	r3, #2
 8001686:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4618      	mov	r0, r3
 8001692:	f002 f94b 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800169c:	f7ff ff58 	bl	8001550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a0:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_UART_MspInit+0xd0>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <HAL_UART_MspInit+0xd0>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <HAL_UART_MspInit+0xd0>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <HAL_UART_MspInit+0xd0>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_UART_MspInit+0xd0>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_UART_MspInit+0xd0>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016d0:	2304      	movs	r3, #4
 80016d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e0:	2307      	movs	r3, #7
 80016e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ee:	f000 facb 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80016f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001704:	2303      	movs	r3, #3
 8001706:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001712:	f000 fab9 	bl	8001c88 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001716:	bf00      	nop
 8001718:	3778      	adds	r7, #120	@ 0x78
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40004400 	.word	0x40004400
 8001724:	40021000 	.word	0x40021000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <NMI_Handler+0x4>

08001730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <MemManage_Handler+0x4>

08001740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <UsageFault_Handler+0x4>

08001750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 f959 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_kill>:

int _kill(int pid, int sig)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a0:	f004 f992 	bl	8005ac8 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2216      	movs	r2, #22
 80017a8:	601a      	str	r2, [r3, #0]
  return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_exit>:

void _exit (int status)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017be:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffe7 	bl	8001796 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <_exit+0x12>

080017cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e00a      	b.n	80017f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017de:	f7ff fea1 	bl	8001524 <__io_getchar>
 80017e2:	4601      	mov	r1, r0
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	b2ca      	uxtb	r2, r1
 80017ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf0      	blt.n	80017de <_read+0x12>
  }

  return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e009      	b.n	800182c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fe6d 	bl	8001500 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf1      	blt.n	8001818 <_write+0x12>
  }
  return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001866:	605a      	str	r2, [r3, #4]
  return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	@ (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	@ (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f004 f8f6 	bl	8005ac8 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	@ (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000c000 	.word	0x2000c000
 8001908:	00000400 	.word	0x00000400
 800190c:	200002f0 	.word	0x200002f0
 8001910:	20000448 	.word	0x20000448

08001914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001970 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800193c:	f7ff ffea 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <LoopForever+0x6>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	@ (8001978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <LoopForever+0xe>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	@ (8001984 <LoopForever+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f004 f8b5 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800196a:	f7ff fc87 	bl	800127c <main>

0800196e <LoopForever>:

LoopForever:
    b LoopForever
 800196e:	e7fe      	b.n	800196e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001970:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800197c:	08009684 	.word	0x08009684
  ldr r2, =_sbss
 8001980:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001984:	20000444 	.word	0x20000444

08001988 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC1_IRQHandler>

0800198a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f943 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f80e 	bl	80019bc <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e001      	b.n	80019b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ac:	f7ff fdd6 	bl	800155c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <HAL_InitTick+0x6c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <HAL_InitTick+0x70>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <HAL_InitTick+0x6c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f941 	bl	8001c6e <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d809      	bhi.n	8001a0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a00:	f000 f919 	bl	8001c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a04:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_InitTick+0x74>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e007      	b.n	8001a1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e004      	b.n	8001a1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	e001      	b.n	8001a1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008
 8001a58:	200002f4 	.word	0x200002f4

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200002f4 	.word	0x200002f4

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	@ (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	@ (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	@ 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff47 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff5c 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff8e 	bl	8001b74 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffb0 	bl	8001bdc <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	e148      	b.n	8001f2a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 813a 	beq.w	8001f24 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <HAL_GPIO_Init+0x40>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 0201 	and.w	r2, r3, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d017      	beq.n	8001d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8094 	beq.w	8001f24 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b52      	ldr	r3, [pc, #328]	@ (8001f48 <HAL_GPIO_Init+0x2c0>)
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e00:	4a51      	ldr	r2, [pc, #324]	@ (8001f48 <HAL_GPIO_Init+0x2c0>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e08:	4b4f      	ldr	r3, [pc, #316]	@ (8001f48 <HAL_GPIO_Init+0x2c0>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e14:	4a4d      	ldr	r2, [pc, #308]	@ (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e3e:	d00d      	beq.n	8001e5c <HAL_GPIO_Init+0x1d4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a43      	ldr	r2, [pc, #268]	@ (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <HAL_GPIO_Init+0x1d0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a42      	ldr	r2, [pc, #264]	@ (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d101      	bne.n	8001e54 <HAL_GPIO_Init+0x1cc>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x1d6>
 8001e54:	2307      	movs	r3, #7
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x1d6>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x1d6>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e6e:	4937      	ldr	r1, [pc, #220]	@ (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eca:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef4:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001efa:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f47f aeaf 	bne.w	8001c98 <HAL_GPIO_Init+0x10>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	48000400 	.word	0x48000400
 8001f54:	48000800 	.word	0x48000800
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e08d      	b.n	80020ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff faf6 	bl	80015a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e006      	b.n	8002014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d108      	bne.n	800202e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e007      	b.n	800203e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800203c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800204c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69d9      	ldr	r1, [r3, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	460b      	mov	r3, r1
 80020d8:	813b      	strh	r3, [r7, #8]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	f040 80f9 	bne.w	80022de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_I2C_Mem_Write+0x34>
 80020f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ed      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_I2C_Mem_Write+0x4e>
 800210e:	2302      	movs	r3, #2
 8002110:	e0e6      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800211a:	f7ff fc9f 	bl	8001a5c <HAL_GetTick>
 800211e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2319      	movs	r3, #25
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fac3 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0d1      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2221      	movs	r2, #33	@ 0x21
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2240      	movs	r2, #64	@ 0x40
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800215c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002164:	88f8      	ldrh	r0, [r7, #6]
 8002166:	893a      	ldrh	r2, [r7, #8]
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	4603      	mov	r3, r0
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f9d3 	bl	8002520 <I2C_RequestMemoryWrite>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0a9      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	2bff      	cmp	r3, #255	@ 0xff
 8002194:	d90e      	bls.n	80021b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	22ff      	movs	r2, #255	@ 0xff
 800219a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	8979      	ldrh	r1, [r7, #10]
 80021a4:	2300      	movs	r3, #0
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fc47 	bl	8002a40 <I2C_TransferConfig>
 80021b2:	e00f      	b.n	80021d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	8979      	ldrh	r1, [r7, #10]
 80021c6:	2300      	movs	r3, #0
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fc36 	bl	8002a40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fac6 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e07b      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d034      	beq.n	800228c <HAL_I2C_Mem_Write+0x1c8>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002226:	2b00      	cmp	r3, #0
 8002228:	d130      	bne.n	800228c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	2200      	movs	r2, #0
 8002232:	2180      	movs	r1, #128	@ 0x80
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fa3f 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e04d      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	d90e      	bls.n	800226c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	22ff      	movs	r2, #255	@ 0xff
 8002252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002258:	b2da      	uxtb	r2, r3
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	2300      	movs	r3, #0
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fbeb 	bl	8002a40 <I2C_TransferConfig>
 800226a:	e00f      	b.n	800228c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227a:	b2da      	uxtb	r2, r3
 800227c:	8979      	ldrh	r1, [r7, #10]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fbda 	bl	8002a40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d19e      	bne.n	80021d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 faac 	bl	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e01a      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2220      	movs	r2, #32
 80022b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_I2C_Mem_Write+0x224>)
 80022be:	400b      	ands	r3, r1
 80022c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2220      	movs	r2, #32
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022de:	2302      	movs	r3, #2
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	fe00e800 	.word	0xfe00e800

080022ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	f040 80fd 	bne.w	800250e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_I2C_Mem_Read+0x34>
 800231a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002326:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0f1      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_I2C_Mem_Read+0x4e>
 8002336:	2302      	movs	r3, #2
 8002338:	e0ea      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002342:	f7ff fb8b 	bl	8001a5c <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2319      	movs	r3, #25
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f9af 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d5      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2222      	movs	r2, #34	@ 0x22
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a3a      	ldr	r2, [r7, #32]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800238c:	88f8      	ldrh	r0, [r7, #6]
 800238e:	893a      	ldrh	r2, [r7, #8]
 8002390:	8979      	ldrh	r1, [r7, #10]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4603      	mov	r3, r0
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f913 	bl	80025c8 <I2C_RequestMemoryRead>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0ad      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2bff      	cmp	r3, #255	@ 0xff
 80023bc:	d90e      	bls.n	80023dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	8979      	ldrh	r1, [r7, #10]
 80023cc:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <HAL_I2C_Mem_Read+0x22c>)
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fb33 	bl	8002a40 <I2C_TransferConfig>
 80023da:	e00f      	b.n	80023fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	8979      	ldrh	r1, [r7, #10]
 80023ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <HAL_I2C_Mem_Read+0x22c>)
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fb22 	bl	8002a40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002402:	2200      	movs	r2, #0
 8002404:	2104      	movs	r1, #4
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f956 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07c      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d034      	beq.n	80024bc <HAL_I2C_Mem_Read+0x1d0>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d130      	bne.n	80024bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002460:	2200      	movs	r2, #0
 8002462:	2180      	movs	r1, #128	@ 0x80
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f927 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e04d      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	2bff      	cmp	r3, #255	@ 0xff
 800247c:	d90e      	bls.n	800249c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002488:	b2da      	uxtb	r2, r3
 800248a:	8979      	ldrh	r1, [r7, #10]
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fad3 	bl	8002a40 <I2C_TransferConfig>
 800249a:	e00f      	b.n	80024bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	8979      	ldrh	r1, [r7, #10]
 80024ae:	2300      	movs	r3, #0
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fac2 	bl	8002a40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d19a      	bne.n	80023fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f994 	bl	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e01a      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2220      	movs	r2, #32
 80024e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HAL_I2C_Mem_Read+0x230>)
 80024ee:	400b      	ands	r3, r1
 80024f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
  }
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	80002400 	.word	0x80002400
 800251c:	fe00e800 	.word	0xfe00e800

08002520 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <I2C_RequestMemoryWrite+0xa4>)
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa79 	bl	8002a40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	69b9      	ldr	r1, [r7, #24]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f909 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e02c      	b.n	80025bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28
 8002572:	e015      	b.n	80025a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b2da      	uxtb	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	69b9      	ldr	r1, [r7, #24]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8ef 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e012      	b.n	80025bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002596:	893b      	ldrh	r3, [r7, #8]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2200      	movs	r2, #0
 80025a8:	2180      	movs	r1, #128	@ 0x80
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f884 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	80002000 	.word	0x80002000

080025c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	8979      	ldrh	r1, [r7, #10]
 80025e8:	4b20      	ldr	r3, [pc, #128]	@ (800266c <I2C_RequestMemoryRead+0xa4>)
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2300      	movs	r3, #0
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fa26 	bl	8002a40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f8b6 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e02c      	b.n	8002662 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d105      	bne.n	800261a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800260e:	893b      	ldrh	r3, [r7, #8]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	629a      	str	r2, [r3, #40]	@ 0x28
 8002618:	e015      	b.n	8002646 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800261a:	893b      	ldrh	r3, [r7, #8]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	b29b      	uxth	r3, r3
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f89c 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e012      	b.n	8002662 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800263c:	893b      	ldrh	r3, [r7, #8]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2200      	movs	r2, #0
 800264e:	2140      	movs	r1, #64	@ 0x40
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f831 	bl	80026b8 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	80002000 	.word	0x80002000

08002670 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d103      	bne.n	800268e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d007      	beq.n	80026ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	619a      	str	r2, [r3, #24]
  }
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c8:	e03b      	b.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f8d6 	bl	8002880 <I2C_IsErrorOccurred>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e041      	b.n	8002762 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026e4:	d02d      	beq.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7ff f9b9 	bl	8001a5c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d122      	bne.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	429a      	cmp	r2, r3
 8002718:	d113      	bne.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d0b4      	beq.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002776:	e033      	b.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f87f 	bl	8002880 <I2C_IsErrorOccurred>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e031      	b.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002792:	d025      	beq.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7ff f962 	bl	8001a5c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11a      	bne.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d013      	beq.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e007      	b.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d1c4      	bne.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002804:	e02f      	b.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f838 	bl	8002880 <I2C_IsErrorOccurred>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02d      	b.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281a:	f7ff f91f 	bl	8001a5c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d11a      	bne.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d013      	beq.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e007      	b.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d1c8      	bne.n	8002806 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d068      	beq.n	800297e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2210      	movs	r2, #16
 80028b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028b4:	e049      	b.n	800294a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028bc:	d045      	beq.n	800294a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7ff f8cd 	bl	8001a5c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_IsErrorOccurred+0x54>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d13a      	bne.n	800294a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f6:	d121      	bne.n	800293c <I2C_IsErrorOccurred+0xbc>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028fe:	d01d      	beq.n	800293c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b20      	cmp	r3, #32
 8002904:	d01a      	beq.n	800293c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002914:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002916:	f7ff f8a1 	bl	8001a5c <HAL_GetTick>
 800291a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800291c:	e00e      	b.n	800293c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800291e:	f7ff f89d 	bl	8001a5c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b19      	cmp	r3, #25
 800292a:	d907      	bls.n	800293c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800293a:	e006      	b.n	800294a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b20      	cmp	r3, #32
 8002948:	d1e9      	bne.n	800291e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d003      	beq.n	8002960 <I2C_IsErrorOccurred+0xe0>
 8002958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0aa      	beq.n	80028b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80029ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff fe3b 	bl	8002670 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <I2C_IsErrorOccurred+0x1bc>)
 8002a06:	400b      	ands	r3, r1
 8002a08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3728      	adds	r7, #40	@ 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	fe00e800 	.word	0xfe00e800

08002a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a58:	7a7b      	ldrb	r3, [r7, #9]
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <I2C_TransferConfig+0x60>)
 8002a80:	430b      	orrs	r3, r1
 8002a82:	43db      	mvns	r3, r3
 8002a84:	ea02 0103 	and.w	r1, r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	03ff63ff 	.word	0x03ff63ff

08002aa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d138      	bne.n	8002b2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e032      	b.n	8002b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	@ 0x24
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002af6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d139      	bne.n	8002bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e033      	b.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2224      	movs	r2, #36	@ 0x24
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40007000 	.word	0x40007000

08002bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c1e:	d130      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c20:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2c:	d038      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c36:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2232      	movs	r2, #50	@ 0x32
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c54:	e002      	b.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c68:	d102      	bne.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f2      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c70:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7c:	d110      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e00f      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8e:	d007      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c90:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c98:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f000 bc02 	b.w	80034d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd0:	4b96      	ldr	r3, [pc, #600]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cda:	4b94      	ldr	r3, [pc, #592]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80e4 	beq.w	8002eba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4c>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	f040 808b 	bne.w	8002e16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f040 8087 	bne.w	8002e16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d08:	4b88      	ldr	r3, [pc, #544]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x64>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e3d9      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	4b81      	ldr	r3, [pc, #516]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCC_OscConfig+0x7e>
 8002d30:	4b7e      	ldr	r3, [pc, #504]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_OscConfig+0x8a>
 8002d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d223      	bcs.n	8002d92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fd8c 	bl	800386c <RCC_SetFlashLatencyFromMSIRange>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e3ba      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5e:	4b73      	ldr	r3, [pc, #460]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a72      	ldr	r2, [pc, #456]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b70      	ldr	r3, [pc, #448]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	496d      	ldr	r1, [pc, #436]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	4968      	ldr	r1, [pc, #416]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
 8002d90:	e025      	b.n	8002dde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d92:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4960      	ldr	r1, [pc, #384]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	495b      	ldr	r1, [pc, #364]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd4c 	bl	800386c <RCC_SetFlashLatencyFromMSIRange>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e37a      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dde:	f000 fc81 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b51      	ldr	r3, [pc, #324]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	4950      	ldr	r1, [pc, #320]	@ (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8002f34 <HAL_RCC_OscConfig+0x278>)
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8002f38 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fdda 	bl	80019bc <HAL_InitTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d052      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	e35e      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d032      	beq.n	8002e84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a42      	ldr	r2, [pc, #264]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fe17 	bl	8001a5c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e32:	f7fe fe13 	bl	8001a5c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e347      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e44:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e50:	4b36      	ldr	r3, [pc, #216]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a35      	ldr	r2, [pc, #212]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4930      	ldr	r1, [pc, #192]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	492b      	ldr	r1, [pc, #172]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
 8002e82:	e01a      	b.n	8002eba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e84:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fde4 	bl	8001a5c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e98:	f7fe fde0 	bl	8001a5c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e314      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eaa:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x1dc>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d073      	beq.n	8002fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x21c>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d063      	beq.n	8002fac <HAL_RCC_OscConfig+0x2f0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15f      	bne.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e2f1      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x24c>
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a0b      	ldr	r2, [pc, #44]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e025      	b.n	8002f54 <HAL_RCC_OscConfig+0x298>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f10:	d114      	bne.n	8002f3c <HAL_RCC_OscConfig+0x280>
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b03      	ldr	r3, [pc, #12]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a02      	ldr	r2, [pc, #8]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e013      	b.n	8002f54 <HAL_RCC_OscConfig+0x298>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08009204 	.word	0x08009204
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	4ba0      	ldr	r3, [pc, #640]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a9f      	ldr	r2, [pc, #636]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b9d      	ldr	r3, [pc, #628]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a9c      	ldr	r2, [pc, #624]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fd7e 	bl	8001a5c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fd7a 	bl	8001a5c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e2ae      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	4b92      	ldr	r3, [pc, #584]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2a8>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fd6a 	bl	8001a5c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fd66 	bl	8001a5c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e29a      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	4b88      	ldr	r3, [pc, #544]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2d0>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d060      	beq.n	800307c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x310>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d116      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x328>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e277      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b76      	ldr	r3, [pc, #472]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	4973      	ldr	r1, [pc, #460]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff8:	e040      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d023      	beq.n	800304a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003002:	4b6f      	ldr	r3, [pc, #444]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6e      	ldr	r2, [pc, #440]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fd25 	bl	8001a5c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fd21 	bl	8001a5c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e255      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	4b65      	ldr	r3, [pc, #404]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b62      	ldr	r3, [pc, #392]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	495f      	ldr	r1, [pc, #380]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e018      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b5d      	ldr	r3, [pc, #372]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5c      	ldr	r2, [pc, #368]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe fd01 	bl	8001a5c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe fcfd 	bl	8001a5c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e231      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	4b53      	ldr	r3, [pc, #332]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03c      	beq.n	8003102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003090:	4b4b      	ldr	r3, [pc, #300]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003096:	4a4a      	ldr	r2, [pc, #296]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe fcdc 	bl	8001a5c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fe fcd8 	bl	8001a5c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e20c      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ba:	4b41      	ldr	r3, [pc, #260]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x3ec>
 80030c8:	e01b      	b.n	8003102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ca:	4b3d      	ldr	r3, [pc, #244]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d0:	4a3b      	ldr	r2, [pc, #236]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fcbf 	bl	8001a5c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe fcbb 	bl	8001a5c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1ef      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f4:	4b32      	ldr	r3, [pc, #200]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80a6 	beq.w	800325c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003114:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	@ 0x58
 800312c:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	4b21      	ldr	r3, [pc, #132]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d118      	bne.n	800317a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003148:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003154:	f7fe fc82 	bl	8001a5c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fe fc7e 	bl	8001a5c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e1b2      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <HAL_RCC_OscConfig+0x508>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x4d8>
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003192:	e029      	b.n	80031e8 <HAL_RCC_OscConfig+0x52c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d115      	bne.n	80031c8 <HAL_RCC_OscConfig+0x50c>
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	4a07      	ldr	r2, [pc, #28]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ac:	4b04      	ldr	r3, [pc, #16]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a03      	ldr	r2, [pc, #12]	@ (80031c0 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x52c>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
 80031c8:	4b9a      	ldr	r3, [pc, #616]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	4a99      	ldr	r2, [pc, #612]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d8:	4b96      	ldr	r3, [pc, #600]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	4a95      	ldr	r2, [pc, #596]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d016      	beq.n	800321e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe fc34 	bl	8001a5c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe fc30 	bl	8001a5c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e162      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320e:	4b89      	ldr	r3, [pc, #548]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ed      	beq.n	80031f8 <HAL_RCC_OscConfig+0x53c>
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fc1d 	bl	8001a5c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe fc19 	bl	8001a5c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e14b      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800323c:	4b7d      	ldr	r3, [pc, #500]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ed      	bne.n	8003226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b78      	ldr	r3, [pc, #480]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	4a77      	ldr	r2, [pc, #476]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01c      	beq.n	80032aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003270:	4b70      	ldr	r3, [pc, #448]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003276:	4a6f      	ldr	r2, [pc, #444]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fbec 	bl	8001a5c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003288:	f7fe fbe8 	bl	8001a5c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e11c      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800329a:	4b66      	ldr	r3, [pc, #408]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 800329c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCC_OscConfig+0x5cc>
 80032a8:	e01b      	b.n	80032e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032aa:	4b62      	ldr	r3, [pc, #392]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80032ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032b0:	4a60      	ldr	r2, [pc, #384]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fbcf 	bl	8001a5c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c2:	f7fe fbcb 	bl	8001a5c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ff      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d4:	4b57      	ldr	r3, [pc, #348]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80032d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ef      	bne.n	80032c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80f3 	beq.w	80034d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f040 80c9 	bne.w	8003488 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	429a      	cmp	r2, r3
 8003308:	d12c      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	3b01      	subs	r3, #1
 8003316:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d123      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003326:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d11b      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003336:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d113      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	3b01      	subs	r3, #1
 800334a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d109      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d06b      	beq.n	800343c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d062      	beq.n	8003430 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800336a:	4b32      	ldr	r3, [pc, #200]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0ac      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800337a:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2d      	ldr	r2, [pc, #180]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003386:	f7fe fb69 	bl	8001a5c <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fb65 	bl	8001a5c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e099      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b21      	ldr	r3, [pc, #132]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <HAL_RCC_OscConfig+0x77c>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033bc:	3a01      	subs	r2, #1
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033c6:	0212      	lsls	r2, r2, #8
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0552      	lsls	r2, r2, #21
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0652      	lsls	r2, r2, #25
 80033e0:	4311      	orrs	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	430a      	orrs	r2, r1
 80033ea:	4912      	ldr	r1, [pc, #72]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033f0:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003408:	f7fe fb28 	bl	8001a5c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fb24 	bl	8001a5c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e058      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <HAL_RCC_OscConfig+0x778>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342e:	e050      	b.n	80034d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e04f      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
 8003434:	40021000 	.word	0x40021000
 8003438:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343c:	4b27      	ldr	r3, [pc, #156]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d144      	bne.n	80034d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003448:	4b24      	ldr	r3, [pc, #144]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003454:	4b21      	ldr	r3, [pc, #132]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a20      	ldr	r2, [pc, #128]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 800345a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800345e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003460:	f7fe fafc 	bl	8001a5c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe faf8 	bl	8001a5c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e02c      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	4b18      	ldr	r3, [pc, #96]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x7ac>
 8003486:	e024      	b.n	80034d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d01f      	beq.n	80034ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a12      	ldr	r2, [pc, #72]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 8003494:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe fadf 	bl	8001a5c <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe fadb 	bl	8001a5c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	4905      	ldr	r1, [pc, #20]	@ (80034dc <HAL_RCC_OscConfig+0x820>)
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <HAL_RCC_OscConfig+0x824>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
 80034cc:	e001      	b.n	80034d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	feeefffc 	.word	0xfeeefffc

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0e7      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b75      	ldr	r3, [pc, #468]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b72      	ldr	r3, [pc, #456]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4970      	ldr	r1, [pc, #448]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b6e      	ldr	r3, [pc, #440]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0cf      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4b66      	ldr	r3, [pc, #408]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003540:	429a      	cmp	r2, r3
 8003542:	d908      	bls.n	8003556 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4960      	ldr	r1, [pc, #384]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04c      	beq.n	80035fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b5a      	ldr	r3, [pc, #360]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d121      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0a6      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	4b54      	ldr	r3, [pc, #336]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e09a      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800359a:	4b4e      	ldr	r3, [pc, #312]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e08e      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035aa:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e086      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b46      	ldr	r3, [pc, #280]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4943      	ldr	r1, [pc, #268]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fe fa46 	bl	8001a5c <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe fa42 	bl	8001a5c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e06e      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b3a      	ldr	r3, [pc, #232]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003614:	429a      	cmp	r2, r3
 8003616:	d208      	bcs.n	800362a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b2e      	ldr	r3, [pc, #184]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	492b      	ldr	r1, [pc, #172]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362a:	4b29      	ldr	r3, [pc, #164]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d210      	bcs.n	800365a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003638:	4b25      	ldr	r3, [pc, #148]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 0207 	bic.w	r2, r3, #7
 8003640:	4923      	ldr	r1, [pc, #140]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003648:	4b21      	ldr	r3, [pc, #132]	@ (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e036      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003666:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4918      	ldr	r1, [pc, #96]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003684:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4910      	ldr	r1, [pc, #64]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003698:	f000 f824 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	490b      	ldr	r1, [pc, #44]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f4>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <HAL_RCC_ClockConfig+0x1f8>)
 80036b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_RCC_ClockConfig+0x1fc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe f97d 	bl	80019bc <HAL_InitTick>
 80036c2:	4603      	mov	r3, r0
 80036c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036c6:	7afb      	ldrb	r3, [r7, #11]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08009204 	.word	0x08009204
 80036dc:	20000000 	.word	0x20000000
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	@ 0x24
 80036e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f2:	4b3e      	ldr	r3, [pc, #248]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036fc:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d121      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d11e      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003718:	4b34      	ldr	r3, [pc, #208]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003724:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	e005      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003734:	4b2d      	ldr	r3, [pc, #180]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003740:	4a2b      	ldr	r2, [pc, #172]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10d      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003754:	e00a      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d102      	bne.n	8003762 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800375c:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e004      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d101      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003768:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800376a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d134      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003772:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0xa6>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d003      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0xac>
 8003788:	e005      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800378c:	617b      	str	r3, [r7, #20]
      break;
 800378e:	e005      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003792:	617b      	str	r3, [r7, #20]
      break;
 8003794:	e002      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	617b      	str	r3, [r7, #20]
      break;
 800379a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800379c:	4b13      	ldr	r3, [pc, #76]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	3301      	adds	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037aa:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	fb03 f202 	mul.w	r2, r3, r2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	0e5b      	lsrs	r3, r3, #25
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	3301      	adds	r3, #1
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037dc:	69bb      	ldr	r3, [r7, #24]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	@ 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	0800921c 	.word	0x0800921c
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4904      	ldr	r1, [pc, #16]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x28>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	08009214 	.word	0x08009214

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003844:	f7ff ffda 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0adb      	lsrs	r3, r3, #11
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4904      	ldr	r1, [pc, #16]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	08009214 	.word	0x08009214

0800386c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003878:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003884:	f7ff f9b6 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 8003888:	6178      	str	r0, [r7, #20]
 800388a:	e014      	b.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800388c:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	4a24      	ldr	r2, [pc, #144]	@ (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003896:	6593      	str	r3, [r2, #88]	@ 0x58
 8003898:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038a4:	f7ff f9a6 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 80038a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038bc:	d10b      	bne.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b80      	cmp	r3, #128	@ 0x80
 80038c2:	d919      	bls.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80038c8:	d902      	bls.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ca:	2302      	movs	r3, #2
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e013      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038d0:	2301      	movs	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e010      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b80      	cmp	r3, #128	@ 0x80
 80038da:	d902      	bls.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038dc:	2303      	movs	r3, #3
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e00a      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b80      	cmp	r3, #128	@ 0x80
 80038e6:	d102      	bne.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038e8:	2302      	movs	r3, #2
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	e004      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b70      	cmp	r3, #112	@ 0x70
 80038f2:	d101      	bne.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f4:	2301      	movs	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 0207 	bic.w	r2, r3, #7
 8003900:	4909      	ldr	r1, [pc, #36]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003908:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	40022000 	.word	0x40022000

0800392c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003934:	2300      	movs	r3, #0
 8003936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003938:	2300      	movs	r3, #0
 800393a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003944:	2b00      	cmp	r3, #0
 8003946:	d031      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003950:	d01a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003952:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003956:	d814      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800395c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003960:	d10f      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003962:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800396c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800396e:	e00c      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9de 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	74fb      	strb	r3, [r7, #19]
      break;
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398a:	7cfb      	ldrb	r3, [r7, #19]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003990:	4b51      	ldr	r3, [pc, #324]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	494e      	ldr	r1, [pc, #312]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7cfb      	ldrb	r3, [r7, #19]
 80039aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 809e 	beq.w	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039be:	4b46      	ldr	r3, [pc, #280]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	4b40      	ldr	r3, [pc, #256]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039de:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f0:	4b3a      	ldr	r3, [pc, #232]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a39      	ldr	r2, [pc, #228]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039fc:	f7fe f82e 	bl	8001a5c <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a02:	e009      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fe f82a 	bl	8001a5c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d902      	bls.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	74fb      	strb	r3, [r7, #19]
        break;
 8003a16:	e005      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a18:	4b30      	ldr	r3, [pc, #192]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ef      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d15a      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01e      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d019      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a46:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a52:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a58:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a72:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d016      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd ffea 	bl	8001a5c <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd ffe6 	bl	8001a5c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d902      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	74fb      	strb	r3, [r7, #19]
            break;
 8003aa2:	e006      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0ec      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac6:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ace:	e009      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
 8003ad4:	e006      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae4:	7c7b      	ldrb	r3, [r7, #17]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d105      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aea:	4b8a      	ldr	r3, [pc, #552]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	4a89      	ldr	r2, [pc, #548]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b02:	4b84      	ldr	r3, [pc, #528]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b08:	f023 0203 	bic.w	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4980      	ldr	r1, [pc, #512]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b24:	4b7b      	ldr	r3, [pc, #492]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 020c 	bic.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	4978      	ldr	r1, [pc, #480]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b46:	4b73      	ldr	r3, [pc, #460]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	496f      	ldr	r1, [pc, #444]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b68:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b76:	4967      	ldr	r1, [pc, #412]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b8a:	4b62      	ldr	r3, [pc, #392]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	495e      	ldr	r1, [pc, #376]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bac:	4b59      	ldr	r3, [pc, #356]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	4956      	ldr	r1, [pc, #344]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bce:	4b51      	ldr	r3, [pc, #324]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	494d      	ldr	r1, [pc, #308]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d028      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf0:	4b48      	ldr	r3, [pc, #288]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	4945      	ldr	r1, [pc, #276]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c10:	4b40      	ldr	r3, [pc, #256]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a3f      	ldr	r2, [pc, #252]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c1a:	60d3      	str	r3, [r2, #12]
 8003c1c:	e011      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f882 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d028      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c4e:	4b31      	ldr	r3, [pc, #196]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5c:	492d      	ldr	r1, [pc, #180]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6e:	4b29      	ldr	r3, [pc, #164]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4a28      	ldr	r2, [pc, #160]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c78:	60d3      	str	r3, [r2, #12]
 8003c7a:	e011      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f853 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cac:	4b19      	ldr	r3, [pc, #100]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cba:	4916      	ldr	r1, [pc, #88]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f830 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cf2:	4b08      	ldr	r3, [pc, #32]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d00:	4904      	ldr	r1, [pc, #16]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d22:	f043 0304 	orr.w	r3, r3, #4
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000

08003d38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d46:	4b74      	ldr	r3, [pc, #464]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d52:	4b71      	ldr	r3, [pc, #452]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0203 	and.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d10d      	bne.n	8003d7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
       ||
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
       ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d047      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e044      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d018      	beq.n	8003dbe <RCCEx_PLLSAI1_Config+0x86>
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d825      	bhi.n	8003ddc <RCCEx_PLLSAI1_Config+0xa4>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d002      	beq.n	8003d9a <RCCEx_PLLSAI1_Config+0x62>
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d009      	beq.n	8003dac <RCCEx_PLLSAI1_Config+0x74>
 8003d98:	e020      	b.n	8003ddc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11d      	bne.n	8003de2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003daa:	e01a      	b.n	8003de2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dac:	4b5a      	ldr	r3, [pc, #360]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d116      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e013      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dbe:	4b56      	ldr	r3, [pc, #344]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dca:	4b53      	ldr	r3, [pc, #332]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dda:	e006      	b.n	8003dea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      break;
 8003de0:	e004      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003df2:	4b49      	ldr	r3, [pc, #292]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	430b      	orrs	r3, r1
 8003e08:	4943      	ldr	r1, [pc, #268]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d17c      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e14:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a3f      	ldr	r2, [pc, #252]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fd fe1c 	bl	8001a5c <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e26:	e009      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e28:	f7fd fe18 	bl	8001a5c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3a:	e005      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e3c:	4b36      	ldr	r3, [pc, #216]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ef      	bne.n	8003e28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d15f      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d110      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e54:	4b30      	ldr	r3, [pc, #192]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003e5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	0211      	lsls	r1, r2, #8
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	06d2      	lsls	r2, r2, #27
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	492a      	ldr	r1, [pc, #168]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	610b      	str	r3, [r1, #16]
 8003e74:	e027      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d112      	bne.n	8003ea2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e7c:	4b26      	ldr	r3, [pc, #152]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	0211      	lsls	r1, r2, #8
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6912      	ldr	r2, [r2, #16]
 8003e92:	0852      	lsrs	r2, r2, #1
 8003e94:	3a01      	subs	r2, #1
 8003e96:	0552      	lsls	r2, r2, #21
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	491f      	ldr	r1, [pc, #124]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	610b      	str	r3, [r1, #16]
 8003ea0:	e011      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003eaa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6892      	ldr	r2, [r2, #8]
 8003eb2:	0211      	lsls	r1, r2, #8
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6952      	ldr	r2, [r2, #20]
 8003eb8:	0852      	lsrs	r2, r2, #1
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	0652      	lsls	r2, r2, #25
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	4915      	ldr	r1, [pc, #84]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ec6:	4b14      	ldr	r3, [pc, #80]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a13      	ldr	r2, [pc, #76]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ed0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fdc3 	bl	8001a5c <HAL_GetTick>
 8003ed6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ed8:	e009      	b.n	8003eee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eda:	f7fd fdbf 	bl	8001a5c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d902      	bls.n	8003eee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	73fb      	strb	r3, [r7, #15]
          break;
 8003eec:	e005      	b.n	8003efa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ef      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	4903      	ldr	r1, [pc, #12]	@ (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000

08003f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e040      	b.n	8003fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fb88 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	@ 0x24
 8003f48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fba6 	bl	80046b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f977 	bl	800425c <UART_SetConfig>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01b      	b.n	8003fb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fc25 	bl	80047f8 <UART_CheckIdleState>
 8003fae:	4603      	mov	r3, r0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	@ 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d177      	bne.n	80040c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_UART_Transmit+0x24>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e070      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	@ 0x21
 8003fec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fee:	f7fd fd35 	bl	8001a5c <HAL_GetTick>
 8003ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d108      	bne.n	8004020 <HAL_UART_Transmit+0x68>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e003      	b.n	8004028 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004028:	e02f      	b.n	800408a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fc87 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e03b      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10b      	bne.n	8004068 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	881a      	ldrh	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800405c:	b292      	uxth	r2, r2
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	3302      	adds	r3, #2
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e007      	b.n	8004078 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	781a      	ldrb	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3301      	adds	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1c9      	bne.n	800402a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2140      	movs	r1, #64	@ 0x40
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fc51 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e005      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08a      	sub	sp, #40	@ 0x28
 80040ce:	af02      	add	r7, sp, #8
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	f040 80b6 	bne.w	8004252 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_UART_Receive+0x28>
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0ae      	b.n	8004254 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2222      	movs	r2, #34	@ 0x22
 8004102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410c:	f7fd fca6 	bl	8001a5c <HAL_GetTick>
 8004110:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800412a:	d10e      	bne.n	800414a <HAL_UART_Receive+0x80>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_UART_Receive+0x76>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800413a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800413e:	e02d      	b.n	800419c <HAL_UART_Receive+0xd2>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	22ff      	movs	r2, #255	@ 0xff
 8004144:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004148:	e028      	b.n	800419c <HAL_UART_Receive+0xd2>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <HAL_UART_Receive+0xa4>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <HAL_UART_Receive+0x9a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	@ 0xff
 800415e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004162:	e01b      	b.n	800419c <HAL_UART_Receive+0xd2>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	227f      	movs	r2, #127	@ 0x7f
 8004168:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800416c:	e016      	b.n	800419c <HAL_UART_Receive+0xd2>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004176:	d10d      	bne.n	8004194 <HAL_UART_Receive+0xca>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_UART_Receive+0xc0>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	227f      	movs	r2, #127	@ 0x7f
 8004184:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004188:	e008      	b.n	800419c <HAL_UART_Receive+0xd2>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	223f      	movs	r2, #63	@ 0x3f
 800418e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004192:	e003      	b.n	800419c <HAL_UART_Receive+0xd2>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ac:	d108      	bne.n	80041c0 <HAL_UART_Receive+0xf6>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e003      	b.n	80041c8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80041c8:	e037      	b.n	800423a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2120      	movs	r1, #32
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fbb7 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e033      	b.n	8004254 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10c      	bne.n	800420c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	8a7b      	ldrh	r3, [r7, #18]
 80041fc:	4013      	ands	r3, r2
 80041fe:	b29a      	uxth	r2, r3
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	3302      	adds	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e00d      	b.n	8004228 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004212:	b29b      	uxth	r3, r3
 8004214:	b2da      	uxtb	r2, r3
 8004216:	8a7b      	ldrh	r3, [r7, #18]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4013      	ands	r3, r2
 800421c:	b2da      	uxtb	r2, r3
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3301      	adds	r3, #1
 8004226:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1c1      	bne.n	80041ca <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e000      	b.n	8004254 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
  }
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800425c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004260:	b08a      	sub	sp, #40	@ 0x28
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	431a      	orrs	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4bb4      	ldr	r3, [pc, #720]	@ (800455c <UART_SetConfig+0x300>)
 800428c:	4013      	ands	r3, r2
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004294:	430b      	orrs	r3, r1
 8004296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4aa9      	ldr	r2, [pc, #676]	@ (8004560 <UART_SetConfig+0x304>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c4:	4313      	orrs	r3, r2
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	430a      	orrs	r2, r1
 80042da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4aa0      	ldr	r2, [pc, #640]	@ (8004564 <UART_SetConfig+0x308>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d126      	bne.n	8004334 <UART_SetConfig+0xd8>
 80042e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004568 <UART_SetConfig+0x30c>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d81b      	bhi.n	800432c <UART_SetConfig+0xd0>
 80042f4:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <UART_SetConfig+0xa0>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	0800430d 	.word	0x0800430d
 8004300:	0800431d 	.word	0x0800431d
 8004304:	08004315 	.word	0x08004315
 8004308:	08004325 	.word	0x08004325
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e080      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004314:	2302      	movs	r3, #2
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e07c      	b.n	8004416 <UART_SetConfig+0x1ba>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e078      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e074      	b.n	8004416 <UART_SetConfig+0x1ba>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e070      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a8c      	ldr	r2, [pc, #560]	@ (800456c <UART_SetConfig+0x310>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d138      	bne.n	80043b0 <UART_SetConfig+0x154>
 800433e:	4b8a      	ldr	r3, [pc, #552]	@ (8004568 <UART_SetConfig+0x30c>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b0c      	cmp	r3, #12
 800434a:	d82d      	bhi.n	80043a8 <UART_SetConfig+0x14c>
 800434c:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <UART_SetConfig+0xf8>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004389 	.word	0x08004389
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080043a9 	.word	0x080043a9
 8004360:	080043a9 	.word	0x080043a9
 8004364:	08004399 	.word	0x08004399
 8004368:	080043a9 	.word	0x080043a9
 800436c:	080043a9 	.word	0x080043a9
 8004370:	080043a9 	.word	0x080043a9
 8004374:	08004391 	.word	0x08004391
 8004378:	080043a9 	.word	0x080043a9
 800437c:	080043a9 	.word	0x080043a9
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043a1 	.word	0x080043a1
 8004388:	2300      	movs	r3, #0
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438e:	e042      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004390:	2302      	movs	r3, #2
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004396:	e03e      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004398:	2304      	movs	r3, #4
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439e:	e03a      	b.n	8004416 <UART_SetConfig+0x1ba>
 80043a0:	2308      	movs	r3, #8
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e036      	b.n	8004416 <UART_SetConfig+0x1ba>
 80043a8:	2310      	movs	r3, #16
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e032      	b.n	8004416 <UART_SetConfig+0x1ba>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6a      	ldr	r2, [pc, #424]	@ (8004560 <UART_SetConfig+0x304>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d12a      	bne.n	8004410 <UART_SetConfig+0x1b4>
 80043ba:	4b6b      	ldr	r3, [pc, #428]	@ (8004568 <UART_SetConfig+0x30c>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043c8:	d01a      	beq.n	8004400 <UART_SetConfig+0x1a4>
 80043ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ce:	d81b      	bhi.n	8004408 <UART_SetConfig+0x1ac>
 80043d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d4:	d00c      	beq.n	80043f0 <UART_SetConfig+0x194>
 80043d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043da:	d815      	bhi.n	8004408 <UART_SetConfig+0x1ac>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <UART_SetConfig+0x18c>
 80043e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e4:	d008      	beq.n	80043f8 <UART_SetConfig+0x19c>
 80043e6:	e00f      	b.n	8004408 <UART_SetConfig+0x1ac>
 80043e8:	2300      	movs	r3, #0
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ee:	e012      	b.n	8004416 <UART_SetConfig+0x1ba>
 80043f0:	2302      	movs	r3, #2
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f6:	e00e      	b.n	8004416 <UART_SetConfig+0x1ba>
 80043f8:	2304      	movs	r3, #4
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fe:	e00a      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004400:	2308      	movs	r3, #8
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e006      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004408:	2310      	movs	r3, #16
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e002      	b.n	8004416 <UART_SetConfig+0x1ba>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a51      	ldr	r2, [pc, #324]	@ (8004560 <UART_SetConfig+0x304>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d17a      	bne.n	8004516 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004420:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004424:	2b08      	cmp	r3, #8
 8004426:	d824      	bhi.n	8004472 <UART_SetConfig+0x216>
 8004428:	a201      	add	r2, pc, #4	@ (adr r2, 8004430 <UART_SetConfig+0x1d4>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004455 	.word	0x08004455
 8004434:	08004473 	.word	0x08004473
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004473 	.word	0x08004473
 8004440:	08004463 	.word	0x08004463
 8004444:	08004473 	.word	0x08004473
 8004448:	08004473 	.word	0x08004473
 800444c:	08004473 	.word	0x08004473
 8004450:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004454:	f7ff f9de 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8004458:	61f8      	str	r0, [r7, #28]
        break;
 800445a:	e010      	b.n	800447e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b44      	ldr	r3, [pc, #272]	@ (8004570 <UART_SetConfig+0x314>)
 800445e:	61fb      	str	r3, [r7, #28]
        break;
 8004460:	e00d      	b.n	800447e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7ff f93f 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8004466:	61f8      	str	r0, [r7, #28]
        break;
 8004468:	e009      	b.n	800447e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446e:	61fb      	str	r3, [r7, #28]
        break;
 8004470:	e005      	b.n	800447e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800447c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8107 	beq.w	8004694 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4413      	add	r3, r2
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	429a      	cmp	r2, r3
 8004494:	d305      	bcc.n	80044a2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d903      	bls.n	80044aa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044a8:	e0f4      	b.n	8004694 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2200      	movs	r2, #0
 80044ae:	461c      	mov	r4, r3
 80044b0:	4615      	mov	r5, r2
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	022b      	lsls	r3, r5, #8
 80044bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044c0:	0222      	lsls	r2, r4, #8
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6849      	ldr	r1, [r1, #4]
 80044c6:	0849      	lsrs	r1, r1, #1
 80044c8:	2000      	movs	r0, #0
 80044ca:	4688      	mov	r8, r1
 80044cc:	4681      	mov	r9, r0
 80044ce:	eb12 0a08 	adds.w	sl, r2, r8
 80044d2:	eb43 0b09 	adc.w	fp, r3, r9
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e4:	4650      	mov	r0, sl
 80044e6:	4659      	mov	r1, fp
 80044e8:	f7fc fbce 	bl	8000c88 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4613      	mov	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044fa:	d308      	bcc.n	800450e <UART_SetConfig+0x2b2>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004502:	d204      	bcs.n	800450e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	60da      	str	r2, [r3, #12]
 800450c:	e0c2      	b.n	8004694 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004514:	e0be      	b.n	8004694 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451e:	d16a      	bne.n	80045f6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004520:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004524:	2b08      	cmp	r3, #8
 8004526:	d834      	bhi.n	8004592 <UART_SetConfig+0x336>
 8004528:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <UART_SetConfig+0x2d4>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004555 	.word	0x08004555
 8004534:	08004575 	.word	0x08004575
 8004538:	0800457d 	.word	0x0800457d
 800453c:	08004593 	.word	0x08004593
 8004540:	08004583 	.word	0x08004583
 8004544:	08004593 	.word	0x08004593
 8004548:	08004593 	.word	0x08004593
 800454c:	08004593 	.word	0x08004593
 8004550:	0800458b 	.word	0x0800458b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7ff f95e 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8004558:	61f8      	str	r0, [r7, #28]
        break;
 800455a:	e020      	b.n	800459e <UART_SetConfig+0x342>
 800455c:	efff69f3 	.word	0xefff69f3
 8004560:	40008000 	.word	0x40008000
 8004564:	40013800 	.word	0x40013800
 8004568:	40021000 	.word	0x40021000
 800456c:	40004400 	.word	0x40004400
 8004570:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7ff f964 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8004578:	61f8      	str	r0, [r7, #28]
        break;
 800457a:	e010      	b.n	800459e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800457c:	4b4c      	ldr	r3, [pc, #304]	@ (80046b0 <UART_SetConfig+0x454>)
 800457e:	61fb      	str	r3, [r7, #28]
        break;
 8004580:	e00d      	b.n	800459e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004582:	f7ff f8af 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8004586:	61f8      	str	r0, [r7, #28]
        break;
 8004588:	e009      	b.n	800459e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800458e:	61fb      	str	r3, [r7, #28]
        break;
 8004590:	e005      	b.n	800459e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800459c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d077      	beq.n	8004694 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005a      	lsls	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d916      	bls.n	80045ee <UART_SetConfig+0x392>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c6:	d212      	bcs.n	80045ee <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f023 030f 	bic.w	r3, r3, #15
 80045d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	b29a      	uxth	r2, r3
 80045de:	8afb      	ldrh	r3, [r7, #22]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	8afa      	ldrh	r2, [r7, #22]
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e052      	b.n	8004694 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045f4:	e04e      	b.n	8004694 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d827      	bhi.n	800464e <UART_SetConfig+0x3f2>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <UART_SetConfig+0x3a8>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	0800464f 	.word	0x0800464f
 8004614:	0800463f 	.word	0x0800463f
 8004618:	0800464f 	.word	0x0800464f
 800461c:	0800464f 	.word	0x0800464f
 8004620:	0800464f 	.word	0x0800464f
 8004624:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7ff f8f4 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 800462c:	61f8      	str	r0, [r7, #28]
        break;
 800462e:	e014      	b.n	800465a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004630:	f7ff f906 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8004634:	61f8      	str	r0, [r7, #28]
        break;
 8004636:	e010      	b.n	800465a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <UART_SetConfig+0x454>)
 800463a:	61fb      	str	r3, [r7, #28]
        break;
 800463c:	e00d      	b.n	800465a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7ff f851 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8004642:	61f8      	str	r0, [r7, #28]
        break;
 8004644:	e009      	b.n	800465a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464a:	61fb      	str	r3, [r7, #28]
        break;
 800464c:	e005      	b.n	800465a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004658:	bf00      	nop
    }

    if (pclk != 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d019      	beq.n	8004694 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	085a      	lsrs	r2, r3, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d909      	bls.n	800468e <UART_SetConfig+0x432>
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d205      	bcs.n	800468e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e002      	b.n	8004694 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	@ 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ae:	bf00      	nop
 80046b0:	00f42400 	.word	0x00f42400

080046b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01a      	beq.n	80047ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b2:	d10a      	bne.n	80047ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b098      	sub	sp, #96	@ 0x60
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004808:	f7fd f928 	bl	8001a5c <HAL_GetTick>
 800480c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d12e      	bne.n	800487a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800481c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004824:	2200      	movs	r2, #0
 8004826:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f88c 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d021      	beq.n	800487a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800484a:	653b      	str	r3, [r7, #80]	@ 0x50
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004854:	647b      	str	r3, [r7, #68]	@ 0x44
 8004856:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800485a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e6      	bne.n	8004836 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e062      	b.n	8004940 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d149      	bne.n	800491c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004888:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f856 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d03c      	beq.n	800491c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	623b      	str	r3, [r7, #32]
   return(result);
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048f4:	61fa      	str	r2, [r7, #28]
 80048f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	69b9      	ldr	r1, [r7, #24]
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	617b      	str	r3, [r7, #20]
   return(result);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e011      	b.n	8004940 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3758      	adds	r7, #88	@ 0x58
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004958:	e04f      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004960:	d04b      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004962:	f7fd f87b 	bl	8001a5c <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <UART_WaitOnFlagUntilTimeout+0x30>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e04e      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d037      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b80      	cmp	r3, #128	@ 0x80
 800498e:	d034      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b40      	cmp	r3, #64	@ 0x40
 8004994:	d031      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d110      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2208      	movs	r2, #8
 80049aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f838 	bl	8004a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2208      	movs	r2, #8
 80049b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e029      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d4:	d111      	bne.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f81e 	bl	8004a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e00f      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4013      	ands	r3, r2
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d0a0      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b095      	sub	sp, #84	@ 0x54
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e6      	bne.n	8004a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3308      	adds	r3, #8
 8004a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d118      	bne.n	8004aca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f023 0310 	bic.w	r3, r3, #16
 8004aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6979      	ldr	r1, [r7, #20]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e6      	bne.n	8004a98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ade:	bf00      	nop
 8004ae0:	3754      	adds	r7, #84	@ 0x54
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <__cvt>:
 8004aea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aee:	ec57 6b10 	vmov	r6, r7, d0
 8004af2:	2f00      	cmp	r7, #0
 8004af4:	460c      	mov	r4, r1
 8004af6:	4619      	mov	r1, r3
 8004af8:	463b      	mov	r3, r7
 8004afa:	bfbb      	ittet	lt
 8004afc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004b00:	461f      	movlt	r7, r3
 8004b02:	2300      	movge	r3, #0
 8004b04:	232d      	movlt	r3, #45	@ 0x2d
 8004b06:	700b      	strb	r3, [r1, #0]
 8004b08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b0a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004b0e:	4691      	mov	r9, r2
 8004b10:	f023 0820 	bic.w	r8, r3, #32
 8004b14:	bfbc      	itt	lt
 8004b16:	4632      	movlt	r2, r6
 8004b18:	4616      	movlt	r6, r2
 8004b1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b1e:	d005      	beq.n	8004b2c <__cvt+0x42>
 8004b20:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b24:	d100      	bne.n	8004b28 <__cvt+0x3e>
 8004b26:	3401      	adds	r4, #1
 8004b28:	2102      	movs	r1, #2
 8004b2a:	e000      	b.n	8004b2e <__cvt+0x44>
 8004b2c:	2103      	movs	r1, #3
 8004b2e:	ab03      	add	r3, sp, #12
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	ab02      	add	r3, sp, #8
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	ec47 6b10 	vmov	d0, r6, r7
 8004b3a:	4653      	mov	r3, sl
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	f001 f87f 	bl	8005c40 <_dtoa_r>
 8004b42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b46:	4605      	mov	r5, r0
 8004b48:	d119      	bne.n	8004b7e <__cvt+0x94>
 8004b4a:	f019 0f01 	tst.w	r9, #1
 8004b4e:	d00e      	beq.n	8004b6e <__cvt+0x84>
 8004b50:	eb00 0904 	add.w	r9, r0, r4
 8004b54:	2200      	movs	r2, #0
 8004b56:	2300      	movs	r3, #0
 8004b58:	4630      	mov	r0, r6
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	f7fb ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b60:	b108      	cbz	r0, 8004b66 <__cvt+0x7c>
 8004b62:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b66:	2230      	movs	r2, #48	@ 0x30
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	454b      	cmp	r3, r9
 8004b6c:	d31e      	bcc.n	8004bac <__cvt+0xc2>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b72:	1b5b      	subs	r3, r3, r5
 8004b74:	4628      	mov	r0, r5
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	b004      	add	sp, #16
 8004b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b82:	eb00 0904 	add.w	r9, r0, r4
 8004b86:	d1e5      	bne.n	8004b54 <__cvt+0x6a>
 8004b88:	7803      	ldrb	r3, [r0, #0]
 8004b8a:	2b30      	cmp	r3, #48	@ 0x30
 8004b8c:	d10a      	bne.n	8004ba4 <__cvt+0xba>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2300      	movs	r3, #0
 8004b92:	4630      	mov	r0, r6
 8004b94:	4639      	mov	r1, r7
 8004b96:	f7fb ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b9a:	b918      	cbnz	r0, 8004ba4 <__cvt+0xba>
 8004b9c:	f1c4 0401 	rsb	r4, r4, #1
 8004ba0:	f8ca 4000 	str.w	r4, [sl]
 8004ba4:	f8da 3000 	ldr.w	r3, [sl]
 8004ba8:	4499      	add	r9, r3
 8004baa:	e7d3      	b.n	8004b54 <__cvt+0x6a>
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	9103      	str	r1, [sp, #12]
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e7d9      	b.n	8004b68 <__cvt+0x7e>

08004bb4 <__exponent>:
 8004bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bb6:	2900      	cmp	r1, #0
 8004bb8:	bfba      	itte	lt
 8004bba:	4249      	neglt	r1, r1
 8004bbc:	232d      	movlt	r3, #45	@ 0x2d
 8004bbe:	232b      	movge	r3, #43	@ 0x2b
 8004bc0:	2909      	cmp	r1, #9
 8004bc2:	7002      	strb	r2, [r0, #0]
 8004bc4:	7043      	strb	r3, [r0, #1]
 8004bc6:	dd29      	ble.n	8004c1c <__exponent+0x68>
 8004bc8:	f10d 0307 	add.w	r3, sp, #7
 8004bcc:	461d      	mov	r5, r3
 8004bce:	270a      	movs	r7, #10
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	fbb1 f6f7 	udiv	r6, r1, r7
 8004bd6:	fb07 1416 	mls	r4, r7, r6, r1
 8004bda:	3430      	adds	r4, #48	@ 0x30
 8004bdc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004be0:	460c      	mov	r4, r1
 8004be2:	2c63      	cmp	r4, #99	@ 0x63
 8004be4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004be8:	4631      	mov	r1, r6
 8004bea:	dcf1      	bgt.n	8004bd0 <__exponent+0x1c>
 8004bec:	3130      	adds	r1, #48	@ 0x30
 8004bee:	1e94      	subs	r4, r2, #2
 8004bf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bf4:	1c41      	adds	r1, r0, #1
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	42ab      	cmp	r3, r5
 8004bfa:	d30a      	bcc.n	8004c12 <__exponent+0x5e>
 8004bfc:	f10d 0309 	add.w	r3, sp, #9
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	42ac      	cmp	r4, r5
 8004c04:	bf88      	it	hi
 8004c06:	2300      	movhi	r3, #0
 8004c08:	3302      	adds	r3, #2
 8004c0a:	4403      	add	r3, r0
 8004c0c:	1a18      	subs	r0, r3, r0
 8004c0e:	b003      	add	sp, #12
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c1a:	e7ed      	b.n	8004bf8 <__exponent+0x44>
 8004c1c:	2330      	movs	r3, #48	@ 0x30
 8004c1e:	3130      	adds	r1, #48	@ 0x30
 8004c20:	7083      	strb	r3, [r0, #2]
 8004c22:	70c1      	strb	r1, [r0, #3]
 8004c24:	1d03      	adds	r3, r0, #4
 8004c26:	e7f1      	b.n	8004c0c <__exponent+0x58>

08004c28 <_printf_float>:
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	b08d      	sub	sp, #52	@ 0x34
 8004c2e:	460c      	mov	r4, r1
 8004c30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004c34:	4616      	mov	r6, r2
 8004c36:	461f      	mov	r7, r3
 8004c38:	4605      	mov	r5, r0
 8004c3a:	f000 fefb 	bl	8005a34 <_localeconv_r>
 8004c3e:	6803      	ldr	r3, [r0, #0]
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fb fb14 	bl	8000270 <strlen>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c50:	9005      	str	r0, [sp, #20]
 8004c52:	3307      	adds	r3, #7
 8004c54:	f023 0307 	bic.w	r3, r3, #7
 8004c58:	f103 0208 	add.w	r2, r3, #8
 8004c5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c60:	f8d4 b000 	ldr.w	fp, [r4]
 8004c64:	f8c8 2000 	str.w	r2, [r8]
 8004c68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c70:	9307      	str	r3, [sp, #28]
 8004c72:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ef0 <_printf_float+0x2c8>)
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c84:	f7fb ff52 	bl	8000b2c <__aeabi_dcmpun>
 8004c88:	bb70      	cbnz	r0, 8004ce8 <_printf_float+0xc0>
 8004c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c8e:	4b98      	ldr	r3, [pc, #608]	@ (8004ef0 <_printf_float+0x2c8>)
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c94:	f7fb ff2c 	bl	8000af0 <__aeabi_dcmple>
 8004c98:	bb30      	cbnz	r0, 8004ce8 <_printf_float+0xc0>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	f7fb ff1b 	bl	8000adc <__aeabi_dcmplt>
 8004ca6:	b110      	cbz	r0, 8004cae <_printf_float+0x86>
 8004ca8:	232d      	movs	r3, #45	@ 0x2d
 8004caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cae:	4a91      	ldr	r2, [pc, #580]	@ (8004ef4 <_printf_float+0x2cc>)
 8004cb0:	4b91      	ldr	r3, [pc, #580]	@ (8004ef8 <_printf_float+0x2d0>)
 8004cb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004cb6:	bf8c      	ite	hi
 8004cb8:	4690      	movhi	r8, r2
 8004cba:	4698      	movls	r8, r3
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	f02b 0304 	bic.w	r3, fp, #4
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	f04f 0900 	mov.w	r9, #0
 8004cca:	9700      	str	r7, [sp, #0]
 8004ccc:	4633      	mov	r3, r6
 8004cce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f9d2 	bl	800507c <_printf_common>
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f040 808d 	bne.w	8004df8 <_printf_float+0x1d0>
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ce2:	b00d      	add	sp, #52	@ 0x34
 8004ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	4640      	mov	r0, r8
 8004cee:	4649      	mov	r1, r9
 8004cf0:	f7fb ff1c 	bl	8000b2c <__aeabi_dcmpun>
 8004cf4:	b140      	cbz	r0, 8004d08 <_printf_float+0xe0>
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfbc      	itt	lt
 8004cfc:	232d      	movlt	r3, #45	@ 0x2d
 8004cfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d02:	4a7e      	ldr	r2, [pc, #504]	@ (8004efc <_printf_float+0x2d4>)
 8004d04:	4b7e      	ldr	r3, [pc, #504]	@ (8004f00 <_printf_float+0x2d8>)
 8004d06:	e7d4      	b.n	8004cb2 <_printf_float+0x8a>
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004d0e:	9206      	str	r2, [sp, #24]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	d13b      	bne.n	8004d8c <_printf_float+0x164>
 8004d14:	2306      	movs	r3, #6
 8004d16:	6063      	str	r3, [r4, #4]
 8004d18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	9303      	str	r3, [sp, #12]
 8004d22:	ab0a      	add	r3, sp, #40	@ 0x28
 8004d24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004d28:	ab09      	add	r3, sp, #36	@ 0x24
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	6861      	ldr	r1, [r4, #4]
 8004d2e:	ec49 8b10 	vmov	d0, r8, r9
 8004d32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004d36:	4628      	mov	r0, r5
 8004d38:	f7ff fed7 	bl	8004aea <__cvt>
 8004d3c:	9b06      	ldr	r3, [sp, #24]
 8004d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d40:	2b47      	cmp	r3, #71	@ 0x47
 8004d42:	4680      	mov	r8, r0
 8004d44:	d129      	bne.n	8004d9a <_printf_float+0x172>
 8004d46:	1cc8      	adds	r0, r1, #3
 8004d48:	db02      	blt.n	8004d50 <_printf_float+0x128>
 8004d4a:	6863      	ldr	r3, [r4, #4]
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	dd41      	ble.n	8004dd4 <_printf_float+0x1ac>
 8004d50:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d54:	fa5f fa8a 	uxtb.w	sl, sl
 8004d58:	3901      	subs	r1, #1
 8004d5a:	4652      	mov	r2, sl
 8004d5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d60:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d62:	f7ff ff27 	bl	8004bb4 <__exponent>
 8004d66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d68:	1813      	adds	r3, r2, r0
 8004d6a:	2a01      	cmp	r2, #1
 8004d6c:	4681      	mov	r9, r0
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	dc02      	bgt.n	8004d78 <_printf_float+0x150>
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	07d2      	lsls	r2, r2, #31
 8004d76:	d501      	bpl.n	8004d7c <_printf_float+0x154>
 8004d78:	3301      	adds	r3, #1
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0a2      	beq.n	8004cca <_printf_float+0xa2>
 8004d84:	232d      	movs	r3, #45	@ 0x2d
 8004d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d8a:	e79e      	b.n	8004cca <_printf_float+0xa2>
 8004d8c:	9a06      	ldr	r2, [sp, #24]
 8004d8e:	2a47      	cmp	r2, #71	@ 0x47
 8004d90:	d1c2      	bne.n	8004d18 <_printf_float+0xf0>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1c0      	bne.n	8004d18 <_printf_float+0xf0>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e7bd      	b.n	8004d16 <_printf_float+0xee>
 8004d9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d9e:	d9db      	bls.n	8004d58 <_printf_float+0x130>
 8004da0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004da4:	d118      	bne.n	8004dd8 <_printf_float+0x1b0>
 8004da6:	2900      	cmp	r1, #0
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	dd0b      	ble.n	8004dc4 <_printf_float+0x19c>
 8004dac:	6121      	str	r1, [r4, #16]
 8004dae:	b913      	cbnz	r3, 8004db6 <_printf_float+0x18e>
 8004db0:	6822      	ldr	r2, [r4, #0]
 8004db2:	07d0      	lsls	r0, r2, #31
 8004db4:	d502      	bpl.n	8004dbc <_printf_float+0x194>
 8004db6:	3301      	adds	r3, #1
 8004db8:	440b      	add	r3, r1
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004dbe:	f04f 0900 	mov.w	r9, #0
 8004dc2:	e7db      	b.n	8004d7c <_printf_float+0x154>
 8004dc4:	b913      	cbnz	r3, 8004dcc <_printf_float+0x1a4>
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	07d2      	lsls	r2, r2, #31
 8004dca:	d501      	bpl.n	8004dd0 <_printf_float+0x1a8>
 8004dcc:	3302      	adds	r3, #2
 8004dce:	e7f4      	b.n	8004dba <_printf_float+0x192>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e7f2      	b.n	8004dba <_printf_float+0x192>
 8004dd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dda:	4299      	cmp	r1, r3
 8004ddc:	db05      	blt.n	8004dea <_printf_float+0x1c2>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	6121      	str	r1, [r4, #16]
 8004de2:	07d8      	lsls	r0, r3, #31
 8004de4:	d5ea      	bpl.n	8004dbc <_printf_float+0x194>
 8004de6:	1c4b      	adds	r3, r1, #1
 8004de8:	e7e7      	b.n	8004dba <_printf_float+0x192>
 8004dea:	2900      	cmp	r1, #0
 8004dec:	bfd4      	ite	le
 8004dee:	f1c1 0202 	rsble	r2, r1, #2
 8004df2:	2201      	movgt	r2, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	e7e0      	b.n	8004dba <_printf_float+0x192>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	055a      	lsls	r2, r3, #21
 8004dfc:	d407      	bmi.n	8004e0e <_printf_float+0x1e6>
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	4642      	mov	r2, r8
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d12b      	bne.n	8004e64 <_printf_float+0x23c>
 8004e0c:	e767      	b.n	8004cde <_printf_float+0xb6>
 8004e0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e12:	f240 80dd 	bls.w	8004fd0 <_printf_float+0x3a8>
 8004e16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f7fb fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d033      	beq.n	8004e8e <_printf_float+0x266>
 8004e26:	4a37      	ldr	r2, [pc, #220]	@ (8004f04 <_printf_float+0x2dc>)
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f af54 	beq.w	8004cde <_printf_float+0xb6>
 8004e36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e3a:	4543      	cmp	r3, r8
 8004e3c:	db02      	blt.n	8004e44 <_printf_float+0x21c>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	07d8      	lsls	r0, r3, #31
 8004e42:	d50f      	bpl.n	8004e64 <_printf_float+0x23c>
 8004e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f43f af45 	beq.w	8004cde <_printf_float+0xb6>
 8004e54:	f04f 0900 	mov.w	r9, #0
 8004e58:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004e5c:	f104 0a1a 	add.w	sl, r4, #26
 8004e60:	45c8      	cmp	r8, r9
 8004e62:	dc09      	bgt.n	8004e78 <_printf_float+0x250>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	079b      	lsls	r3, r3, #30
 8004e68:	f100 8103 	bmi.w	8005072 <_printf_float+0x44a>
 8004e6c:	68e0      	ldr	r0, [r4, #12]
 8004e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e70:	4298      	cmp	r0, r3
 8004e72:	bfb8      	it	lt
 8004e74:	4618      	movlt	r0, r3
 8004e76:	e734      	b.n	8004ce2 <_printf_float+0xba>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	4652      	mov	r2, sl
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b8      	blx	r7
 8004e82:	3001      	adds	r0, #1
 8004e84:	f43f af2b 	beq.w	8004cde <_printf_float+0xb6>
 8004e88:	f109 0901 	add.w	r9, r9, #1
 8004e8c:	e7e8      	b.n	8004e60 <_printf_float+0x238>
 8004e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	dc39      	bgt.n	8004f08 <_printf_float+0x2e0>
 8004e94:	4a1b      	ldr	r2, [pc, #108]	@ (8004f04 <_printf_float+0x2dc>)
 8004e96:	2301      	movs	r3, #1
 8004e98:	4631      	mov	r1, r6
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	47b8      	blx	r7
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	f43f af1d 	beq.w	8004cde <_printf_float+0xb6>
 8004ea4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004ea8:	ea59 0303 	orrs.w	r3, r9, r3
 8004eac:	d102      	bne.n	8004eb4 <_printf_float+0x28c>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	07d9      	lsls	r1, r3, #31
 8004eb2:	d5d7      	bpl.n	8004e64 <_printf_float+0x23c>
 8004eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b8      	blx	r7
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f43f af0d 	beq.w	8004cde <_printf_float+0xb6>
 8004ec4:	f04f 0a00 	mov.w	sl, #0
 8004ec8:	f104 0b1a 	add.w	fp, r4, #26
 8004ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ece:	425b      	negs	r3, r3
 8004ed0:	4553      	cmp	r3, sl
 8004ed2:	dc01      	bgt.n	8004ed8 <_printf_float+0x2b0>
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	e793      	b.n	8004e00 <_printf_float+0x1d8>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	465a      	mov	r2, fp
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f aefb 	beq.w	8004cde <_printf_float+0xb6>
 8004ee8:	f10a 0a01 	add.w	sl, sl, #1
 8004eec:	e7ee      	b.n	8004ecc <_printf_float+0x2a4>
 8004eee:	bf00      	nop
 8004ef0:	7fefffff 	.word	0x7fefffff
 8004ef4:	08009250 	.word	0x08009250
 8004ef8:	0800924c 	.word	0x0800924c
 8004efc:	08009258 	.word	0x08009258
 8004f00:	08009254 	.word	0x08009254
 8004f04:	0800925c 	.word	0x0800925c
 8004f08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f0e:	4553      	cmp	r3, sl
 8004f10:	bfa8      	it	ge
 8004f12:	4653      	movge	r3, sl
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	4699      	mov	r9, r3
 8004f18:	dc36      	bgt.n	8004f88 <_printf_float+0x360>
 8004f1a:	f04f 0b00 	mov.w	fp, #0
 8004f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f22:	f104 021a 	add.w	r2, r4, #26
 8004f26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f28:	9306      	str	r3, [sp, #24]
 8004f2a:	eba3 0309 	sub.w	r3, r3, r9
 8004f2e:	455b      	cmp	r3, fp
 8004f30:	dc31      	bgt.n	8004f96 <_printf_float+0x36e>
 8004f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f34:	459a      	cmp	sl, r3
 8004f36:	dc3a      	bgt.n	8004fae <_printf_float+0x386>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	07da      	lsls	r2, r3, #31
 8004f3c:	d437      	bmi.n	8004fae <_printf_float+0x386>
 8004f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f40:	ebaa 0903 	sub.w	r9, sl, r3
 8004f44:	9b06      	ldr	r3, [sp, #24]
 8004f46:	ebaa 0303 	sub.w	r3, sl, r3
 8004f4a:	4599      	cmp	r9, r3
 8004f4c:	bfa8      	it	ge
 8004f4e:	4699      	movge	r9, r3
 8004f50:	f1b9 0f00 	cmp.w	r9, #0
 8004f54:	dc33      	bgt.n	8004fbe <_printf_float+0x396>
 8004f56:	f04f 0800 	mov.w	r8, #0
 8004f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f5e:	f104 0b1a 	add.w	fp, r4, #26
 8004f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f64:	ebaa 0303 	sub.w	r3, sl, r3
 8004f68:	eba3 0309 	sub.w	r3, r3, r9
 8004f6c:	4543      	cmp	r3, r8
 8004f6e:	f77f af79 	ble.w	8004e64 <_printf_float+0x23c>
 8004f72:	2301      	movs	r3, #1
 8004f74:	465a      	mov	r2, fp
 8004f76:	4631      	mov	r1, r6
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b8      	blx	r7
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f43f aeae 	beq.w	8004cde <_printf_float+0xb6>
 8004f82:	f108 0801 	add.w	r8, r8, #1
 8004f86:	e7ec      	b.n	8004f62 <_printf_float+0x33a>
 8004f88:	4642      	mov	r2, r8
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	47b8      	blx	r7
 8004f90:	3001      	adds	r0, #1
 8004f92:	d1c2      	bne.n	8004f1a <_printf_float+0x2f2>
 8004f94:	e6a3      	b.n	8004cde <_printf_float+0xb6>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	9206      	str	r2, [sp, #24]
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f43f ae9c 	beq.w	8004cde <_printf_float+0xb6>
 8004fa6:	9a06      	ldr	r2, [sp, #24]
 8004fa8:	f10b 0b01 	add.w	fp, fp, #1
 8004fac:	e7bb      	b.n	8004f26 <_printf_float+0x2fe>
 8004fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d1c0      	bne.n	8004f3e <_printf_float+0x316>
 8004fbc:	e68f      	b.n	8004cde <_printf_float+0xb6>
 8004fbe:	9a06      	ldr	r2, [sp, #24]
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	4442      	add	r2, r8
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b8      	blx	r7
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d1c3      	bne.n	8004f56 <_printf_float+0x32e>
 8004fce:	e686      	b.n	8004cde <_printf_float+0xb6>
 8004fd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fd4:	f1ba 0f01 	cmp.w	sl, #1
 8004fd8:	dc01      	bgt.n	8004fde <_printf_float+0x3b6>
 8004fda:	07db      	lsls	r3, r3, #31
 8004fdc:	d536      	bpl.n	800504c <_printf_float+0x424>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f43f ae78 	beq.w	8004cde <_printf_float+0xb6>
 8004fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b8      	blx	r7
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	f43f ae70 	beq.w	8004cde <_printf_float+0xb6>
 8004ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005002:	2200      	movs	r2, #0
 8005004:	2300      	movs	r3, #0
 8005006:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800500a:	f7fb fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800500e:	b9c0      	cbnz	r0, 8005042 <_printf_float+0x41a>
 8005010:	4653      	mov	r3, sl
 8005012:	f108 0201 	add.w	r2, r8, #1
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	d10c      	bne.n	800503a <_printf_float+0x412>
 8005020:	e65d      	b.n	8004cde <_printf_float+0xb6>
 8005022:	2301      	movs	r3, #1
 8005024:	465a      	mov	r2, fp
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	f43f ae56 	beq.w	8004cde <_printf_float+0xb6>
 8005032:	f108 0801 	add.w	r8, r8, #1
 8005036:	45d0      	cmp	r8, sl
 8005038:	dbf3      	blt.n	8005022 <_printf_float+0x3fa>
 800503a:	464b      	mov	r3, r9
 800503c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005040:	e6df      	b.n	8004e02 <_printf_float+0x1da>
 8005042:	f04f 0800 	mov.w	r8, #0
 8005046:	f104 0b1a 	add.w	fp, r4, #26
 800504a:	e7f4      	b.n	8005036 <_printf_float+0x40e>
 800504c:	2301      	movs	r3, #1
 800504e:	4642      	mov	r2, r8
 8005050:	e7e1      	b.n	8005016 <_printf_float+0x3ee>
 8005052:	2301      	movs	r3, #1
 8005054:	464a      	mov	r2, r9
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	f43f ae3e 	beq.w	8004cde <_printf_float+0xb6>
 8005062:	f108 0801 	add.w	r8, r8, #1
 8005066:	68e3      	ldr	r3, [r4, #12]
 8005068:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800506a:	1a5b      	subs	r3, r3, r1
 800506c:	4543      	cmp	r3, r8
 800506e:	dcf0      	bgt.n	8005052 <_printf_float+0x42a>
 8005070:	e6fc      	b.n	8004e6c <_printf_float+0x244>
 8005072:	f04f 0800 	mov.w	r8, #0
 8005076:	f104 0919 	add.w	r9, r4, #25
 800507a:	e7f4      	b.n	8005066 <_printf_float+0x43e>

0800507c <_printf_common>:
 800507c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005080:	4616      	mov	r6, r2
 8005082:	4698      	mov	r8, r3
 8005084:	688a      	ldr	r2, [r1, #8]
 8005086:	690b      	ldr	r3, [r1, #16]
 8005088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800508c:	4293      	cmp	r3, r2
 800508e:	bfb8      	it	lt
 8005090:	4613      	movlt	r3, r2
 8005092:	6033      	str	r3, [r6, #0]
 8005094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005098:	4607      	mov	r7, r0
 800509a:	460c      	mov	r4, r1
 800509c:	b10a      	cbz	r2, 80050a2 <_printf_common+0x26>
 800509e:	3301      	adds	r3, #1
 80050a0:	6033      	str	r3, [r6, #0]
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	0699      	lsls	r1, r3, #26
 80050a6:	bf42      	ittt	mi
 80050a8:	6833      	ldrmi	r3, [r6, #0]
 80050aa:	3302      	addmi	r3, #2
 80050ac:	6033      	strmi	r3, [r6, #0]
 80050ae:	6825      	ldr	r5, [r4, #0]
 80050b0:	f015 0506 	ands.w	r5, r5, #6
 80050b4:	d106      	bne.n	80050c4 <_printf_common+0x48>
 80050b6:	f104 0a19 	add.w	sl, r4, #25
 80050ba:	68e3      	ldr	r3, [r4, #12]
 80050bc:	6832      	ldr	r2, [r6, #0]
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	42ab      	cmp	r3, r5
 80050c2:	dc26      	bgt.n	8005112 <_printf_common+0x96>
 80050c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050c8:	6822      	ldr	r2, [r4, #0]
 80050ca:	3b00      	subs	r3, #0
 80050cc:	bf18      	it	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	0692      	lsls	r2, r2, #26
 80050d2:	d42b      	bmi.n	800512c <_printf_common+0xb0>
 80050d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050d8:	4641      	mov	r1, r8
 80050da:	4638      	mov	r0, r7
 80050dc:	47c8      	blx	r9
 80050de:	3001      	adds	r0, #1
 80050e0:	d01e      	beq.n	8005120 <_printf_common+0xa4>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	6922      	ldr	r2, [r4, #16]
 80050e6:	f003 0306 	and.w	r3, r3, #6
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	bf02      	ittt	eq
 80050ee:	68e5      	ldreq	r5, [r4, #12]
 80050f0:	6833      	ldreq	r3, [r6, #0]
 80050f2:	1aed      	subeq	r5, r5, r3
 80050f4:	68a3      	ldr	r3, [r4, #8]
 80050f6:	bf0c      	ite	eq
 80050f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050fc:	2500      	movne	r5, #0
 80050fe:	4293      	cmp	r3, r2
 8005100:	bfc4      	itt	gt
 8005102:	1a9b      	subgt	r3, r3, r2
 8005104:	18ed      	addgt	r5, r5, r3
 8005106:	2600      	movs	r6, #0
 8005108:	341a      	adds	r4, #26
 800510a:	42b5      	cmp	r5, r6
 800510c:	d11a      	bne.n	8005144 <_printf_common+0xc8>
 800510e:	2000      	movs	r0, #0
 8005110:	e008      	b.n	8005124 <_printf_common+0xa8>
 8005112:	2301      	movs	r3, #1
 8005114:	4652      	mov	r2, sl
 8005116:	4641      	mov	r1, r8
 8005118:	4638      	mov	r0, r7
 800511a:	47c8      	blx	r9
 800511c:	3001      	adds	r0, #1
 800511e:	d103      	bne.n	8005128 <_printf_common+0xac>
 8005120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005128:	3501      	adds	r5, #1
 800512a:	e7c6      	b.n	80050ba <_printf_common+0x3e>
 800512c:	18e1      	adds	r1, r4, r3
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	2030      	movs	r0, #48	@ 0x30
 8005132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005136:	4422      	add	r2, r4
 8005138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800513c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005140:	3302      	adds	r3, #2
 8005142:	e7c7      	b.n	80050d4 <_printf_common+0x58>
 8005144:	2301      	movs	r3, #1
 8005146:	4622      	mov	r2, r4
 8005148:	4641      	mov	r1, r8
 800514a:	4638      	mov	r0, r7
 800514c:	47c8      	blx	r9
 800514e:	3001      	adds	r0, #1
 8005150:	d0e6      	beq.n	8005120 <_printf_common+0xa4>
 8005152:	3601      	adds	r6, #1
 8005154:	e7d9      	b.n	800510a <_printf_common+0x8e>
	...

08005158 <_printf_i>:
 8005158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	7e0f      	ldrb	r7, [r1, #24]
 800515e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005160:	2f78      	cmp	r7, #120	@ 0x78
 8005162:	4691      	mov	r9, r2
 8005164:	4680      	mov	r8, r0
 8005166:	460c      	mov	r4, r1
 8005168:	469a      	mov	sl, r3
 800516a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800516e:	d807      	bhi.n	8005180 <_printf_i+0x28>
 8005170:	2f62      	cmp	r7, #98	@ 0x62
 8005172:	d80a      	bhi.n	800518a <_printf_i+0x32>
 8005174:	2f00      	cmp	r7, #0
 8005176:	f000 80d1 	beq.w	800531c <_printf_i+0x1c4>
 800517a:	2f58      	cmp	r7, #88	@ 0x58
 800517c:	f000 80b8 	beq.w	80052f0 <_printf_i+0x198>
 8005180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005188:	e03a      	b.n	8005200 <_printf_i+0xa8>
 800518a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800518e:	2b15      	cmp	r3, #21
 8005190:	d8f6      	bhi.n	8005180 <_printf_i+0x28>
 8005192:	a101      	add	r1, pc, #4	@ (adr r1, 8005198 <_printf_i+0x40>)
 8005194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005198:	080051f1 	.word	0x080051f1
 800519c:	08005205 	.word	0x08005205
 80051a0:	08005181 	.word	0x08005181
 80051a4:	08005181 	.word	0x08005181
 80051a8:	08005181 	.word	0x08005181
 80051ac:	08005181 	.word	0x08005181
 80051b0:	08005205 	.word	0x08005205
 80051b4:	08005181 	.word	0x08005181
 80051b8:	08005181 	.word	0x08005181
 80051bc:	08005181 	.word	0x08005181
 80051c0:	08005181 	.word	0x08005181
 80051c4:	08005303 	.word	0x08005303
 80051c8:	0800522f 	.word	0x0800522f
 80051cc:	080052bd 	.word	0x080052bd
 80051d0:	08005181 	.word	0x08005181
 80051d4:	08005181 	.word	0x08005181
 80051d8:	08005325 	.word	0x08005325
 80051dc:	08005181 	.word	0x08005181
 80051e0:	0800522f 	.word	0x0800522f
 80051e4:	08005181 	.word	0x08005181
 80051e8:	08005181 	.word	0x08005181
 80051ec:	080052c5 	.word	0x080052c5
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6032      	str	r2, [r6, #0]
 80051f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005200:	2301      	movs	r3, #1
 8005202:	e09c      	b.n	800533e <_printf_i+0x1e6>
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	1d19      	adds	r1, r3, #4
 800520a:	6031      	str	r1, [r6, #0]
 800520c:	0606      	lsls	r6, r0, #24
 800520e:	d501      	bpl.n	8005214 <_printf_i+0xbc>
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	e003      	b.n	800521c <_printf_i+0xc4>
 8005214:	0645      	lsls	r5, r0, #25
 8005216:	d5fb      	bpl.n	8005210 <_printf_i+0xb8>
 8005218:	f9b3 5000 	ldrsh.w	r5, [r3]
 800521c:	2d00      	cmp	r5, #0
 800521e:	da03      	bge.n	8005228 <_printf_i+0xd0>
 8005220:	232d      	movs	r3, #45	@ 0x2d
 8005222:	426d      	negs	r5, r5
 8005224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005228:	4858      	ldr	r0, [pc, #352]	@ (800538c <_printf_i+0x234>)
 800522a:	230a      	movs	r3, #10
 800522c:	e011      	b.n	8005252 <_printf_i+0xfa>
 800522e:	6821      	ldr	r1, [r4, #0]
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	0608      	lsls	r0, r1, #24
 8005234:	f853 5b04 	ldr.w	r5, [r3], #4
 8005238:	d402      	bmi.n	8005240 <_printf_i+0xe8>
 800523a:	0649      	lsls	r1, r1, #25
 800523c:	bf48      	it	mi
 800523e:	b2ad      	uxthmi	r5, r5
 8005240:	2f6f      	cmp	r7, #111	@ 0x6f
 8005242:	4852      	ldr	r0, [pc, #328]	@ (800538c <_printf_i+0x234>)
 8005244:	6033      	str	r3, [r6, #0]
 8005246:	bf14      	ite	ne
 8005248:	230a      	movne	r3, #10
 800524a:	2308      	moveq	r3, #8
 800524c:	2100      	movs	r1, #0
 800524e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005252:	6866      	ldr	r6, [r4, #4]
 8005254:	60a6      	str	r6, [r4, #8]
 8005256:	2e00      	cmp	r6, #0
 8005258:	db05      	blt.n	8005266 <_printf_i+0x10e>
 800525a:	6821      	ldr	r1, [r4, #0]
 800525c:	432e      	orrs	r6, r5
 800525e:	f021 0104 	bic.w	r1, r1, #4
 8005262:	6021      	str	r1, [r4, #0]
 8005264:	d04b      	beq.n	80052fe <_printf_i+0x1a6>
 8005266:	4616      	mov	r6, r2
 8005268:	fbb5 f1f3 	udiv	r1, r5, r3
 800526c:	fb03 5711 	mls	r7, r3, r1, r5
 8005270:	5dc7      	ldrb	r7, [r0, r7]
 8005272:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005276:	462f      	mov	r7, r5
 8005278:	42bb      	cmp	r3, r7
 800527a:	460d      	mov	r5, r1
 800527c:	d9f4      	bls.n	8005268 <_printf_i+0x110>
 800527e:	2b08      	cmp	r3, #8
 8005280:	d10b      	bne.n	800529a <_printf_i+0x142>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	07df      	lsls	r7, r3, #31
 8005286:	d508      	bpl.n	800529a <_printf_i+0x142>
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	6861      	ldr	r1, [r4, #4]
 800528c:	4299      	cmp	r1, r3
 800528e:	bfde      	ittt	le
 8005290:	2330      	movle	r3, #48	@ 0x30
 8005292:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005296:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800529a:	1b92      	subs	r2, r2, r6
 800529c:	6122      	str	r2, [r4, #16]
 800529e:	f8cd a000 	str.w	sl, [sp]
 80052a2:	464b      	mov	r3, r9
 80052a4:	aa03      	add	r2, sp, #12
 80052a6:	4621      	mov	r1, r4
 80052a8:	4640      	mov	r0, r8
 80052aa:	f7ff fee7 	bl	800507c <_printf_common>
 80052ae:	3001      	adds	r0, #1
 80052b0:	d14a      	bne.n	8005348 <_printf_i+0x1f0>
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052b6:	b004      	add	sp, #16
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	f043 0320 	orr.w	r3, r3, #32
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	4832      	ldr	r0, [pc, #200]	@ (8005390 <_printf_i+0x238>)
 80052c6:	2778      	movs	r7, #120	@ 0x78
 80052c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	6831      	ldr	r1, [r6, #0]
 80052d0:	061f      	lsls	r7, r3, #24
 80052d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80052d6:	d402      	bmi.n	80052de <_printf_i+0x186>
 80052d8:	065f      	lsls	r7, r3, #25
 80052da:	bf48      	it	mi
 80052dc:	b2ad      	uxthmi	r5, r5
 80052de:	6031      	str	r1, [r6, #0]
 80052e0:	07d9      	lsls	r1, r3, #31
 80052e2:	bf44      	itt	mi
 80052e4:	f043 0320 	orrmi.w	r3, r3, #32
 80052e8:	6023      	strmi	r3, [r4, #0]
 80052ea:	b11d      	cbz	r5, 80052f4 <_printf_i+0x19c>
 80052ec:	2310      	movs	r3, #16
 80052ee:	e7ad      	b.n	800524c <_printf_i+0xf4>
 80052f0:	4826      	ldr	r0, [pc, #152]	@ (800538c <_printf_i+0x234>)
 80052f2:	e7e9      	b.n	80052c8 <_printf_i+0x170>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	f023 0320 	bic.w	r3, r3, #32
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	e7f6      	b.n	80052ec <_printf_i+0x194>
 80052fe:	4616      	mov	r6, r2
 8005300:	e7bd      	b.n	800527e <_printf_i+0x126>
 8005302:	6833      	ldr	r3, [r6, #0]
 8005304:	6825      	ldr	r5, [r4, #0]
 8005306:	6961      	ldr	r1, [r4, #20]
 8005308:	1d18      	adds	r0, r3, #4
 800530a:	6030      	str	r0, [r6, #0]
 800530c:	062e      	lsls	r6, r5, #24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	d501      	bpl.n	8005316 <_printf_i+0x1be>
 8005312:	6019      	str	r1, [r3, #0]
 8005314:	e002      	b.n	800531c <_printf_i+0x1c4>
 8005316:	0668      	lsls	r0, r5, #25
 8005318:	d5fb      	bpl.n	8005312 <_printf_i+0x1ba>
 800531a:	8019      	strh	r1, [r3, #0]
 800531c:	2300      	movs	r3, #0
 800531e:	6123      	str	r3, [r4, #16]
 8005320:	4616      	mov	r6, r2
 8005322:	e7bc      	b.n	800529e <_printf_i+0x146>
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	6032      	str	r2, [r6, #0]
 800532a:	681e      	ldr	r6, [r3, #0]
 800532c:	6862      	ldr	r2, [r4, #4]
 800532e:	2100      	movs	r1, #0
 8005330:	4630      	mov	r0, r6
 8005332:	f7fa ff4d 	bl	80001d0 <memchr>
 8005336:	b108      	cbz	r0, 800533c <_printf_i+0x1e4>
 8005338:	1b80      	subs	r0, r0, r6
 800533a:	6060      	str	r0, [r4, #4]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	2300      	movs	r3, #0
 8005342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005346:	e7aa      	b.n	800529e <_printf_i+0x146>
 8005348:	6923      	ldr	r3, [r4, #16]
 800534a:	4632      	mov	r2, r6
 800534c:	4649      	mov	r1, r9
 800534e:	4640      	mov	r0, r8
 8005350:	47d0      	blx	sl
 8005352:	3001      	adds	r0, #1
 8005354:	d0ad      	beq.n	80052b2 <_printf_i+0x15a>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	079b      	lsls	r3, r3, #30
 800535a:	d413      	bmi.n	8005384 <_printf_i+0x22c>
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	4298      	cmp	r0, r3
 8005362:	bfb8      	it	lt
 8005364:	4618      	movlt	r0, r3
 8005366:	e7a6      	b.n	80052b6 <_printf_i+0x15e>
 8005368:	2301      	movs	r3, #1
 800536a:	4632      	mov	r2, r6
 800536c:	4649      	mov	r1, r9
 800536e:	4640      	mov	r0, r8
 8005370:	47d0      	blx	sl
 8005372:	3001      	adds	r0, #1
 8005374:	d09d      	beq.n	80052b2 <_printf_i+0x15a>
 8005376:	3501      	adds	r5, #1
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	9903      	ldr	r1, [sp, #12]
 800537c:	1a5b      	subs	r3, r3, r1
 800537e:	42ab      	cmp	r3, r5
 8005380:	dcf2      	bgt.n	8005368 <_printf_i+0x210>
 8005382:	e7eb      	b.n	800535c <_printf_i+0x204>
 8005384:	2500      	movs	r5, #0
 8005386:	f104 0619 	add.w	r6, r4, #25
 800538a:	e7f5      	b.n	8005378 <_printf_i+0x220>
 800538c:	0800925e 	.word	0x0800925e
 8005390:	0800926f 	.word	0x0800926f

08005394 <_scanf_float>:
 8005394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005398:	b087      	sub	sp, #28
 800539a:	4691      	mov	r9, r2
 800539c:	9303      	str	r3, [sp, #12]
 800539e:	688b      	ldr	r3, [r1, #8]
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80053a6:	bf81      	itttt	hi
 80053a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80053ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80053b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80053b4:	608b      	strhi	r3, [r1, #8]
 80053b6:	680b      	ldr	r3, [r1, #0]
 80053b8:	460a      	mov	r2, r1
 80053ba:	f04f 0500 	mov.w	r5, #0
 80053be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80053c2:	f842 3b1c 	str.w	r3, [r2], #28
 80053c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053ca:	4680      	mov	r8, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	bf98      	it	ls
 80053d0:	f04f 0b00 	movls.w	fp, #0
 80053d4:	9201      	str	r2, [sp, #4]
 80053d6:	4616      	mov	r6, r2
 80053d8:	46aa      	mov	sl, r5
 80053da:	462f      	mov	r7, r5
 80053dc:	9502      	str	r5, [sp, #8]
 80053de:	68a2      	ldr	r2, [r4, #8]
 80053e0:	b15a      	cbz	r2, 80053fa <_scanf_float+0x66>
 80053e2:	f8d9 3000 	ldr.w	r3, [r9]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80053ea:	d863      	bhi.n	80054b4 <_scanf_float+0x120>
 80053ec:	2b40      	cmp	r3, #64	@ 0x40
 80053ee:	d83b      	bhi.n	8005468 <_scanf_float+0xd4>
 80053f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80053f4:	b2c8      	uxtb	r0, r1
 80053f6:	280e      	cmp	r0, #14
 80053f8:	d939      	bls.n	800546e <_scanf_float+0xda>
 80053fa:	b11f      	cbz	r7, 8005404 <_scanf_float+0x70>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005408:	f1ba 0f01 	cmp.w	sl, #1
 800540c:	f200 8114 	bhi.w	8005638 <_scanf_float+0x2a4>
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	429e      	cmp	r6, r3
 8005414:	f200 8105 	bhi.w	8005622 <_scanf_float+0x28e>
 8005418:	2001      	movs	r0, #1
 800541a:	b007      	add	sp, #28
 800541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005420:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005424:	2a0d      	cmp	r2, #13
 8005426:	d8e8      	bhi.n	80053fa <_scanf_float+0x66>
 8005428:	a101      	add	r1, pc, #4	@ (adr r1, 8005430 <_scanf_float+0x9c>)
 800542a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005579 	.word	0x08005579
 8005434:	080053fb 	.word	0x080053fb
 8005438:	080053fb 	.word	0x080053fb
 800543c:	080053fb 	.word	0x080053fb
 8005440:	080055d5 	.word	0x080055d5
 8005444:	080055af 	.word	0x080055af
 8005448:	080053fb 	.word	0x080053fb
 800544c:	080053fb 	.word	0x080053fb
 8005450:	08005587 	.word	0x08005587
 8005454:	080053fb 	.word	0x080053fb
 8005458:	080053fb 	.word	0x080053fb
 800545c:	080053fb 	.word	0x080053fb
 8005460:	080053fb 	.word	0x080053fb
 8005464:	08005543 	.word	0x08005543
 8005468:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800546c:	e7da      	b.n	8005424 <_scanf_float+0x90>
 800546e:	290e      	cmp	r1, #14
 8005470:	d8c3      	bhi.n	80053fa <_scanf_float+0x66>
 8005472:	a001      	add	r0, pc, #4	@ (adr r0, 8005478 <_scanf_float+0xe4>)
 8005474:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005478:	08005533 	.word	0x08005533
 800547c:	080053fb 	.word	0x080053fb
 8005480:	08005533 	.word	0x08005533
 8005484:	080055c3 	.word	0x080055c3
 8005488:	080053fb 	.word	0x080053fb
 800548c:	080054d5 	.word	0x080054d5
 8005490:	08005519 	.word	0x08005519
 8005494:	08005519 	.word	0x08005519
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005519 	.word	0x08005519
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80054b6:	d809      	bhi.n	80054cc <_scanf_float+0x138>
 80054b8:	2b60      	cmp	r3, #96	@ 0x60
 80054ba:	d8b1      	bhi.n	8005420 <_scanf_float+0x8c>
 80054bc:	2b54      	cmp	r3, #84	@ 0x54
 80054be:	d07b      	beq.n	80055b8 <_scanf_float+0x224>
 80054c0:	2b59      	cmp	r3, #89	@ 0x59
 80054c2:	d19a      	bne.n	80053fa <_scanf_float+0x66>
 80054c4:	2d07      	cmp	r5, #7
 80054c6:	d198      	bne.n	80053fa <_scanf_float+0x66>
 80054c8:	2508      	movs	r5, #8
 80054ca:	e02f      	b.n	800552c <_scanf_float+0x198>
 80054cc:	2b74      	cmp	r3, #116	@ 0x74
 80054ce:	d073      	beq.n	80055b8 <_scanf_float+0x224>
 80054d0:	2b79      	cmp	r3, #121	@ 0x79
 80054d2:	e7f6      	b.n	80054c2 <_scanf_float+0x12e>
 80054d4:	6821      	ldr	r1, [r4, #0]
 80054d6:	05c8      	lsls	r0, r1, #23
 80054d8:	d51e      	bpl.n	8005518 <_scanf_float+0x184>
 80054da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80054de:	6021      	str	r1, [r4, #0]
 80054e0:	3701      	adds	r7, #1
 80054e2:	f1bb 0f00 	cmp.w	fp, #0
 80054e6:	d003      	beq.n	80054f0 <_scanf_float+0x15c>
 80054e8:	3201      	adds	r2, #1
 80054ea:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80054ee:	60a2      	str	r2, [r4, #8]
 80054f0:	68a3      	ldr	r3, [r4, #8]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	3301      	adds	r3, #1
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005500:	3b01      	subs	r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	f8c9 3004 	str.w	r3, [r9, #4]
 8005508:	f340 8082 	ble.w	8005610 <_scanf_float+0x27c>
 800550c:	f8d9 3000 	ldr.w	r3, [r9]
 8005510:	3301      	adds	r3, #1
 8005512:	f8c9 3000 	str.w	r3, [r9]
 8005516:	e762      	b.n	80053de <_scanf_float+0x4a>
 8005518:	eb1a 0105 	adds.w	r1, sl, r5
 800551c:	f47f af6d 	bne.w	80053fa <_scanf_float+0x66>
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	460d      	mov	r5, r1
 800552a:	468a      	mov	sl, r1
 800552c:	f806 3b01 	strb.w	r3, [r6], #1
 8005530:	e7de      	b.n	80054f0 <_scanf_float+0x15c>
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	0610      	lsls	r0, r2, #24
 8005536:	f57f af60 	bpl.w	80053fa <_scanf_float+0x66>
 800553a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	e7f4      	b.n	800552c <_scanf_float+0x198>
 8005542:	f1ba 0f00 	cmp.w	sl, #0
 8005546:	d10c      	bne.n	8005562 <_scanf_float+0x1ce>
 8005548:	b977      	cbnz	r7, 8005568 <_scanf_float+0x1d4>
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005550:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005554:	d108      	bne.n	8005568 <_scanf_float+0x1d4>
 8005556:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800555a:	6022      	str	r2, [r4, #0]
 800555c:	f04f 0a01 	mov.w	sl, #1
 8005560:	e7e4      	b.n	800552c <_scanf_float+0x198>
 8005562:	f1ba 0f02 	cmp.w	sl, #2
 8005566:	d050      	beq.n	800560a <_scanf_float+0x276>
 8005568:	2d01      	cmp	r5, #1
 800556a:	d002      	beq.n	8005572 <_scanf_float+0x1de>
 800556c:	2d04      	cmp	r5, #4
 800556e:	f47f af44 	bne.w	80053fa <_scanf_float+0x66>
 8005572:	3501      	adds	r5, #1
 8005574:	b2ed      	uxtb	r5, r5
 8005576:	e7d9      	b.n	800552c <_scanf_float+0x198>
 8005578:	f1ba 0f01 	cmp.w	sl, #1
 800557c:	f47f af3d 	bne.w	80053fa <_scanf_float+0x66>
 8005580:	f04f 0a02 	mov.w	sl, #2
 8005584:	e7d2      	b.n	800552c <_scanf_float+0x198>
 8005586:	b975      	cbnz	r5, 80055a6 <_scanf_float+0x212>
 8005588:	2f00      	cmp	r7, #0
 800558a:	f47f af37 	bne.w	80053fc <_scanf_float+0x68>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005594:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005598:	f040 8103 	bne.w	80057a2 <_scanf_float+0x40e>
 800559c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055a0:	6022      	str	r2, [r4, #0]
 80055a2:	2501      	movs	r5, #1
 80055a4:	e7c2      	b.n	800552c <_scanf_float+0x198>
 80055a6:	2d03      	cmp	r5, #3
 80055a8:	d0e3      	beq.n	8005572 <_scanf_float+0x1de>
 80055aa:	2d05      	cmp	r5, #5
 80055ac:	e7df      	b.n	800556e <_scanf_float+0x1da>
 80055ae:	2d02      	cmp	r5, #2
 80055b0:	f47f af23 	bne.w	80053fa <_scanf_float+0x66>
 80055b4:	2503      	movs	r5, #3
 80055b6:	e7b9      	b.n	800552c <_scanf_float+0x198>
 80055b8:	2d06      	cmp	r5, #6
 80055ba:	f47f af1e 	bne.w	80053fa <_scanf_float+0x66>
 80055be:	2507      	movs	r5, #7
 80055c0:	e7b4      	b.n	800552c <_scanf_float+0x198>
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	0591      	lsls	r1, r2, #22
 80055c6:	f57f af18 	bpl.w	80053fa <_scanf_float+0x66>
 80055ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80055ce:	6022      	str	r2, [r4, #0]
 80055d0:	9702      	str	r7, [sp, #8]
 80055d2:	e7ab      	b.n	800552c <_scanf_float+0x198>
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80055da:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80055de:	d005      	beq.n	80055ec <_scanf_float+0x258>
 80055e0:	0550      	lsls	r0, r2, #21
 80055e2:	f57f af0a 	bpl.w	80053fa <_scanf_float+0x66>
 80055e6:	2f00      	cmp	r7, #0
 80055e8:	f000 80db 	beq.w	80057a2 <_scanf_float+0x40e>
 80055ec:	0591      	lsls	r1, r2, #22
 80055ee:	bf58      	it	pl
 80055f0:	9902      	ldrpl	r1, [sp, #8]
 80055f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055f6:	bf58      	it	pl
 80055f8:	1a79      	subpl	r1, r7, r1
 80055fa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80055fe:	bf58      	it	pl
 8005600:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005604:	6022      	str	r2, [r4, #0]
 8005606:	2700      	movs	r7, #0
 8005608:	e790      	b.n	800552c <_scanf_float+0x198>
 800560a:	f04f 0a03 	mov.w	sl, #3
 800560e:	e78d      	b.n	800552c <_scanf_float+0x198>
 8005610:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005614:	4649      	mov	r1, r9
 8005616:	4640      	mov	r0, r8
 8005618:	4798      	blx	r3
 800561a:	2800      	cmp	r0, #0
 800561c:	f43f aedf 	beq.w	80053de <_scanf_float+0x4a>
 8005620:	e6eb      	b.n	80053fa <_scanf_float+0x66>
 8005622:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005626:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800562a:	464a      	mov	r2, r9
 800562c:	4640      	mov	r0, r8
 800562e:	4798      	blx	r3
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	3b01      	subs	r3, #1
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	e6eb      	b.n	8005410 <_scanf_float+0x7c>
 8005638:	1e6b      	subs	r3, r5, #1
 800563a:	2b06      	cmp	r3, #6
 800563c:	d824      	bhi.n	8005688 <_scanf_float+0x2f4>
 800563e:	2d02      	cmp	r5, #2
 8005640:	d836      	bhi.n	80056b0 <_scanf_float+0x31c>
 8005642:	9b01      	ldr	r3, [sp, #4]
 8005644:	429e      	cmp	r6, r3
 8005646:	f67f aee7 	bls.w	8005418 <_scanf_float+0x84>
 800564a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800564e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005652:	464a      	mov	r2, r9
 8005654:	4640      	mov	r0, r8
 8005656:	4798      	blx	r3
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	3b01      	subs	r3, #1
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	e7f0      	b.n	8005642 <_scanf_float+0x2ae>
 8005660:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005664:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005668:	464a      	mov	r2, r9
 800566a:	4640      	mov	r0, r8
 800566c:	4798      	blx	r3
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	3b01      	subs	r3, #1
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005678:	fa5f fa8a 	uxtb.w	sl, sl
 800567c:	f1ba 0f02 	cmp.w	sl, #2
 8005680:	d1ee      	bne.n	8005660 <_scanf_float+0x2cc>
 8005682:	3d03      	subs	r5, #3
 8005684:	b2ed      	uxtb	r5, r5
 8005686:	1b76      	subs	r6, r6, r5
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	05da      	lsls	r2, r3, #23
 800568c:	d530      	bpl.n	80056f0 <_scanf_float+0x35c>
 800568e:	055b      	lsls	r3, r3, #21
 8005690:	d511      	bpl.n	80056b6 <_scanf_float+0x322>
 8005692:	9b01      	ldr	r3, [sp, #4]
 8005694:	429e      	cmp	r6, r3
 8005696:	f67f aebf 	bls.w	8005418 <_scanf_float+0x84>
 800569a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800569e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056a2:	464a      	mov	r2, r9
 80056a4:	4640      	mov	r0, r8
 80056a6:	4798      	blx	r3
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	e7f0      	b.n	8005692 <_scanf_float+0x2fe>
 80056b0:	46aa      	mov	sl, r5
 80056b2:	46b3      	mov	fp, r6
 80056b4:	e7de      	b.n	8005674 <_scanf_float+0x2e0>
 80056b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	2965      	cmp	r1, #101	@ 0x65
 80056be:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80056c2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	d00c      	beq.n	80056e4 <_scanf_float+0x350>
 80056ca:	2945      	cmp	r1, #69	@ 0x45
 80056cc:	d00a      	beq.n	80056e4 <_scanf_float+0x350>
 80056ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056d2:	464a      	mov	r2, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	4798      	blx	r3
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056de:	3b01      	subs	r3, #1
 80056e0:	1eb5      	subs	r5, r6, #2
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056e8:	464a      	mov	r2, r9
 80056ea:	4640      	mov	r0, r8
 80056ec:	4798      	blx	r3
 80056ee:	462e      	mov	r6, r5
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	f012 0210 	ands.w	r2, r2, #16
 80056f6:	d001      	beq.n	80056fc <_scanf_float+0x368>
 80056f8:	2000      	movs	r0, #0
 80056fa:	e68e      	b.n	800541a <_scanf_float+0x86>
 80056fc:	7032      	strb	r2, [r6, #0]
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005708:	d125      	bne.n	8005756 <_scanf_float+0x3c2>
 800570a:	9b02      	ldr	r3, [sp, #8]
 800570c:	429f      	cmp	r7, r3
 800570e:	d00a      	beq.n	8005726 <_scanf_float+0x392>
 8005710:	1bda      	subs	r2, r3, r7
 8005712:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005716:	429e      	cmp	r6, r3
 8005718:	bf28      	it	cs
 800571a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800571e:	4922      	ldr	r1, [pc, #136]	@ (80057a8 <_scanf_float+0x414>)
 8005720:	4630      	mov	r0, r6
 8005722:	f000 f919 	bl	8005958 <siprintf>
 8005726:	9901      	ldr	r1, [sp, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	4640      	mov	r0, r8
 800572c:	f002 fc04 	bl	8007f38 <_strtod_r>
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	6821      	ldr	r1, [r4, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f011 0f02 	tst.w	r1, #2
 800573a:	ec57 6b10 	vmov	r6, r7, d0
 800573e:	f103 0204 	add.w	r2, r3, #4
 8005742:	d015      	beq.n	8005770 <_scanf_float+0x3dc>
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	600a      	str	r2, [r1, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	e9c3 6700 	strd	r6, r7, [r3]
 800574e:	68e3      	ldr	r3, [r4, #12]
 8005750:	3301      	adds	r3, #1
 8005752:	60e3      	str	r3, [r4, #12]
 8005754:	e7d0      	b.n	80056f8 <_scanf_float+0x364>
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0e4      	beq.n	8005726 <_scanf_float+0x392>
 800575c:	9905      	ldr	r1, [sp, #20]
 800575e:	230a      	movs	r3, #10
 8005760:	3101      	adds	r1, #1
 8005762:	4640      	mov	r0, r8
 8005764:	f002 fc68 	bl	8008038 <_strtol_r>
 8005768:	9b04      	ldr	r3, [sp, #16]
 800576a:	9e05      	ldr	r6, [sp, #20]
 800576c:	1ac2      	subs	r2, r0, r3
 800576e:	e7d0      	b.n	8005712 <_scanf_float+0x37e>
 8005770:	f011 0f04 	tst.w	r1, #4
 8005774:	9903      	ldr	r1, [sp, #12]
 8005776:	600a      	str	r2, [r1, #0]
 8005778:	d1e6      	bne.n	8005748 <_scanf_float+0x3b4>
 800577a:	681d      	ldr	r5, [r3, #0]
 800577c:	4632      	mov	r2, r6
 800577e:	463b      	mov	r3, r7
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fb f9d2 	bl	8000b2c <__aeabi_dcmpun>
 8005788:	b128      	cbz	r0, 8005796 <_scanf_float+0x402>
 800578a:	4808      	ldr	r0, [pc, #32]	@ (80057ac <_scanf_float+0x418>)
 800578c:	f000 f9ca 	bl	8005b24 <nanf>
 8005790:	ed85 0a00 	vstr	s0, [r5]
 8005794:	e7db      	b.n	800574e <_scanf_float+0x3ba>
 8005796:	4630      	mov	r0, r6
 8005798:	4639      	mov	r1, r7
 800579a:	f7fb fa25 	bl	8000be8 <__aeabi_d2f>
 800579e:	6028      	str	r0, [r5, #0]
 80057a0:	e7d5      	b.n	800574e <_scanf_float+0x3ba>
 80057a2:	2700      	movs	r7, #0
 80057a4:	e62e      	b.n	8005404 <_scanf_float+0x70>
 80057a6:	bf00      	nop
 80057a8:	08009280 	.word	0x08009280
 80057ac:	080093c1 	.word	0x080093c1

080057b0 <std>:
 80057b0:	2300      	movs	r3, #0
 80057b2:	b510      	push	{r4, lr}
 80057b4:	4604      	mov	r4, r0
 80057b6:	e9c0 3300 	strd	r3, r3, [r0]
 80057ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057be:	6083      	str	r3, [r0, #8]
 80057c0:	8181      	strh	r1, [r0, #12]
 80057c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80057c4:	81c2      	strh	r2, [r0, #14]
 80057c6:	6183      	str	r3, [r0, #24]
 80057c8:	4619      	mov	r1, r3
 80057ca:	2208      	movs	r2, #8
 80057cc:	305c      	adds	r0, #92	@ 0x5c
 80057ce:	f000 f928 	bl	8005a22 <memset>
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x58>)
 80057d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x5c>)
 80057d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <std+0x60>)
 80057dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <std+0x64>)
 80057e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <std+0x68>)
 80057e4:	6224      	str	r4, [r4, #32]
 80057e6:	429c      	cmp	r4, r3
 80057e8:	d006      	beq.n	80057f8 <std+0x48>
 80057ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057ee:	4294      	cmp	r4, r2
 80057f0:	d002      	beq.n	80057f8 <std+0x48>
 80057f2:	33d0      	adds	r3, #208	@ 0xd0
 80057f4:	429c      	cmp	r4, r3
 80057f6:	d105      	bne.n	8005804 <std+0x54>
 80057f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005800:	f000 b98c 	b.w	8005b1c <__retarget_lock_init_recursive>
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	0800599d 	.word	0x0800599d
 800580c:	080059bf 	.word	0x080059bf
 8005810:	080059f7 	.word	0x080059f7
 8005814:	08005a1b 	.word	0x08005a1b
 8005818:	200002f8 	.word	0x200002f8

0800581c <stdio_exit_handler>:
 800581c:	4a02      	ldr	r2, [pc, #8]	@ (8005828 <stdio_exit_handler+0xc>)
 800581e:	4903      	ldr	r1, [pc, #12]	@ (800582c <stdio_exit_handler+0x10>)
 8005820:	4803      	ldr	r0, [pc, #12]	@ (8005830 <stdio_exit_handler+0x14>)
 8005822:	f000 b869 	b.w	80058f8 <_fwalk_sglue>
 8005826:	bf00      	nop
 8005828:	2000000c 	.word	0x2000000c
 800582c:	08008679 	.word	0x08008679
 8005830:	2000001c 	.word	0x2000001c

08005834 <cleanup_stdio>:
 8005834:	6841      	ldr	r1, [r0, #4]
 8005836:	4b0c      	ldr	r3, [pc, #48]	@ (8005868 <cleanup_stdio+0x34>)
 8005838:	4299      	cmp	r1, r3
 800583a:	b510      	push	{r4, lr}
 800583c:	4604      	mov	r4, r0
 800583e:	d001      	beq.n	8005844 <cleanup_stdio+0x10>
 8005840:	f002 ff1a 	bl	8008678 <_fflush_r>
 8005844:	68a1      	ldr	r1, [r4, #8]
 8005846:	4b09      	ldr	r3, [pc, #36]	@ (800586c <cleanup_stdio+0x38>)
 8005848:	4299      	cmp	r1, r3
 800584a:	d002      	beq.n	8005852 <cleanup_stdio+0x1e>
 800584c:	4620      	mov	r0, r4
 800584e:	f002 ff13 	bl	8008678 <_fflush_r>
 8005852:	68e1      	ldr	r1, [r4, #12]
 8005854:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <cleanup_stdio+0x3c>)
 8005856:	4299      	cmp	r1, r3
 8005858:	d004      	beq.n	8005864 <cleanup_stdio+0x30>
 800585a:	4620      	mov	r0, r4
 800585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005860:	f002 bf0a 	b.w	8008678 <_fflush_r>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	200002f8 	.word	0x200002f8
 800586c:	20000360 	.word	0x20000360
 8005870:	200003c8 	.word	0x200003c8

08005874 <global_stdio_init.part.0>:
 8005874:	b510      	push	{r4, lr}
 8005876:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <global_stdio_init.part.0+0x30>)
 8005878:	4c0b      	ldr	r4, [pc, #44]	@ (80058a8 <global_stdio_init.part.0+0x34>)
 800587a:	4a0c      	ldr	r2, [pc, #48]	@ (80058ac <global_stdio_init.part.0+0x38>)
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	4620      	mov	r0, r4
 8005880:	2200      	movs	r2, #0
 8005882:	2104      	movs	r1, #4
 8005884:	f7ff ff94 	bl	80057b0 <std>
 8005888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800588c:	2201      	movs	r2, #1
 800588e:	2109      	movs	r1, #9
 8005890:	f7ff ff8e 	bl	80057b0 <std>
 8005894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005898:	2202      	movs	r2, #2
 800589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589e:	2112      	movs	r1, #18
 80058a0:	f7ff bf86 	b.w	80057b0 <std>
 80058a4:	20000430 	.word	0x20000430
 80058a8:	200002f8 	.word	0x200002f8
 80058ac:	0800581d 	.word	0x0800581d

080058b0 <__sfp_lock_acquire>:
 80058b0:	4801      	ldr	r0, [pc, #4]	@ (80058b8 <__sfp_lock_acquire+0x8>)
 80058b2:	f000 b934 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	20000439 	.word	0x20000439

080058bc <__sfp_lock_release>:
 80058bc:	4801      	ldr	r0, [pc, #4]	@ (80058c4 <__sfp_lock_release+0x8>)
 80058be:	f000 b92f 	b.w	8005b20 <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	20000439 	.word	0x20000439

080058c8 <__sinit>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	4604      	mov	r4, r0
 80058cc:	f7ff fff0 	bl	80058b0 <__sfp_lock_acquire>
 80058d0:	6a23      	ldr	r3, [r4, #32]
 80058d2:	b11b      	cbz	r3, 80058dc <__sinit+0x14>
 80058d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d8:	f7ff bff0 	b.w	80058bc <__sfp_lock_release>
 80058dc:	4b04      	ldr	r3, [pc, #16]	@ (80058f0 <__sinit+0x28>)
 80058de:	6223      	str	r3, [r4, #32]
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <__sinit+0x2c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f5      	bne.n	80058d4 <__sinit+0xc>
 80058e8:	f7ff ffc4 	bl	8005874 <global_stdio_init.part.0>
 80058ec:	e7f2      	b.n	80058d4 <__sinit+0xc>
 80058ee:	bf00      	nop
 80058f0:	08005835 	.word	0x08005835
 80058f4:	20000430 	.word	0x20000430

080058f8 <_fwalk_sglue>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4607      	mov	r7, r0
 80058fe:	4688      	mov	r8, r1
 8005900:	4614      	mov	r4, r2
 8005902:	2600      	movs	r6, #0
 8005904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005908:	f1b9 0901 	subs.w	r9, r9, #1
 800590c:	d505      	bpl.n	800591a <_fwalk_sglue+0x22>
 800590e:	6824      	ldr	r4, [r4, #0]
 8005910:	2c00      	cmp	r4, #0
 8005912:	d1f7      	bne.n	8005904 <_fwalk_sglue+0xc>
 8005914:	4630      	mov	r0, r6
 8005916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d907      	bls.n	8005930 <_fwalk_sglue+0x38>
 8005920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005924:	3301      	adds	r3, #1
 8005926:	d003      	beq.n	8005930 <_fwalk_sglue+0x38>
 8005928:	4629      	mov	r1, r5
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	4306      	orrs	r6, r0
 8005930:	3568      	adds	r5, #104	@ 0x68
 8005932:	e7e9      	b.n	8005908 <_fwalk_sglue+0x10>

08005934 <iprintf>:
 8005934:	b40f      	push	{r0, r1, r2, r3}
 8005936:	b507      	push	{r0, r1, r2, lr}
 8005938:	4906      	ldr	r1, [pc, #24]	@ (8005954 <iprintf+0x20>)
 800593a:	ab04      	add	r3, sp, #16
 800593c:	6808      	ldr	r0, [r1, #0]
 800593e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005942:	6881      	ldr	r1, [r0, #8]
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	f002 fcfb 	bl	8008340 <_vfiprintf_r>
 800594a:	b003      	add	sp, #12
 800594c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005950:	b004      	add	sp, #16
 8005952:	4770      	bx	lr
 8005954:	20000018 	.word	0x20000018

08005958 <siprintf>:
 8005958:	b40e      	push	{r1, r2, r3}
 800595a:	b510      	push	{r4, lr}
 800595c:	b09d      	sub	sp, #116	@ 0x74
 800595e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005960:	9002      	str	r0, [sp, #8]
 8005962:	9006      	str	r0, [sp, #24]
 8005964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005968:	480a      	ldr	r0, [pc, #40]	@ (8005994 <siprintf+0x3c>)
 800596a:	9107      	str	r1, [sp, #28]
 800596c:	9104      	str	r1, [sp, #16]
 800596e:	490a      	ldr	r1, [pc, #40]	@ (8005998 <siprintf+0x40>)
 8005970:	f853 2b04 	ldr.w	r2, [r3], #4
 8005974:	9105      	str	r1, [sp, #20]
 8005976:	2400      	movs	r4, #0
 8005978:	a902      	add	r1, sp, #8
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005980:	f002 fbb8 	bl	80080f4 <_svfiprintf_r>
 8005984:	9b02      	ldr	r3, [sp, #8]
 8005986:	701c      	strb	r4, [r3, #0]
 8005988:	b01d      	add	sp, #116	@ 0x74
 800598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598e:	b003      	add	sp, #12
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000018 	.word	0x20000018
 8005998:	ffff0208 	.word	0xffff0208

0800599c <__sread>:
 800599c:	b510      	push	{r4, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	f000 f86c 	bl	8005a80 <_read_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bfab      	itete	ge
 80059ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ae:	89a3      	ldrhlt	r3, [r4, #12]
 80059b0:	181b      	addge	r3, r3, r0
 80059b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059b6:	bfac      	ite	ge
 80059b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ba:	81a3      	strhlt	r3, [r4, #12]
 80059bc:	bd10      	pop	{r4, pc}

080059be <__swrite>:
 80059be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	461f      	mov	r7, r3
 80059c4:	898b      	ldrh	r3, [r1, #12]
 80059c6:	05db      	lsls	r3, r3, #23
 80059c8:	4605      	mov	r5, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	4616      	mov	r6, r2
 80059ce:	d505      	bpl.n	80059dc <__swrite+0x1e>
 80059d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d4:	2302      	movs	r3, #2
 80059d6:	2200      	movs	r2, #0
 80059d8:	f000 f840 	bl	8005a5c <_lseek_r>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	4632      	mov	r2, r6
 80059ea:	463b      	mov	r3, r7
 80059ec:	4628      	mov	r0, r5
 80059ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	f000 b857 	b.w	8005aa4 <_write_r>

080059f6 <__sseek>:
 80059f6:	b510      	push	{r4, lr}
 80059f8:	460c      	mov	r4, r1
 80059fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fe:	f000 f82d 	bl	8005a5c <_lseek_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	bf15      	itete	ne
 8005a08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a12:	81a3      	strheq	r3, [r4, #12]
 8005a14:	bf18      	it	ne
 8005a16:	81a3      	strhne	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__sclose>:
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 b80d 	b.w	8005a3c <_close_r>

08005a22 <memset>:
 8005a22:	4402      	add	r2, r0
 8005a24:	4603      	mov	r3, r0
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d100      	bne.n	8005a2c <memset+0xa>
 8005a2a:	4770      	bx	lr
 8005a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a30:	e7f9      	b.n	8005a26 <memset+0x4>
	...

08005a34 <_localeconv_r>:
 8005a34:	4800      	ldr	r0, [pc, #0]	@ (8005a38 <_localeconv_r+0x4>)
 8005a36:	4770      	bx	lr
 8005a38:	20000158 	.word	0x20000158

08005a3c <_close_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	@ (8005a58 <_close_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb fef9 	bl	800183e <_close>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_close_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_close_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000434 	.word	0x20000434

08005a5c <_lseek_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d07      	ldr	r5, [pc, #28]	@ (8005a7c <_lseek_r+0x20>)
 8005a60:	4604      	mov	r4, r0
 8005a62:	4608      	mov	r0, r1
 8005a64:	4611      	mov	r1, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f7fb ff0e 	bl	800188c <_lseek>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_lseek_r+0x1e>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_lseek_r+0x1e>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20000434 	.word	0x20000434

08005a80 <_read_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	@ (8005aa0 <_read_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fb fe9c 	bl	80017cc <_read>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_read_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_read_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20000434 	.word	0x20000434

08005aa4 <_write_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	@ (8005ac4 <_write_r+0x20>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fb fea7 	bl	8001806 <_write>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_write_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_write_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000434 	.word	0x20000434

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	@ (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000018 	.word	0x20000018

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f003 fb78 	bl	80091dc <_init>
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2600      	movs	r6, #0
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	0800967c 	.word	0x0800967c
 8005b10:	0800967c 	.word	0x0800967c
 8005b14:	0800967c 	.word	0x0800967c
 8005b18:	08009680 	.word	0x08009680

08005b1c <__retarget_lock_init_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <__retarget_lock_acquire_recursive>:
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_release_recursive>:
 8005b20:	4770      	bx	lr
	...

08005b24 <nanf>:
 8005b24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005b2c <nanf+0x8>
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	7fc00000 	.word	0x7fc00000

08005b30 <quorem>:
 8005b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	6903      	ldr	r3, [r0, #16]
 8005b36:	690c      	ldr	r4, [r1, #16]
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	4607      	mov	r7, r0
 8005b3c:	db7e      	blt.n	8005c3c <quorem+0x10c>
 8005b3e:	3c01      	subs	r4, #1
 8005b40:	f101 0814 	add.w	r8, r1, #20
 8005b44:	00a3      	lsls	r3, r4, #2
 8005b46:	f100 0514 	add.w	r5, r0, #20
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b62:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b66:	d32e      	bcc.n	8005bc6 <quorem+0x96>
 8005b68:	f04f 0a00 	mov.w	sl, #0
 8005b6c:	46c4      	mov	ip, r8
 8005b6e:	46ae      	mov	lr, r5
 8005b70:	46d3      	mov	fp, sl
 8005b72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b76:	b298      	uxth	r0, r3
 8005b78:	fb06 a000 	mla	r0, r6, r0, sl
 8005b7c:	0c02      	lsrs	r2, r0, #16
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	fb06 2303 	mla	r3, r6, r3, r2
 8005b84:	f8de 2000 	ldr.w	r2, [lr]
 8005b88:	b280      	uxth	r0, r0
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	1a12      	subs	r2, r2, r0
 8005b8e:	445a      	add	r2, fp
 8005b90:	f8de 0000 	ldr.w	r0, [lr]
 8005b94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ba2:	b292      	uxth	r2, r2
 8005ba4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ba8:	45e1      	cmp	r9, ip
 8005baa:	f84e 2b04 	str.w	r2, [lr], #4
 8005bae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bb2:	d2de      	bcs.n	8005b72 <quorem+0x42>
 8005bb4:	9b00      	ldr	r3, [sp, #0]
 8005bb6:	58eb      	ldr	r3, [r5, r3]
 8005bb8:	b92b      	cbnz	r3, 8005bc6 <quorem+0x96>
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	3b04      	subs	r3, #4
 8005bbe:	429d      	cmp	r5, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	d32f      	bcc.n	8005c24 <quorem+0xf4>
 8005bc4:	613c      	str	r4, [r7, #16]
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f001 f9c6 	bl	8006f58 <__mcmp>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	db25      	blt.n	8005c1c <quorem+0xec>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bd8:	f8d1 c000 	ldr.w	ip, [r1]
 8005bdc:	fa1f fe82 	uxth.w	lr, r2
 8005be0:	fa1f f38c 	uxth.w	r3, ip
 8005be4:	eba3 030e 	sub.w	r3, r3, lr
 8005be8:	4403      	add	r3, r0
 8005bea:	0c12      	lsrs	r2, r2, #16
 8005bec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bf0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bfa:	45c1      	cmp	r9, r8
 8005bfc:	f841 3b04 	str.w	r3, [r1], #4
 8005c00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c04:	d2e6      	bcs.n	8005bd4 <quorem+0xa4>
 8005c06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c0e:	b922      	cbnz	r2, 8005c1a <quorem+0xea>
 8005c10:	3b04      	subs	r3, #4
 8005c12:	429d      	cmp	r5, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	d30b      	bcc.n	8005c30 <quorem+0x100>
 8005c18:	613c      	str	r4, [r7, #16]
 8005c1a:	3601      	adds	r6, #1
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	b003      	add	sp, #12
 8005c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	3b04      	subs	r3, #4
 8005c28:	2a00      	cmp	r2, #0
 8005c2a:	d1cb      	bne.n	8005bc4 <quorem+0x94>
 8005c2c:	3c01      	subs	r4, #1
 8005c2e:	e7c6      	b.n	8005bbe <quorem+0x8e>
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	3b04      	subs	r3, #4
 8005c34:	2a00      	cmp	r2, #0
 8005c36:	d1ef      	bne.n	8005c18 <quorem+0xe8>
 8005c38:	3c01      	subs	r4, #1
 8005c3a:	e7ea      	b.n	8005c12 <quorem+0xe2>
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	e7ee      	b.n	8005c1e <quorem+0xee>

08005c40 <_dtoa_r>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	69c7      	ldr	r7, [r0, #28]
 8005c46:	b097      	sub	sp, #92	@ 0x5c
 8005c48:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c4c:	ec55 4b10 	vmov	r4, r5, d0
 8005c50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005c52:	9107      	str	r1, [sp, #28]
 8005c54:	4681      	mov	r9, r0
 8005c56:	920c      	str	r2, [sp, #48]	@ 0x30
 8005c58:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c5a:	b97f      	cbnz	r7, 8005c7c <_dtoa_r+0x3c>
 8005c5c:	2010      	movs	r0, #16
 8005c5e:	f000 fe09 	bl	8006874 <malloc>
 8005c62:	4602      	mov	r2, r0
 8005c64:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c68:	b920      	cbnz	r0, 8005c74 <_dtoa_r+0x34>
 8005c6a:	4ba9      	ldr	r3, [pc, #676]	@ (8005f10 <_dtoa_r+0x2d0>)
 8005c6c:	21ef      	movs	r1, #239	@ 0xef
 8005c6e:	48a9      	ldr	r0, [pc, #676]	@ (8005f14 <_dtoa_r+0x2d4>)
 8005c70:	f002 fe12 	bl	8008898 <__assert_func>
 8005c74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c78:	6007      	str	r7, [r0, #0]
 8005c7a:	60c7      	str	r7, [r0, #12]
 8005c7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c80:	6819      	ldr	r1, [r3, #0]
 8005c82:	b159      	cbz	r1, 8005c9c <_dtoa_r+0x5c>
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	604a      	str	r2, [r1, #4]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4093      	lsls	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
 8005c8e:	4648      	mov	r0, r9
 8005c90:	f000 fee6 	bl	8006a60 <_Bfree>
 8005c94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	1e2b      	subs	r3, r5, #0
 8005c9e:	bfb9      	ittee	lt
 8005ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ca4:	9305      	strlt	r3, [sp, #20]
 8005ca6:	2300      	movge	r3, #0
 8005ca8:	6033      	strge	r3, [r6, #0]
 8005caa:	9f05      	ldr	r7, [sp, #20]
 8005cac:	4b9a      	ldr	r3, [pc, #616]	@ (8005f18 <_dtoa_r+0x2d8>)
 8005cae:	bfbc      	itt	lt
 8005cb0:	2201      	movlt	r2, #1
 8005cb2:	6032      	strlt	r2, [r6, #0]
 8005cb4:	43bb      	bics	r3, r7
 8005cb6:	d112      	bne.n	8005cde <_dtoa_r+0x9e>
 8005cb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005cba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cc4:	4323      	orrs	r3, r4
 8005cc6:	f000 855a 	beq.w	800677e <_dtoa_r+0xb3e>
 8005cca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ccc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005f2c <_dtoa_r+0x2ec>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 855c 	beq.w	800678e <_dtoa_r+0xb4e>
 8005cd6:	f10a 0303 	add.w	r3, sl, #3
 8005cda:	f000 bd56 	b.w	800678a <_dtoa_r+0xb4a>
 8005cde:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	ec51 0b17 	vmov	r0, r1, d7
 8005ce8:	2300      	movs	r3, #0
 8005cea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005cee:	f7fa feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	b158      	cbz	r0, 8005d0e <_dtoa_r+0xce>
 8005cf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cfe:	b113      	cbz	r3, 8005d06 <_dtoa_r+0xc6>
 8005d00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005d02:	4b86      	ldr	r3, [pc, #536]	@ (8005f1c <_dtoa_r+0x2dc>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005f30 <_dtoa_r+0x2f0>
 8005d0a:	f000 bd40 	b.w	800678e <_dtoa_r+0xb4e>
 8005d0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005d12:	aa14      	add	r2, sp, #80	@ 0x50
 8005d14:	a915      	add	r1, sp, #84	@ 0x54
 8005d16:	4648      	mov	r0, r9
 8005d18:	f001 fa3e 	bl	8007198 <__d2b>
 8005d1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d20:	9002      	str	r0, [sp, #8]
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	d078      	beq.n	8005e18 <_dtoa_r+0x1d8>
 8005d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d28:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d40:	4619      	mov	r1, r3
 8005d42:	2200      	movs	r2, #0
 8005d44:	4b76      	ldr	r3, [pc, #472]	@ (8005f20 <_dtoa_r+0x2e0>)
 8005d46:	f7fa fa9f 	bl	8000288 <__aeabi_dsub>
 8005d4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005ef8 <_dtoa_r+0x2b8>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fc52 	bl	80005f8 <__aeabi_dmul>
 8005d54:	a36a      	add	r3, pc, #424	@ (adr r3, 8005f00 <_dtoa_r+0x2c0>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa fa97 	bl	800028c <__adddf3>
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4630      	mov	r0, r6
 8005d62:	460d      	mov	r5, r1
 8005d64:	f7fa fbde 	bl	8000524 <__aeabi_i2d>
 8005d68:	a367      	add	r3, pc, #412	@ (adr r3, 8005f08 <_dtoa_r+0x2c8>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fc43 	bl	80005f8 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fa87 	bl	800028c <__adddf3>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	f7fa fee9 	bl	8000b58 <__aeabi_d2iz>
 8005d86:	2200      	movs	r2, #0
 8005d88:	4607      	mov	r7, r0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fea4 	bl	8000adc <__aeabi_dcmplt>
 8005d94:	b140      	cbz	r0, 8005da8 <_dtoa_r+0x168>
 8005d96:	4638      	mov	r0, r7
 8005d98:	f7fa fbc4 	bl	8000524 <__aeabi_i2d>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	462b      	mov	r3, r5
 8005da0:	f7fa fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da4:	b900      	cbnz	r0, 8005da8 <_dtoa_r+0x168>
 8005da6:	3f01      	subs	r7, #1
 8005da8:	2f16      	cmp	r7, #22
 8005daa:	d852      	bhi.n	8005e52 <_dtoa_r+0x212>
 8005dac:	4b5d      	ldr	r3, [pc, #372]	@ (8005f24 <_dtoa_r+0x2e4>)
 8005dae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005dba:	f7fa fe8f 	bl	8000adc <__aeabi_dcmplt>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d049      	beq.n	8005e56 <_dtoa_r+0x216>
 8005dc2:	3f01      	subs	r7, #1
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005dc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005dca:	1b9b      	subs	r3, r3, r6
 8005dcc:	1e5a      	subs	r2, r3, #1
 8005dce:	bf45      	ittet	mi
 8005dd0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005dd4:	9300      	strmi	r3, [sp, #0]
 8005dd6:	2300      	movpl	r3, #0
 8005dd8:	2300      	movmi	r3, #0
 8005dda:	9206      	str	r2, [sp, #24]
 8005ddc:	bf54      	ite	pl
 8005dde:	9300      	strpl	r3, [sp, #0]
 8005de0:	9306      	strmi	r3, [sp, #24]
 8005de2:	2f00      	cmp	r7, #0
 8005de4:	db39      	blt.n	8005e5a <_dtoa_r+0x21a>
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	970d      	str	r7, [sp, #52]	@ 0x34
 8005dea:	443b      	add	r3, r7
 8005dec:	9306      	str	r3, [sp, #24]
 8005dee:	2300      	movs	r3, #0
 8005df0:	9308      	str	r3, [sp, #32]
 8005df2:	9b07      	ldr	r3, [sp, #28]
 8005df4:	2b09      	cmp	r3, #9
 8005df6:	d863      	bhi.n	8005ec0 <_dtoa_r+0x280>
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	bfc4      	itt	gt
 8005dfc:	3b04      	subgt	r3, #4
 8005dfe:	9307      	strgt	r3, [sp, #28]
 8005e00:	9b07      	ldr	r3, [sp, #28]
 8005e02:	f1a3 0302 	sub.w	r3, r3, #2
 8005e06:	bfcc      	ite	gt
 8005e08:	2400      	movgt	r4, #0
 8005e0a:	2401      	movle	r4, #1
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d863      	bhi.n	8005ed8 <_dtoa_r+0x298>
 8005e10:	e8df f003 	tbb	[pc, r3]
 8005e14:	2b375452 	.word	0x2b375452
 8005e18:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e1c:	441e      	add	r6, r3
 8005e1e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	bfc1      	itttt	gt
 8005e26:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e2a:	409f      	lslgt	r7, r3
 8005e2c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e30:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e34:	bfd6      	itet	le
 8005e36:	f1c3 0320 	rsble	r3, r3, #32
 8005e3a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e3e:	fa04 f003 	lslle.w	r0, r4, r3
 8005e42:	f7fa fb5f 	bl	8000504 <__aeabi_ui2d>
 8005e46:	2201      	movs	r2, #1
 8005e48:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e4c:	3e01      	subs	r6, #1
 8005e4e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e50:	e776      	b.n	8005d40 <_dtoa_r+0x100>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e7b7      	b.n	8005dc6 <_dtoa_r+0x186>
 8005e56:	9010      	str	r0, [sp, #64]	@ 0x40
 8005e58:	e7b6      	b.n	8005dc8 <_dtoa_r+0x188>
 8005e5a:	9b00      	ldr	r3, [sp, #0]
 8005e5c:	1bdb      	subs	r3, r3, r7
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	427b      	negs	r3, r7
 8005e62:	9308      	str	r3, [sp, #32]
 8005e64:	2300      	movs	r3, #0
 8005e66:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e68:	e7c3      	b.n	8005df2 <_dtoa_r+0x1b2>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e70:	eb07 0b03 	add.w	fp, r7, r3
 8005e74:	f10b 0301 	add.w	r3, fp, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	bfb8      	it	lt
 8005e7e:	2301      	movlt	r3, #1
 8005e80:	e006      	b.n	8005e90 <_dtoa_r+0x250>
 8005e82:	2301      	movs	r3, #1
 8005e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dd28      	ble.n	8005ede <_dtoa_r+0x29e>
 8005e8c:	469b      	mov	fp, r3
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005e94:	2100      	movs	r1, #0
 8005e96:	2204      	movs	r2, #4
 8005e98:	f102 0514 	add.w	r5, r2, #20
 8005e9c:	429d      	cmp	r5, r3
 8005e9e:	d926      	bls.n	8005eee <_dtoa_r+0x2ae>
 8005ea0:	6041      	str	r1, [r0, #4]
 8005ea2:	4648      	mov	r0, r9
 8005ea4:	f000 fd9c 	bl	80069e0 <_Balloc>
 8005ea8:	4682      	mov	sl, r0
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d142      	bne.n	8005f34 <_dtoa_r+0x2f4>
 8005eae:	4b1e      	ldr	r3, [pc, #120]	@ (8005f28 <_dtoa_r+0x2e8>)
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eb6:	e6da      	b.n	8005c6e <_dtoa_r+0x2e>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e7e3      	b.n	8005e84 <_dtoa_r+0x244>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e7d5      	b.n	8005e6c <_dtoa_r+0x22c>
 8005ec0:	2401      	movs	r4, #1
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	9409      	str	r4, [sp, #36]	@ 0x24
 8005ec8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ed2:	2312      	movs	r3, #18
 8005ed4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ed6:	e7db      	b.n	8005e90 <_dtoa_r+0x250>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005edc:	e7f4      	b.n	8005ec8 <_dtoa_r+0x288>
 8005ede:	f04f 0b01 	mov.w	fp, #1
 8005ee2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ee6:	465b      	mov	r3, fp
 8005ee8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005eec:	e7d0      	b.n	8005e90 <_dtoa_r+0x250>
 8005eee:	3101      	adds	r1, #1
 8005ef0:	0052      	lsls	r2, r2, #1
 8005ef2:	e7d1      	b.n	8005e98 <_dtoa_r+0x258>
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	636f4361 	.word	0x636f4361
 8005efc:	3fd287a7 	.word	0x3fd287a7
 8005f00:	8b60c8b3 	.word	0x8b60c8b3
 8005f04:	3fc68a28 	.word	0x3fc68a28
 8005f08:	509f79fb 	.word	0x509f79fb
 8005f0c:	3fd34413 	.word	0x3fd34413
 8005f10:	08009292 	.word	0x08009292
 8005f14:	080092a9 	.word	0x080092a9
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	0800925d 	.word	0x0800925d
 8005f20:	3ff80000 	.word	0x3ff80000
 8005f24:	08009458 	.word	0x08009458
 8005f28:	08009301 	.word	0x08009301
 8005f2c:	0800928e 	.word	0x0800928e
 8005f30:	0800925c 	.word	0x0800925c
 8005f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f38:	6018      	str	r0, [r3, #0]
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	2b0e      	cmp	r3, #14
 8005f3e:	f200 80a1 	bhi.w	8006084 <_dtoa_r+0x444>
 8005f42:	2c00      	cmp	r4, #0
 8005f44:	f000 809e 	beq.w	8006084 <_dtoa_r+0x444>
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	dd33      	ble.n	8005fb4 <_dtoa_r+0x374>
 8005f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80061c0 <_dtoa_r+0x580>)
 8005f4e:	f007 020f 	and.w	r2, r7, #15
 8005f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f56:	ed93 7b00 	vldr	d7, [r3]
 8005f5a:	05f8      	lsls	r0, r7, #23
 8005f5c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005f60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f64:	d516      	bpl.n	8005f94 <_dtoa_r+0x354>
 8005f66:	4b97      	ldr	r3, [pc, #604]	@ (80061c4 <_dtoa_r+0x584>)
 8005f68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f70:	f7fa fc6c 	bl	800084c <__aeabi_ddiv>
 8005f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f78:	f004 040f 	and.w	r4, r4, #15
 8005f7c:	2603      	movs	r6, #3
 8005f7e:	4d91      	ldr	r5, [pc, #580]	@ (80061c4 <_dtoa_r+0x584>)
 8005f80:	b954      	cbnz	r4, 8005f98 <_dtoa_r+0x358>
 8005f82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f8a:	f7fa fc5f 	bl	800084c <__aeabi_ddiv>
 8005f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f92:	e028      	b.n	8005fe6 <_dtoa_r+0x3a6>
 8005f94:	2602      	movs	r6, #2
 8005f96:	e7f2      	b.n	8005f7e <_dtoa_r+0x33e>
 8005f98:	07e1      	lsls	r1, r4, #31
 8005f9a:	d508      	bpl.n	8005fae <_dtoa_r+0x36e>
 8005f9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fa4:	f7fa fb28 	bl	80005f8 <__aeabi_dmul>
 8005fa8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fac:	3601      	adds	r6, #1
 8005fae:	1064      	asrs	r4, r4, #1
 8005fb0:	3508      	adds	r5, #8
 8005fb2:	e7e5      	b.n	8005f80 <_dtoa_r+0x340>
 8005fb4:	f000 80af 	beq.w	8006116 <_dtoa_r+0x4d6>
 8005fb8:	427c      	negs	r4, r7
 8005fba:	4b81      	ldr	r3, [pc, #516]	@ (80061c0 <_dtoa_r+0x580>)
 8005fbc:	4d81      	ldr	r5, [pc, #516]	@ (80061c4 <_dtoa_r+0x584>)
 8005fbe:	f004 020f 	and.w	r2, r4, #15
 8005fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fce:	f7fa fb13 	bl	80005f8 <__aeabi_dmul>
 8005fd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd6:	1124      	asrs	r4, r4, #4
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2602      	movs	r6, #2
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	f040 808f 	bne.w	8006100 <_dtoa_r+0x4c0>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d3      	bne.n	8005f8e <_dtoa_r+0x34e>
 8005fe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fe8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8094 	beq.w	800611a <_dtoa_r+0x4da>
 8005ff2:	4b75      	ldr	r3, [pc, #468]	@ (80061c8 <_dtoa_r+0x588>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7fa fd6f 	bl	8000adc <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f000 808b 	beq.w	800611a <_dtoa_r+0x4da>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8087 	beq.w	800611a <_dtoa_r+0x4da>
 800600c:	f1bb 0f00 	cmp.w	fp, #0
 8006010:	dd34      	ble.n	800607c <_dtoa_r+0x43c>
 8006012:	4620      	mov	r0, r4
 8006014:	4b6d      	ldr	r3, [pc, #436]	@ (80061cc <_dtoa_r+0x58c>)
 8006016:	2200      	movs	r2, #0
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa faed 	bl	80005f8 <__aeabi_dmul>
 800601e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006022:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006026:	3601      	adds	r6, #1
 8006028:	465c      	mov	r4, fp
 800602a:	4630      	mov	r0, r6
 800602c:	f7fa fa7a 	bl	8000524 <__aeabi_i2d>
 8006030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006034:	f7fa fae0 	bl	80005f8 <__aeabi_dmul>
 8006038:	4b65      	ldr	r3, [pc, #404]	@ (80061d0 <_dtoa_r+0x590>)
 800603a:	2200      	movs	r2, #0
 800603c:	f7fa f926 	bl	800028c <__adddf3>
 8006040:	4605      	mov	r5, r0
 8006042:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006046:	2c00      	cmp	r4, #0
 8006048:	d16a      	bne.n	8006120 <_dtoa_r+0x4e0>
 800604a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800604e:	4b61      	ldr	r3, [pc, #388]	@ (80061d4 <_dtoa_r+0x594>)
 8006050:	2200      	movs	r2, #0
 8006052:	f7fa f919 	bl	8000288 <__aeabi_dsub>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800605e:	462a      	mov	r2, r5
 8006060:	4633      	mov	r3, r6
 8006062:	f7fa fd59 	bl	8000b18 <__aeabi_dcmpgt>
 8006066:	2800      	cmp	r0, #0
 8006068:	f040 8298 	bne.w	800659c <_dtoa_r+0x95c>
 800606c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006070:	462a      	mov	r2, r5
 8006072:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006076:	f7fa fd31 	bl	8000adc <__aeabi_dcmplt>
 800607a:	bb38      	cbnz	r0, 80060cc <_dtoa_r+0x48c>
 800607c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006080:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006084:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006086:	2b00      	cmp	r3, #0
 8006088:	f2c0 8157 	blt.w	800633a <_dtoa_r+0x6fa>
 800608c:	2f0e      	cmp	r7, #14
 800608e:	f300 8154 	bgt.w	800633a <_dtoa_r+0x6fa>
 8006092:	4b4b      	ldr	r3, [pc, #300]	@ (80061c0 <_dtoa_r+0x580>)
 8006094:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006098:	ed93 7b00 	vldr	d7, [r3]
 800609c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800609e:	2b00      	cmp	r3, #0
 80060a0:	ed8d 7b00 	vstr	d7, [sp]
 80060a4:	f280 80e5 	bge.w	8006272 <_dtoa_r+0x632>
 80060a8:	9b03      	ldr	r3, [sp, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f300 80e1 	bgt.w	8006272 <_dtoa_r+0x632>
 80060b0:	d10c      	bne.n	80060cc <_dtoa_r+0x48c>
 80060b2:	4b48      	ldr	r3, [pc, #288]	@ (80061d4 <_dtoa_r+0x594>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	ec51 0b17 	vmov	r0, r1, d7
 80060ba:	f7fa fa9d 	bl	80005f8 <__aeabi_dmul>
 80060be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c2:	f7fa fd1f 	bl	8000b04 <__aeabi_dcmpge>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f000 8266 	beq.w	8006598 <_dtoa_r+0x958>
 80060cc:	2400      	movs	r4, #0
 80060ce:	4625      	mov	r5, r4
 80060d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060d2:	4656      	mov	r6, sl
 80060d4:	ea6f 0803 	mvn.w	r8, r3
 80060d8:	2700      	movs	r7, #0
 80060da:	4621      	mov	r1, r4
 80060dc:	4648      	mov	r0, r9
 80060de:	f000 fcbf 	bl	8006a60 <_Bfree>
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	f000 80bd 	beq.w	8006262 <_dtoa_r+0x622>
 80060e8:	b12f      	cbz	r7, 80060f6 <_dtoa_r+0x4b6>
 80060ea:	42af      	cmp	r7, r5
 80060ec:	d003      	beq.n	80060f6 <_dtoa_r+0x4b6>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4648      	mov	r0, r9
 80060f2:	f000 fcb5 	bl	8006a60 <_Bfree>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4648      	mov	r0, r9
 80060fa:	f000 fcb1 	bl	8006a60 <_Bfree>
 80060fe:	e0b0      	b.n	8006262 <_dtoa_r+0x622>
 8006100:	07e2      	lsls	r2, r4, #31
 8006102:	d505      	bpl.n	8006110 <_dtoa_r+0x4d0>
 8006104:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006108:	f7fa fa76 	bl	80005f8 <__aeabi_dmul>
 800610c:	3601      	adds	r6, #1
 800610e:	2301      	movs	r3, #1
 8006110:	1064      	asrs	r4, r4, #1
 8006112:	3508      	adds	r5, #8
 8006114:	e762      	b.n	8005fdc <_dtoa_r+0x39c>
 8006116:	2602      	movs	r6, #2
 8006118:	e765      	b.n	8005fe6 <_dtoa_r+0x3a6>
 800611a:	9c03      	ldr	r4, [sp, #12]
 800611c:	46b8      	mov	r8, r7
 800611e:	e784      	b.n	800602a <_dtoa_r+0x3ea>
 8006120:	4b27      	ldr	r3, [pc, #156]	@ (80061c0 <_dtoa_r+0x580>)
 8006122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800612c:	4454      	add	r4, sl
 800612e:	2900      	cmp	r1, #0
 8006130:	d054      	beq.n	80061dc <_dtoa_r+0x59c>
 8006132:	4929      	ldr	r1, [pc, #164]	@ (80061d8 <_dtoa_r+0x598>)
 8006134:	2000      	movs	r0, #0
 8006136:	f7fa fb89 	bl	800084c <__aeabi_ddiv>
 800613a:	4633      	mov	r3, r6
 800613c:	462a      	mov	r2, r5
 800613e:	f7fa f8a3 	bl	8000288 <__aeabi_dsub>
 8006142:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006146:	4656      	mov	r6, sl
 8006148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800614c:	f7fa fd04 	bl	8000b58 <__aeabi_d2iz>
 8006150:	4605      	mov	r5, r0
 8006152:	f7fa f9e7 	bl	8000524 <__aeabi_i2d>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800615e:	f7fa f893 	bl	8000288 <__aeabi_dsub>
 8006162:	3530      	adds	r5, #48	@ 0x30
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800616c:	f806 5b01 	strb.w	r5, [r6], #1
 8006170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006174:	f7fa fcb2 	bl	8000adc <__aeabi_dcmplt>
 8006178:	2800      	cmp	r0, #0
 800617a:	d172      	bne.n	8006262 <_dtoa_r+0x622>
 800617c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006180:	4911      	ldr	r1, [pc, #68]	@ (80061c8 <_dtoa_r+0x588>)
 8006182:	2000      	movs	r0, #0
 8006184:	f7fa f880 	bl	8000288 <__aeabi_dsub>
 8006188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800618c:	f7fa fca6 	bl	8000adc <__aeabi_dcmplt>
 8006190:	2800      	cmp	r0, #0
 8006192:	f040 80b4 	bne.w	80062fe <_dtoa_r+0x6be>
 8006196:	42a6      	cmp	r6, r4
 8006198:	f43f af70 	beq.w	800607c <_dtoa_r+0x43c>
 800619c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80061a0:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <_dtoa_r+0x58c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa fa28 	bl	80005f8 <__aeabi_dmul>
 80061a8:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <_dtoa_r+0x58c>)
 80061aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061ae:	2200      	movs	r2, #0
 80061b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061b4:	f7fa fa20 	bl	80005f8 <__aeabi_dmul>
 80061b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061bc:	e7c4      	b.n	8006148 <_dtoa_r+0x508>
 80061be:	bf00      	nop
 80061c0:	08009458 	.word	0x08009458
 80061c4:	08009430 	.word	0x08009430
 80061c8:	3ff00000 	.word	0x3ff00000
 80061cc:	40240000 	.word	0x40240000
 80061d0:	401c0000 	.word	0x401c0000
 80061d4:	40140000 	.word	0x40140000
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	f7fa fa0a 	bl	80005f8 <__aeabi_dmul>
 80061e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061ea:	4656      	mov	r6, sl
 80061ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f0:	f7fa fcb2 	bl	8000b58 <__aeabi_d2iz>
 80061f4:	4605      	mov	r5, r0
 80061f6:	f7fa f995 	bl	8000524 <__aeabi_i2d>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006202:	f7fa f841 	bl	8000288 <__aeabi_dsub>
 8006206:	3530      	adds	r5, #48	@ 0x30
 8006208:	f806 5b01 	strb.w	r5, [r6], #1
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	42a6      	cmp	r6, r4
 8006212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	d124      	bne.n	8006266 <_dtoa_r+0x626>
 800621c:	4baf      	ldr	r3, [pc, #700]	@ (80064dc <_dtoa_r+0x89c>)
 800621e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006222:	f7fa f833 	bl	800028c <__adddf3>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800622e:	f7fa fc73 	bl	8000b18 <__aeabi_dcmpgt>
 8006232:	2800      	cmp	r0, #0
 8006234:	d163      	bne.n	80062fe <_dtoa_r+0x6be>
 8006236:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800623a:	49a8      	ldr	r1, [pc, #672]	@ (80064dc <_dtoa_r+0x89c>)
 800623c:	2000      	movs	r0, #0
 800623e:	f7fa f823 	bl	8000288 <__aeabi_dsub>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624a:	f7fa fc47 	bl	8000adc <__aeabi_dcmplt>
 800624e:	2800      	cmp	r0, #0
 8006250:	f43f af14 	beq.w	800607c <_dtoa_r+0x43c>
 8006254:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006256:	1e73      	subs	r3, r6, #1
 8006258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800625a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800625e:	2b30      	cmp	r3, #48	@ 0x30
 8006260:	d0f8      	beq.n	8006254 <_dtoa_r+0x614>
 8006262:	4647      	mov	r7, r8
 8006264:	e03b      	b.n	80062de <_dtoa_r+0x69e>
 8006266:	4b9e      	ldr	r3, [pc, #632]	@ (80064e0 <_dtoa_r+0x8a0>)
 8006268:	f7fa f9c6 	bl	80005f8 <__aeabi_dmul>
 800626c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006270:	e7bc      	b.n	80061ec <_dtoa_r+0x5ac>
 8006272:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006276:	4656      	mov	r6, sl
 8006278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa fae4 	bl	800084c <__aeabi_ddiv>
 8006284:	f7fa fc68 	bl	8000b58 <__aeabi_d2iz>
 8006288:	4680      	mov	r8, r0
 800628a:	f7fa f94b 	bl	8000524 <__aeabi_i2d>
 800628e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006292:	f7fa f9b1 	bl	80005f8 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062a2:	f7f9 fff1 	bl	8000288 <__aeabi_dsub>
 80062a6:	f806 4b01 	strb.w	r4, [r6], #1
 80062aa:	9d03      	ldr	r5, [sp, #12]
 80062ac:	eba6 040a 	sub.w	r4, r6, sl
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	d133      	bne.n	8006320 <_dtoa_r+0x6e0>
 80062b8:	f7f9 ffe8 	bl	800028c <__adddf3>
 80062bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	f7fa fc28 	bl	8000b18 <__aeabi_dcmpgt>
 80062c8:	b9c0      	cbnz	r0, 80062fc <_dtoa_r+0x6bc>
 80062ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80062d6:	b110      	cbz	r0, 80062de <_dtoa_r+0x69e>
 80062d8:	f018 0f01 	tst.w	r8, #1
 80062dc:	d10e      	bne.n	80062fc <_dtoa_r+0x6bc>
 80062de:	9902      	ldr	r1, [sp, #8]
 80062e0:	4648      	mov	r0, r9
 80062e2:	f000 fbbd 	bl	8006a60 <_Bfree>
 80062e6:	2300      	movs	r3, #0
 80062e8:	7033      	strb	r3, [r6, #0]
 80062ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062ec:	3701      	adds	r7, #1
 80062ee:	601f      	str	r7, [r3, #0]
 80062f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 824b 	beq.w	800678e <_dtoa_r+0xb4e>
 80062f8:	601e      	str	r6, [r3, #0]
 80062fa:	e248      	b.n	800678e <_dtoa_r+0xb4e>
 80062fc:	46b8      	mov	r8, r7
 80062fe:	4633      	mov	r3, r6
 8006300:	461e      	mov	r6, r3
 8006302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006306:	2a39      	cmp	r2, #57	@ 0x39
 8006308:	d106      	bne.n	8006318 <_dtoa_r+0x6d8>
 800630a:	459a      	cmp	sl, r3
 800630c:	d1f8      	bne.n	8006300 <_dtoa_r+0x6c0>
 800630e:	2230      	movs	r2, #48	@ 0x30
 8006310:	f108 0801 	add.w	r8, r8, #1
 8006314:	f88a 2000 	strb.w	r2, [sl]
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	3201      	adds	r2, #1
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e7a0      	b.n	8006262 <_dtoa_r+0x622>
 8006320:	4b6f      	ldr	r3, [pc, #444]	@ (80064e0 <_dtoa_r+0x8a0>)
 8006322:	2200      	movs	r2, #0
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	f7fa fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006334:	2800      	cmp	r0, #0
 8006336:	d09f      	beq.n	8006278 <_dtoa_r+0x638>
 8006338:	e7d1      	b.n	80062de <_dtoa_r+0x69e>
 800633a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800633c:	2a00      	cmp	r2, #0
 800633e:	f000 80ea 	beq.w	8006516 <_dtoa_r+0x8d6>
 8006342:	9a07      	ldr	r2, [sp, #28]
 8006344:	2a01      	cmp	r2, #1
 8006346:	f300 80cd 	bgt.w	80064e4 <_dtoa_r+0x8a4>
 800634a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800634c:	2a00      	cmp	r2, #0
 800634e:	f000 80c1 	beq.w	80064d4 <_dtoa_r+0x894>
 8006352:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006356:	9c08      	ldr	r4, [sp, #32]
 8006358:	9e00      	ldr	r6, [sp, #0]
 800635a:	9a00      	ldr	r2, [sp, #0]
 800635c:	441a      	add	r2, r3
 800635e:	9200      	str	r2, [sp, #0]
 8006360:	9a06      	ldr	r2, [sp, #24]
 8006362:	2101      	movs	r1, #1
 8006364:	441a      	add	r2, r3
 8006366:	4648      	mov	r0, r9
 8006368:	9206      	str	r2, [sp, #24]
 800636a:	f000 fc77 	bl	8006c5c <__i2b>
 800636e:	4605      	mov	r5, r0
 8006370:	b166      	cbz	r6, 800638c <_dtoa_r+0x74c>
 8006372:	9b06      	ldr	r3, [sp, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd09      	ble.n	800638c <_dtoa_r+0x74c>
 8006378:	42b3      	cmp	r3, r6
 800637a:	9a00      	ldr	r2, [sp, #0]
 800637c:	bfa8      	it	ge
 800637e:	4633      	movge	r3, r6
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	9200      	str	r2, [sp, #0]
 8006384:	9a06      	ldr	r2, [sp, #24]
 8006386:	1af6      	subs	r6, r6, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	9306      	str	r3, [sp, #24]
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	b30b      	cbz	r3, 80063d4 <_dtoa_r+0x794>
 8006390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80c6 	beq.w	8006524 <_dtoa_r+0x8e4>
 8006398:	2c00      	cmp	r4, #0
 800639a:	f000 80c0 	beq.w	800651e <_dtoa_r+0x8de>
 800639e:	4629      	mov	r1, r5
 80063a0:	4622      	mov	r2, r4
 80063a2:	4648      	mov	r0, r9
 80063a4:	f000 fd12 	bl	8006dcc <__pow5mult>
 80063a8:	9a02      	ldr	r2, [sp, #8]
 80063aa:	4601      	mov	r1, r0
 80063ac:	4605      	mov	r5, r0
 80063ae:	4648      	mov	r0, r9
 80063b0:	f000 fc6a 	bl	8006c88 <__multiply>
 80063b4:	9902      	ldr	r1, [sp, #8]
 80063b6:	4680      	mov	r8, r0
 80063b8:	4648      	mov	r0, r9
 80063ba:	f000 fb51 	bl	8006a60 <_Bfree>
 80063be:	9b08      	ldr	r3, [sp, #32]
 80063c0:	1b1b      	subs	r3, r3, r4
 80063c2:	9308      	str	r3, [sp, #32]
 80063c4:	f000 80b1 	beq.w	800652a <_dtoa_r+0x8ea>
 80063c8:	9a08      	ldr	r2, [sp, #32]
 80063ca:	4641      	mov	r1, r8
 80063cc:	4648      	mov	r0, r9
 80063ce:	f000 fcfd 	bl	8006dcc <__pow5mult>
 80063d2:	9002      	str	r0, [sp, #8]
 80063d4:	2101      	movs	r1, #1
 80063d6:	4648      	mov	r0, r9
 80063d8:	f000 fc40 	bl	8006c5c <__i2b>
 80063dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063de:	4604      	mov	r4, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 81d8 	beq.w	8006796 <_dtoa_r+0xb56>
 80063e6:	461a      	mov	r2, r3
 80063e8:	4601      	mov	r1, r0
 80063ea:	4648      	mov	r0, r9
 80063ec:	f000 fcee 	bl	8006dcc <__pow5mult>
 80063f0:	9b07      	ldr	r3, [sp, #28]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	4604      	mov	r4, r0
 80063f6:	f300 809f 	bgt.w	8006538 <_dtoa_r+0x8f8>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8097 	bne.w	8006530 <_dtoa_r+0x8f0>
 8006402:	9b05      	ldr	r3, [sp, #20]
 8006404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 8093 	bne.w	8006534 <_dtoa_r+0x8f4>
 800640e:	9b05      	ldr	r3, [sp, #20]
 8006410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006414:	0d1b      	lsrs	r3, r3, #20
 8006416:	051b      	lsls	r3, r3, #20
 8006418:	b133      	cbz	r3, 8006428 <_dtoa_r+0x7e8>
 800641a:	9b00      	ldr	r3, [sp, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	9b06      	ldr	r3, [sp, #24]
 8006422:	3301      	adds	r3, #1
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	2301      	movs	r3, #1
 8006428:	9308      	str	r3, [sp, #32]
 800642a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 81b8 	beq.w	80067a2 <_dtoa_r+0xb62>
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006438:	6918      	ldr	r0, [r3, #16]
 800643a:	f000 fbc3 	bl	8006bc4 <__hi0bits>
 800643e:	f1c0 0020 	rsb	r0, r0, #32
 8006442:	9b06      	ldr	r3, [sp, #24]
 8006444:	4418      	add	r0, r3
 8006446:	f010 001f 	ands.w	r0, r0, #31
 800644a:	f000 8082 	beq.w	8006552 <_dtoa_r+0x912>
 800644e:	f1c0 0320 	rsb	r3, r0, #32
 8006452:	2b04      	cmp	r3, #4
 8006454:	dd73      	ble.n	800653e <_dtoa_r+0x8fe>
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	f1c0 001c 	rsb	r0, r0, #28
 800645c:	4403      	add	r3, r0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	9b06      	ldr	r3, [sp, #24]
 8006462:	4403      	add	r3, r0
 8006464:	4406      	add	r6, r0
 8006466:	9306      	str	r3, [sp, #24]
 8006468:	9b00      	ldr	r3, [sp, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	dd05      	ble.n	800647a <_dtoa_r+0x83a>
 800646e:	9902      	ldr	r1, [sp, #8]
 8006470:	461a      	mov	r2, r3
 8006472:	4648      	mov	r0, r9
 8006474:	f000 fd04 	bl	8006e80 <__lshift>
 8006478:	9002      	str	r0, [sp, #8]
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd05      	ble.n	800648c <_dtoa_r+0x84c>
 8006480:	4621      	mov	r1, r4
 8006482:	461a      	mov	r2, r3
 8006484:	4648      	mov	r0, r9
 8006486:	f000 fcfb 	bl	8006e80 <__lshift>
 800648a:	4604      	mov	r4, r0
 800648c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d061      	beq.n	8006556 <_dtoa_r+0x916>
 8006492:	9802      	ldr	r0, [sp, #8]
 8006494:	4621      	mov	r1, r4
 8006496:	f000 fd5f 	bl	8006f58 <__mcmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	da5b      	bge.n	8006556 <_dtoa_r+0x916>
 800649e:	2300      	movs	r3, #0
 80064a0:	9902      	ldr	r1, [sp, #8]
 80064a2:	220a      	movs	r2, #10
 80064a4:	4648      	mov	r0, r9
 80064a6:	f000 fafd 	bl	8006aa4 <__multadd>
 80064aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ac:	9002      	str	r0, [sp, #8]
 80064ae:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8177 	beq.w	80067a6 <_dtoa_r+0xb66>
 80064b8:	4629      	mov	r1, r5
 80064ba:	2300      	movs	r3, #0
 80064bc:	220a      	movs	r2, #10
 80064be:	4648      	mov	r0, r9
 80064c0:	f000 faf0 	bl	8006aa4 <__multadd>
 80064c4:	f1bb 0f00 	cmp.w	fp, #0
 80064c8:	4605      	mov	r5, r0
 80064ca:	dc6f      	bgt.n	80065ac <_dtoa_r+0x96c>
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	dc49      	bgt.n	8006566 <_dtoa_r+0x926>
 80064d2:	e06b      	b.n	80065ac <_dtoa_r+0x96c>
 80064d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064da:	e73c      	b.n	8006356 <_dtoa_r+0x716>
 80064dc:	3fe00000 	.word	0x3fe00000
 80064e0:	40240000 	.word	0x40240000
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	1e5c      	subs	r4, r3, #1
 80064e8:	9b08      	ldr	r3, [sp, #32]
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	db09      	blt.n	8006502 <_dtoa_r+0x8c2>
 80064ee:	1b1c      	subs	r4, r3, r4
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f6bf af30 	bge.w	8006358 <_dtoa_r+0x718>
 80064f8:	9b00      	ldr	r3, [sp, #0]
 80064fa:	9a03      	ldr	r2, [sp, #12]
 80064fc:	1a9e      	subs	r6, r3, r2
 80064fe:	2300      	movs	r3, #0
 8006500:	e72b      	b.n	800635a <_dtoa_r+0x71a>
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006506:	9408      	str	r4, [sp, #32]
 8006508:	1ae3      	subs	r3, r4, r3
 800650a:	441a      	add	r2, r3
 800650c:	9e00      	ldr	r6, [sp, #0]
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	920d      	str	r2, [sp, #52]	@ 0x34
 8006512:	2400      	movs	r4, #0
 8006514:	e721      	b.n	800635a <_dtoa_r+0x71a>
 8006516:	9c08      	ldr	r4, [sp, #32]
 8006518:	9e00      	ldr	r6, [sp, #0]
 800651a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800651c:	e728      	b.n	8006370 <_dtoa_r+0x730>
 800651e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006522:	e751      	b.n	80063c8 <_dtoa_r+0x788>
 8006524:	9a08      	ldr	r2, [sp, #32]
 8006526:	9902      	ldr	r1, [sp, #8]
 8006528:	e750      	b.n	80063cc <_dtoa_r+0x78c>
 800652a:	f8cd 8008 	str.w	r8, [sp, #8]
 800652e:	e751      	b.n	80063d4 <_dtoa_r+0x794>
 8006530:	2300      	movs	r3, #0
 8006532:	e779      	b.n	8006428 <_dtoa_r+0x7e8>
 8006534:	9b04      	ldr	r3, [sp, #16]
 8006536:	e777      	b.n	8006428 <_dtoa_r+0x7e8>
 8006538:	2300      	movs	r3, #0
 800653a:	9308      	str	r3, [sp, #32]
 800653c:	e779      	b.n	8006432 <_dtoa_r+0x7f2>
 800653e:	d093      	beq.n	8006468 <_dtoa_r+0x828>
 8006540:	9a00      	ldr	r2, [sp, #0]
 8006542:	331c      	adds	r3, #28
 8006544:	441a      	add	r2, r3
 8006546:	9200      	str	r2, [sp, #0]
 8006548:	9a06      	ldr	r2, [sp, #24]
 800654a:	441a      	add	r2, r3
 800654c:	441e      	add	r6, r3
 800654e:	9206      	str	r2, [sp, #24]
 8006550:	e78a      	b.n	8006468 <_dtoa_r+0x828>
 8006552:	4603      	mov	r3, r0
 8006554:	e7f4      	b.n	8006540 <_dtoa_r+0x900>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	46b8      	mov	r8, r7
 800655c:	dc20      	bgt.n	80065a0 <_dtoa_r+0x960>
 800655e:	469b      	mov	fp, r3
 8006560:	9b07      	ldr	r3, [sp, #28]
 8006562:	2b02      	cmp	r3, #2
 8006564:	dd1e      	ble.n	80065a4 <_dtoa_r+0x964>
 8006566:	f1bb 0f00 	cmp.w	fp, #0
 800656a:	f47f adb1 	bne.w	80060d0 <_dtoa_r+0x490>
 800656e:	4621      	mov	r1, r4
 8006570:	465b      	mov	r3, fp
 8006572:	2205      	movs	r2, #5
 8006574:	4648      	mov	r0, r9
 8006576:	f000 fa95 	bl	8006aa4 <__multadd>
 800657a:	4601      	mov	r1, r0
 800657c:	4604      	mov	r4, r0
 800657e:	9802      	ldr	r0, [sp, #8]
 8006580:	f000 fcea 	bl	8006f58 <__mcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	f77f ada3 	ble.w	80060d0 <_dtoa_r+0x490>
 800658a:	4656      	mov	r6, sl
 800658c:	2331      	movs	r3, #49	@ 0x31
 800658e:	f806 3b01 	strb.w	r3, [r6], #1
 8006592:	f108 0801 	add.w	r8, r8, #1
 8006596:	e59f      	b.n	80060d8 <_dtoa_r+0x498>
 8006598:	9c03      	ldr	r4, [sp, #12]
 800659a:	46b8      	mov	r8, r7
 800659c:	4625      	mov	r5, r4
 800659e:	e7f4      	b.n	800658a <_dtoa_r+0x94a>
 80065a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80065a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8101 	beq.w	80067ae <_dtoa_r+0xb6e>
 80065ac:	2e00      	cmp	r6, #0
 80065ae:	dd05      	ble.n	80065bc <_dtoa_r+0x97c>
 80065b0:	4629      	mov	r1, r5
 80065b2:	4632      	mov	r2, r6
 80065b4:	4648      	mov	r0, r9
 80065b6:	f000 fc63 	bl	8006e80 <__lshift>
 80065ba:	4605      	mov	r5, r0
 80065bc:	9b08      	ldr	r3, [sp, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d05c      	beq.n	800667c <_dtoa_r+0xa3c>
 80065c2:	6869      	ldr	r1, [r5, #4]
 80065c4:	4648      	mov	r0, r9
 80065c6:	f000 fa0b 	bl	80069e0 <_Balloc>
 80065ca:	4606      	mov	r6, r0
 80065cc:	b928      	cbnz	r0, 80065da <_dtoa_r+0x99a>
 80065ce:	4b82      	ldr	r3, [pc, #520]	@ (80067d8 <_dtoa_r+0xb98>)
 80065d0:	4602      	mov	r2, r0
 80065d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065d6:	f7ff bb4a 	b.w	8005c6e <_dtoa_r+0x2e>
 80065da:	692a      	ldr	r2, [r5, #16]
 80065dc:	3202      	adds	r2, #2
 80065de:	0092      	lsls	r2, r2, #2
 80065e0:	f105 010c 	add.w	r1, r5, #12
 80065e4:	300c      	adds	r0, #12
 80065e6:	f002 f93f 	bl	8008868 <memcpy>
 80065ea:	2201      	movs	r2, #1
 80065ec:	4631      	mov	r1, r6
 80065ee:	4648      	mov	r0, r9
 80065f0:	f000 fc46 	bl	8006e80 <__lshift>
 80065f4:	f10a 0301 	add.w	r3, sl, #1
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	eb0a 030b 	add.w	r3, sl, fp
 80065fe:	9308      	str	r3, [sp, #32]
 8006600:	9b04      	ldr	r3, [sp, #16]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	462f      	mov	r7, r5
 8006608:	9306      	str	r3, [sp, #24]
 800660a:	4605      	mov	r5, r0
 800660c:	9b00      	ldr	r3, [sp, #0]
 800660e:	9802      	ldr	r0, [sp, #8]
 8006610:	4621      	mov	r1, r4
 8006612:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006616:	f7ff fa8b 	bl	8005b30 <quorem>
 800661a:	4603      	mov	r3, r0
 800661c:	3330      	adds	r3, #48	@ 0x30
 800661e:	9003      	str	r0, [sp, #12]
 8006620:	4639      	mov	r1, r7
 8006622:	9802      	ldr	r0, [sp, #8]
 8006624:	9309      	str	r3, [sp, #36]	@ 0x24
 8006626:	f000 fc97 	bl	8006f58 <__mcmp>
 800662a:	462a      	mov	r2, r5
 800662c:	9004      	str	r0, [sp, #16]
 800662e:	4621      	mov	r1, r4
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fcad 	bl	8006f90 <__mdiff>
 8006636:	68c2      	ldr	r2, [r0, #12]
 8006638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800663a:	4606      	mov	r6, r0
 800663c:	bb02      	cbnz	r2, 8006680 <_dtoa_r+0xa40>
 800663e:	4601      	mov	r1, r0
 8006640:	9802      	ldr	r0, [sp, #8]
 8006642:	f000 fc89 	bl	8006f58 <__mcmp>
 8006646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006648:	4602      	mov	r2, r0
 800664a:	4631      	mov	r1, r6
 800664c:	4648      	mov	r0, r9
 800664e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006650:	9309      	str	r3, [sp, #36]	@ 0x24
 8006652:	f000 fa05 	bl	8006a60 <_Bfree>
 8006656:	9b07      	ldr	r3, [sp, #28]
 8006658:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800665a:	9e00      	ldr	r6, [sp, #0]
 800665c:	ea42 0103 	orr.w	r1, r2, r3
 8006660:	9b06      	ldr	r3, [sp, #24]
 8006662:	4319      	orrs	r1, r3
 8006664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006666:	d10d      	bne.n	8006684 <_dtoa_r+0xa44>
 8006668:	2b39      	cmp	r3, #57	@ 0x39
 800666a:	d027      	beq.n	80066bc <_dtoa_r+0xa7c>
 800666c:	9a04      	ldr	r2, [sp, #16]
 800666e:	2a00      	cmp	r2, #0
 8006670:	dd01      	ble.n	8006676 <_dtoa_r+0xa36>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	3331      	adds	r3, #49	@ 0x31
 8006676:	f88b 3000 	strb.w	r3, [fp]
 800667a:	e52e      	b.n	80060da <_dtoa_r+0x49a>
 800667c:	4628      	mov	r0, r5
 800667e:	e7b9      	b.n	80065f4 <_dtoa_r+0x9b4>
 8006680:	2201      	movs	r2, #1
 8006682:	e7e2      	b.n	800664a <_dtoa_r+0xa0a>
 8006684:	9904      	ldr	r1, [sp, #16]
 8006686:	2900      	cmp	r1, #0
 8006688:	db04      	blt.n	8006694 <_dtoa_r+0xa54>
 800668a:	9807      	ldr	r0, [sp, #28]
 800668c:	4301      	orrs	r1, r0
 800668e:	9806      	ldr	r0, [sp, #24]
 8006690:	4301      	orrs	r1, r0
 8006692:	d120      	bne.n	80066d6 <_dtoa_r+0xa96>
 8006694:	2a00      	cmp	r2, #0
 8006696:	ddee      	ble.n	8006676 <_dtoa_r+0xa36>
 8006698:	9902      	ldr	r1, [sp, #8]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	2201      	movs	r2, #1
 800669e:	4648      	mov	r0, r9
 80066a0:	f000 fbee 	bl	8006e80 <__lshift>
 80066a4:	4621      	mov	r1, r4
 80066a6:	9002      	str	r0, [sp, #8]
 80066a8:	f000 fc56 	bl	8006f58 <__mcmp>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	9b00      	ldr	r3, [sp, #0]
 80066b0:	dc02      	bgt.n	80066b8 <_dtoa_r+0xa78>
 80066b2:	d1e0      	bne.n	8006676 <_dtoa_r+0xa36>
 80066b4:	07da      	lsls	r2, r3, #31
 80066b6:	d5de      	bpl.n	8006676 <_dtoa_r+0xa36>
 80066b8:	2b39      	cmp	r3, #57	@ 0x39
 80066ba:	d1da      	bne.n	8006672 <_dtoa_r+0xa32>
 80066bc:	2339      	movs	r3, #57	@ 0x39
 80066be:	f88b 3000 	strb.w	r3, [fp]
 80066c2:	4633      	mov	r3, r6
 80066c4:	461e      	mov	r6, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066cc:	2a39      	cmp	r2, #57	@ 0x39
 80066ce:	d04e      	beq.n	800676e <_dtoa_r+0xb2e>
 80066d0:	3201      	adds	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e501      	b.n	80060da <_dtoa_r+0x49a>
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	dd03      	ble.n	80066e2 <_dtoa_r+0xaa2>
 80066da:	2b39      	cmp	r3, #57	@ 0x39
 80066dc:	d0ee      	beq.n	80066bc <_dtoa_r+0xa7c>
 80066de:	3301      	adds	r3, #1
 80066e0:	e7c9      	b.n	8006676 <_dtoa_r+0xa36>
 80066e2:	9a00      	ldr	r2, [sp, #0]
 80066e4:	9908      	ldr	r1, [sp, #32]
 80066e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066ea:	428a      	cmp	r2, r1
 80066ec:	d028      	beq.n	8006740 <_dtoa_r+0xb00>
 80066ee:	9902      	ldr	r1, [sp, #8]
 80066f0:	2300      	movs	r3, #0
 80066f2:	220a      	movs	r2, #10
 80066f4:	4648      	mov	r0, r9
 80066f6:	f000 f9d5 	bl	8006aa4 <__multadd>
 80066fa:	42af      	cmp	r7, r5
 80066fc:	9002      	str	r0, [sp, #8]
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	f04f 020a 	mov.w	r2, #10
 8006706:	4639      	mov	r1, r7
 8006708:	4648      	mov	r0, r9
 800670a:	d107      	bne.n	800671c <_dtoa_r+0xadc>
 800670c:	f000 f9ca 	bl	8006aa4 <__multadd>
 8006710:	4607      	mov	r7, r0
 8006712:	4605      	mov	r5, r0
 8006714:	9b00      	ldr	r3, [sp, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	e777      	b.n	800660c <_dtoa_r+0x9cc>
 800671c:	f000 f9c2 	bl	8006aa4 <__multadd>
 8006720:	4629      	mov	r1, r5
 8006722:	4607      	mov	r7, r0
 8006724:	2300      	movs	r3, #0
 8006726:	220a      	movs	r2, #10
 8006728:	4648      	mov	r0, r9
 800672a:	f000 f9bb 	bl	8006aa4 <__multadd>
 800672e:	4605      	mov	r5, r0
 8006730:	e7f0      	b.n	8006714 <_dtoa_r+0xad4>
 8006732:	f1bb 0f00 	cmp.w	fp, #0
 8006736:	bfcc      	ite	gt
 8006738:	465e      	movgt	r6, fp
 800673a:	2601      	movle	r6, #1
 800673c:	4456      	add	r6, sl
 800673e:	2700      	movs	r7, #0
 8006740:	9902      	ldr	r1, [sp, #8]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4648      	mov	r0, r9
 8006748:	f000 fb9a 	bl	8006e80 <__lshift>
 800674c:	4621      	mov	r1, r4
 800674e:	9002      	str	r0, [sp, #8]
 8006750:	f000 fc02 	bl	8006f58 <__mcmp>
 8006754:	2800      	cmp	r0, #0
 8006756:	dcb4      	bgt.n	80066c2 <_dtoa_r+0xa82>
 8006758:	d102      	bne.n	8006760 <_dtoa_r+0xb20>
 800675a:	9b00      	ldr	r3, [sp, #0]
 800675c:	07db      	lsls	r3, r3, #31
 800675e:	d4b0      	bmi.n	80066c2 <_dtoa_r+0xa82>
 8006760:	4633      	mov	r3, r6
 8006762:	461e      	mov	r6, r3
 8006764:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006768:	2a30      	cmp	r2, #48	@ 0x30
 800676a:	d0fa      	beq.n	8006762 <_dtoa_r+0xb22>
 800676c:	e4b5      	b.n	80060da <_dtoa_r+0x49a>
 800676e:	459a      	cmp	sl, r3
 8006770:	d1a8      	bne.n	80066c4 <_dtoa_r+0xa84>
 8006772:	2331      	movs	r3, #49	@ 0x31
 8006774:	f108 0801 	add.w	r8, r8, #1
 8006778:	f88a 3000 	strb.w	r3, [sl]
 800677c:	e4ad      	b.n	80060da <_dtoa_r+0x49a>
 800677e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006780:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80067dc <_dtoa_r+0xb9c>
 8006784:	b11b      	cbz	r3, 800678e <_dtoa_r+0xb4e>
 8006786:	f10a 0308 	add.w	r3, sl, #8
 800678a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4650      	mov	r0, sl
 8006790:	b017      	add	sp, #92	@ 0x5c
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	9b07      	ldr	r3, [sp, #28]
 8006798:	2b01      	cmp	r3, #1
 800679a:	f77f ae2e 	ble.w	80063fa <_dtoa_r+0x7ba>
 800679e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	2001      	movs	r0, #1
 80067a4:	e64d      	b.n	8006442 <_dtoa_r+0x802>
 80067a6:	f1bb 0f00 	cmp.w	fp, #0
 80067aa:	f77f aed9 	ble.w	8006560 <_dtoa_r+0x920>
 80067ae:	4656      	mov	r6, sl
 80067b0:	9802      	ldr	r0, [sp, #8]
 80067b2:	4621      	mov	r1, r4
 80067b4:	f7ff f9bc 	bl	8005b30 <quorem>
 80067b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80067bc:	f806 3b01 	strb.w	r3, [r6], #1
 80067c0:	eba6 020a 	sub.w	r2, r6, sl
 80067c4:	4593      	cmp	fp, r2
 80067c6:	ddb4      	ble.n	8006732 <_dtoa_r+0xaf2>
 80067c8:	9902      	ldr	r1, [sp, #8]
 80067ca:	2300      	movs	r3, #0
 80067cc:	220a      	movs	r2, #10
 80067ce:	4648      	mov	r0, r9
 80067d0:	f000 f968 	bl	8006aa4 <__multadd>
 80067d4:	9002      	str	r0, [sp, #8]
 80067d6:	e7eb      	b.n	80067b0 <_dtoa_r+0xb70>
 80067d8:	08009301 	.word	0x08009301
 80067dc:	08009285 	.word	0x08009285

080067e0 <_free_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4605      	mov	r5, r0
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d041      	beq.n	800686c <_free_r+0x8c>
 80067e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ec:	1f0c      	subs	r4, r1, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfb8      	it	lt
 80067f2:	18e4      	addlt	r4, r4, r3
 80067f4:	f000 f8e8 	bl	80069c8 <__malloc_lock>
 80067f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <_free_r+0x90>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	b933      	cbnz	r3, 800680c <_free_r+0x2c>
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	4628      	mov	r0, r5
 8006804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006808:	f000 b8e4 	b.w	80069d4 <__malloc_unlock>
 800680c:	42a3      	cmp	r3, r4
 800680e:	d908      	bls.n	8006822 <_free_r+0x42>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428b      	cmp	r3, r1
 8006816:	bf01      	itttt	eq
 8006818:	6819      	ldreq	r1, [r3, #0]
 800681a:	685b      	ldreq	r3, [r3, #4]
 800681c:	1809      	addeq	r1, r1, r0
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	e7ed      	b.n	80067fe <_free_r+0x1e>
 8006822:	461a      	mov	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b10b      	cbz	r3, 800682c <_free_r+0x4c>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d9fa      	bls.n	8006822 <_free_r+0x42>
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	1850      	adds	r0, r2, r1
 8006830:	42a0      	cmp	r0, r4
 8006832:	d10b      	bne.n	800684c <_free_r+0x6c>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	4401      	add	r1, r0
 8006838:	1850      	adds	r0, r2, r1
 800683a:	4283      	cmp	r3, r0
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	d1e0      	bne.n	8006802 <_free_r+0x22>
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	6053      	str	r3, [r2, #4]
 8006846:	4408      	add	r0, r1
 8006848:	6010      	str	r0, [r2, #0]
 800684a:	e7da      	b.n	8006802 <_free_r+0x22>
 800684c:	d902      	bls.n	8006854 <_free_r+0x74>
 800684e:	230c      	movs	r3, #12
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	e7d6      	b.n	8006802 <_free_r+0x22>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	1821      	adds	r1, r4, r0
 8006858:	428b      	cmp	r3, r1
 800685a:	bf04      	itt	eq
 800685c:	6819      	ldreq	r1, [r3, #0]
 800685e:	685b      	ldreq	r3, [r3, #4]
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	bf04      	itt	eq
 8006864:	1809      	addeq	r1, r1, r0
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	6054      	str	r4, [r2, #4]
 800686a:	e7ca      	b.n	8006802 <_free_r+0x22>
 800686c:	bd38      	pop	{r3, r4, r5, pc}
 800686e:	bf00      	nop
 8006870:	20000440 	.word	0x20000440

08006874 <malloc>:
 8006874:	4b02      	ldr	r3, [pc, #8]	@ (8006880 <malloc+0xc>)
 8006876:	4601      	mov	r1, r0
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	f000 b825 	b.w	80068c8 <_malloc_r>
 800687e:	bf00      	nop
 8006880:	20000018 	.word	0x20000018

08006884 <sbrk_aligned>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4e0f      	ldr	r6, [pc, #60]	@ (80068c4 <sbrk_aligned+0x40>)
 8006888:	460c      	mov	r4, r1
 800688a:	6831      	ldr	r1, [r6, #0]
 800688c:	4605      	mov	r5, r0
 800688e:	b911      	cbnz	r1, 8006896 <sbrk_aligned+0x12>
 8006890:	f001 ffda 	bl	8008848 <_sbrk_r>
 8006894:	6030      	str	r0, [r6, #0]
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f001 ffd5 	bl	8008848 <_sbrk_r>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d103      	bne.n	80068aa <sbrk_aligned+0x26>
 80068a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80068a6:	4620      	mov	r0, r4
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	1cc4      	adds	r4, r0, #3
 80068ac:	f024 0403 	bic.w	r4, r4, #3
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d0f8      	beq.n	80068a6 <sbrk_aligned+0x22>
 80068b4:	1a21      	subs	r1, r4, r0
 80068b6:	4628      	mov	r0, r5
 80068b8:	f001 ffc6 	bl	8008848 <_sbrk_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d1f2      	bne.n	80068a6 <sbrk_aligned+0x22>
 80068c0:	e7ef      	b.n	80068a2 <sbrk_aligned+0x1e>
 80068c2:	bf00      	nop
 80068c4:	2000043c 	.word	0x2000043c

080068c8 <_malloc_r>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	1ccd      	adds	r5, r1, #3
 80068ce:	f025 0503 	bic.w	r5, r5, #3
 80068d2:	3508      	adds	r5, #8
 80068d4:	2d0c      	cmp	r5, #12
 80068d6:	bf38      	it	cc
 80068d8:	250c      	movcc	r5, #12
 80068da:	2d00      	cmp	r5, #0
 80068dc:	4606      	mov	r6, r0
 80068de:	db01      	blt.n	80068e4 <_malloc_r+0x1c>
 80068e0:	42a9      	cmp	r1, r5
 80068e2:	d904      	bls.n	80068ee <_malloc_r+0x26>
 80068e4:	230c      	movs	r3, #12
 80068e6:	6033      	str	r3, [r6, #0]
 80068e8:	2000      	movs	r0, #0
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c4 <_malloc_r+0xfc>
 80068f2:	f000 f869 	bl	80069c8 <__malloc_lock>
 80068f6:	f8d8 3000 	ldr.w	r3, [r8]
 80068fa:	461c      	mov	r4, r3
 80068fc:	bb44      	cbnz	r4, 8006950 <_malloc_r+0x88>
 80068fe:	4629      	mov	r1, r5
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ffbf 	bl	8006884 <sbrk_aligned>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	4604      	mov	r4, r0
 800690a:	d158      	bne.n	80069be <_malloc_r+0xf6>
 800690c:	f8d8 4000 	ldr.w	r4, [r8]
 8006910:	4627      	mov	r7, r4
 8006912:	2f00      	cmp	r7, #0
 8006914:	d143      	bne.n	800699e <_malloc_r+0xd6>
 8006916:	2c00      	cmp	r4, #0
 8006918:	d04b      	beq.n	80069b2 <_malloc_r+0xea>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	4639      	mov	r1, r7
 800691e:	4630      	mov	r0, r6
 8006920:	eb04 0903 	add.w	r9, r4, r3
 8006924:	f001 ff90 	bl	8008848 <_sbrk_r>
 8006928:	4581      	cmp	r9, r0
 800692a:	d142      	bne.n	80069b2 <_malloc_r+0xea>
 800692c:	6821      	ldr	r1, [r4, #0]
 800692e:	1a6d      	subs	r5, r5, r1
 8006930:	4629      	mov	r1, r5
 8006932:	4630      	mov	r0, r6
 8006934:	f7ff ffa6 	bl	8006884 <sbrk_aligned>
 8006938:	3001      	adds	r0, #1
 800693a:	d03a      	beq.n	80069b2 <_malloc_r+0xea>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	442b      	add	r3, r5
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	f8d8 3000 	ldr.w	r3, [r8]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	bb62      	cbnz	r2, 80069a4 <_malloc_r+0xdc>
 800694a:	f8c8 7000 	str.w	r7, [r8]
 800694e:	e00f      	b.n	8006970 <_malloc_r+0xa8>
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	1b52      	subs	r2, r2, r5
 8006954:	d420      	bmi.n	8006998 <_malloc_r+0xd0>
 8006956:	2a0b      	cmp	r2, #11
 8006958:	d917      	bls.n	800698a <_malloc_r+0xc2>
 800695a:	1961      	adds	r1, r4, r5
 800695c:	42a3      	cmp	r3, r4
 800695e:	6025      	str	r5, [r4, #0]
 8006960:	bf18      	it	ne
 8006962:	6059      	strne	r1, [r3, #4]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	bf08      	it	eq
 8006968:	f8c8 1000 	streq.w	r1, [r8]
 800696c:	5162      	str	r2, [r4, r5]
 800696e:	604b      	str	r3, [r1, #4]
 8006970:	4630      	mov	r0, r6
 8006972:	f000 f82f 	bl	80069d4 <__malloc_unlock>
 8006976:	f104 000b 	add.w	r0, r4, #11
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	f020 0007 	bic.w	r0, r0, #7
 8006980:	1ac2      	subs	r2, r0, r3
 8006982:	bf1c      	itt	ne
 8006984:	1a1b      	subne	r3, r3, r0
 8006986:	50a3      	strne	r3, [r4, r2]
 8006988:	e7af      	b.n	80068ea <_malloc_r+0x22>
 800698a:	6862      	ldr	r2, [r4, #4]
 800698c:	42a3      	cmp	r3, r4
 800698e:	bf0c      	ite	eq
 8006990:	f8c8 2000 	streq.w	r2, [r8]
 8006994:	605a      	strne	r2, [r3, #4]
 8006996:	e7eb      	b.n	8006970 <_malloc_r+0xa8>
 8006998:	4623      	mov	r3, r4
 800699a:	6864      	ldr	r4, [r4, #4]
 800699c:	e7ae      	b.n	80068fc <_malloc_r+0x34>
 800699e:	463c      	mov	r4, r7
 80069a0:	687f      	ldr	r7, [r7, #4]
 80069a2:	e7b6      	b.n	8006912 <_malloc_r+0x4a>
 80069a4:	461a      	mov	r2, r3
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d1fb      	bne.n	80069a4 <_malloc_r+0xdc>
 80069ac:	2300      	movs	r3, #0
 80069ae:	6053      	str	r3, [r2, #4]
 80069b0:	e7de      	b.n	8006970 <_malloc_r+0xa8>
 80069b2:	230c      	movs	r3, #12
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	4630      	mov	r0, r6
 80069b8:	f000 f80c 	bl	80069d4 <__malloc_unlock>
 80069bc:	e794      	b.n	80068e8 <_malloc_r+0x20>
 80069be:	6005      	str	r5, [r0, #0]
 80069c0:	e7d6      	b.n	8006970 <_malloc_r+0xa8>
 80069c2:	bf00      	nop
 80069c4:	20000440 	.word	0x20000440

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	@ (80069d0 <__malloc_lock+0x8>)
 80069ca:	f7ff b8a8 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	20000438 	.word	0x20000438

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__malloc_unlock+0x8>)
 80069d6:	f7ff b8a3 	b.w	8005b20 <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	20000438 	.word	0x20000438

080069e0 <_Balloc>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	69c6      	ldr	r6, [r0, #28]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	b976      	cbnz	r6, 8006a08 <_Balloc+0x28>
 80069ea:	2010      	movs	r0, #16
 80069ec:	f7ff ff42 	bl	8006874 <malloc>
 80069f0:	4602      	mov	r2, r0
 80069f2:	61e0      	str	r0, [r4, #28]
 80069f4:	b920      	cbnz	r0, 8006a00 <_Balloc+0x20>
 80069f6:	4b18      	ldr	r3, [pc, #96]	@ (8006a58 <_Balloc+0x78>)
 80069f8:	4818      	ldr	r0, [pc, #96]	@ (8006a5c <_Balloc+0x7c>)
 80069fa:	216b      	movs	r1, #107	@ 0x6b
 80069fc:	f001 ff4c 	bl	8008898 <__assert_func>
 8006a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a04:	6006      	str	r6, [r0, #0]
 8006a06:	60c6      	str	r6, [r0, #12]
 8006a08:	69e6      	ldr	r6, [r4, #28]
 8006a0a:	68f3      	ldr	r3, [r6, #12]
 8006a0c:	b183      	cbz	r3, 8006a30 <_Balloc+0x50>
 8006a0e:	69e3      	ldr	r3, [r4, #28]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a16:	b9b8      	cbnz	r0, 8006a48 <_Balloc+0x68>
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a1e:	1d72      	adds	r2, r6, #5
 8006a20:	0092      	lsls	r2, r2, #2
 8006a22:	4620      	mov	r0, r4
 8006a24:	f001 ff56 	bl	80088d4 <_calloc_r>
 8006a28:	b160      	cbz	r0, 8006a44 <_Balloc+0x64>
 8006a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a2e:	e00e      	b.n	8006a4e <_Balloc+0x6e>
 8006a30:	2221      	movs	r2, #33	@ 0x21
 8006a32:	2104      	movs	r1, #4
 8006a34:	4620      	mov	r0, r4
 8006a36:	f001 ff4d 	bl	80088d4 <_calloc_r>
 8006a3a:	69e3      	ldr	r3, [r4, #28]
 8006a3c:	60f0      	str	r0, [r6, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e4      	bne.n	8006a0e <_Balloc+0x2e>
 8006a44:	2000      	movs	r0, #0
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a54:	e7f7      	b.n	8006a46 <_Balloc+0x66>
 8006a56:	bf00      	nop
 8006a58:	08009292 	.word	0x08009292
 8006a5c:	08009312 	.word	0x08009312

08006a60 <_Bfree>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	69c6      	ldr	r6, [r0, #28]
 8006a64:	4605      	mov	r5, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b976      	cbnz	r6, 8006a88 <_Bfree+0x28>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ff02 	bl	8006874 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	61e8      	str	r0, [r5, #28]
 8006a74:	b920      	cbnz	r0, 8006a80 <_Bfree+0x20>
 8006a76:	4b09      	ldr	r3, [pc, #36]	@ (8006a9c <_Bfree+0x3c>)
 8006a78:	4809      	ldr	r0, [pc, #36]	@ (8006aa0 <_Bfree+0x40>)
 8006a7a:	218f      	movs	r1, #143	@ 0x8f
 8006a7c:	f001 ff0c 	bl	8008898 <__assert_func>
 8006a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a84:	6006      	str	r6, [r0, #0]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	b13c      	cbz	r4, 8006a9a <_Bfree+0x3a>
 8006a8a:	69eb      	ldr	r3, [r5, #28]
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	08009292 	.word	0x08009292
 8006aa0:	08009312 	.word	0x08009312

08006aa4 <__multadd>:
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	690d      	ldr	r5, [r1, #16]
 8006aaa:	4607      	mov	r7, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	461e      	mov	r6, r3
 8006ab0:	f101 0c14 	add.w	ip, r1, #20
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8006aba:	b299      	uxth	r1, r3
 8006abc:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac0:	0c1e      	lsrs	r6, r3, #16
 8006ac2:	0c0b      	lsrs	r3, r1, #16
 8006ac4:	fb02 3306 	mla	r3, r2, r6, r3
 8006ac8:	b289      	uxth	r1, r1
 8006aca:	3001      	adds	r0, #1
 8006acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad0:	4285      	cmp	r5, r0
 8006ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ada:	dcec      	bgt.n	8006ab6 <__multadd+0x12>
 8006adc:	b30e      	cbz	r6, 8006b22 <__multadd+0x7e>
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	42ab      	cmp	r3, r5
 8006ae2:	dc19      	bgt.n	8006b18 <__multadd+0x74>
 8006ae4:	6861      	ldr	r1, [r4, #4]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	3101      	adds	r1, #1
 8006aea:	f7ff ff79 	bl	80069e0 <_Balloc>
 8006aee:	4680      	mov	r8, r0
 8006af0:	b928      	cbnz	r0, 8006afe <__multadd+0x5a>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <__multadd+0x84>)
 8006af6:	480d      	ldr	r0, [pc, #52]	@ (8006b2c <__multadd+0x88>)
 8006af8:	21ba      	movs	r1, #186	@ 0xba
 8006afa:	f001 fecd 	bl	8008898 <__assert_func>
 8006afe:	6922      	ldr	r2, [r4, #16]
 8006b00:	3202      	adds	r2, #2
 8006b02:	f104 010c 	add.w	r1, r4, #12
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	300c      	adds	r0, #12
 8006b0a:	f001 fead 	bl	8008868 <memcpy>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ffa5 	bl	8006a60 <_Bfree>
 8006b16:	4644      	mov	r4, r8
 8006b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	615e      	str	r6, [r3, #20]
 8006b20:	6125      	str	r5, [r4, #16]
 8006b22:	4620      	mov	r0, r4
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b28:	08009301 	.word	0x08009301
 8006b2c:	08009312 	.word	0x08009312

08006b30 <__s2b>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	460c      	mov	r4, r1
 8006b36:	4615      	mov	r5, r2
 8006b38:	461f      	mov	r7, r3
 8006b3a:	2209      	movs	r2, #9
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	4606      	mov	r6, r0
 8006b40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b44:	2100      	movs	r1, #0
 8006b46:	2201      	movs	r2, #1
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	db09      	blt.n	8006b60 <__s2b+0x30>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff ff47 	bl	80069e0 <_Balloc>
 8006b52:	b940      	cbnz	r0, 8006b66 <__s2b+0x36>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b19      	ldr	r3, [pc, #100]	@ (8006bbc <__s2b+0x8c>)
 8006b58:	4819      	ldr	r0, [pc, #100]	@ (8006bc0 <__s2b+0x90>)
 8006b5a:	21d3      	movs	r1, #211	@ 0xd3
 8006b5c:	f001 fe9c 	bl	8008898 <__assert_func>
 8006b60:	0052      	lsls	r2, r2, #1
 8006b62:	3101      	adds	r1, #1
 8006b64:	e7f0      	b.n	8006b48 <__s2b+0x18>
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	6143      	str	r3, [r0, #20]
 8006b6a:	2d09      	cmp	r5, #9
 8006b6c:	f04f 0301 	mov.w	r3, #1
 8006b70:	6103      	str	r3, [r0, #16]
 8006b72:	dd16      	ble.n	8006ba2 <__s2b+0x72>
 8006b74:	f104 0909 	add.w	r9, r4, #9
 8006b78:	46c8      	mov	r8, r9
 8006b7a:	442c      	add	r4, r5
 8006b7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b80:	4601      	mov	r1, r0
 8006b82:	3b30      	subs	r3, #48	@ 0x30
 8006b84:	220a      	movs	r2, #10
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ff8c 	bl	8006aa4 <__multadd>
 8006b8c:	45a0      	cmp	r8, r4
 8006b8e:	d1f5      	bne.n	8006b7c <__s2b+0x4c>
 8006b90:	f1a5 0408 	sub.w	r4, r5, #8
 8006b94:	444c      	add	r4, r9
 8006b96:	1b2d      	subs	r5, r5, r4
 8006b98:	1963      	adds	r3, r4, r5
 8006b9a:	42bb      	cmp	r3, r7
 8006b9c:	db04      	blt.n	8006ba8 <__s2b+0x78>
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	340a      	adds	r4, #10
 8006ba4:	2509      	movs	r5, #9
 8006ba6:	e7f6      	b.n	8006b96 <__s2b+0x66>
 8006ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bac:	4601      	mov	r1, r0
 8006bae:	3b30      	subs	r3, #48	@ 0x30
 8006bb0:	220a      	movs	r2, #10
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7ff ff76 	bl	8006aa4 <__multadd>
 8006bb8:	e7ee      	b.n	8006b98 <__s2b+0x68>
 8006bba:	bf00      	nop
 8006bbc:	08009301 	.word	0x08009301
 8006bc0:	08009312 	.word	0x08009312

08006bc4 <__hi0bits>:
 8006bc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006bc8:	4603      	mov	r3, r0
 8006bca:	bf36      	itet	cc
 8006bcc:	0403      	lslcc	r3, r0, #16
 8006bce:	2000      	movcs	r0, #0
 8006bd0:	2010      	movcc	r0, #16
 8006bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bd6:	bf3c      	itt	cc
 8006bd8:	021b      	lslcc	r3, r3, #8
 8006bda:	3008      	addcc	r0, #8
 8006bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be0:	bf3c      	itt	cc
 8006be2:	011b      	lslcc	r3, r3, #4
 8006be4:	3004      	addcc	r0, #4
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bea:	bf3c      	itt	cc
 8006bec:	009b      	lslcc	r3, r3, #2
 8006bee:	3002      	addcc	r0, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db05      	blt.n	8006c00 <__hi0bits+0x3c>
 8006bf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006bf8:	f100 0001 	add.w	r0, r0, #1
 8006bfc:	bf08      	it	eq
 8006bfe:	2020      	moveq	r0, #32
 8006c00:	4770      	bx	lr

08006c02 <__lo0bits>:
 8006c02:	6803      	ldr	r3, [r0, #0]
 8006c04:	4602      	mov	r2, r0
 8006c06:	f013 0007 	ands.w	r0, r3, #7
 8006c0a:	d00b      	beq.n	8006c24 <__lo0bits+0x22>
 8006c0c:	07d9      	lsls	r1, r3, #31
 8006c0e:	d421      	bmi.n	8006c54 <__lo0bits+0x52>
 8006c10:	0798      	lsls	r0, r3, #30
 8006c12:	bf49      	itett	mi
 8006c14:	085b      	lsrmi	r3, r3, #1
 8006c16:	089b      	lsrpl	r3, r3, #2
 8006c18:	2001      	movmi	r0, #1
 8006c1a:	6013      	strmi	r3, [r2, #0]
 8006c1c:	bf5c      	itt	pl
 8006c1e:	6013      	strpl	r3, [r2, #0]
 8006c20:	2002      	movpl	r0, #2
 8006c22:	4770      	bx	lr
 8006c24:	b299      	uxth	r1, r3
 8006c26:	b909      	cbnz	r1, 8006c2c <__lo0bits+0x2a>
 8006c28:	0c1b      	lsrs	r3, r3, #16
 8006c2a:	2010      	movs	r0, #16
 8006c2c:	b2d9      	uxtb	r1, r3
 8006c2e:	b909      	cbnz	r1, 8006c34 <__lo0bits+0x32>
 8006c30:	3008      	adds	r0, #8
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	0719      	lsls	r1, r3, #28
 8006c36:	bf04      	itt	eq
 8006c38:	091b      	lsreq	r3, r3, #4
 8006c3a:	3004      	addeq	r0, #4
 8006c3c:	0799      	lsls	r1, r3, #30
 8006c3e:	bf04      	itt	eq
 8006c40:	089b      	lsreq	r3, r3, #2
 8006c42:	3002      	addeq	r0, #2
 8006c44:	07d9      	lsls	r1, r3, #31
 8006c46:	d403      	bmi.n	8006c50 <__lo0bits+0x4e>
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	f100 0001 	add.w	r0, r0, #1
 8006c4e:	d003      	beq.n	8006c58 <__lo0bits+0x56>
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	4770      	bx	lr
 8006c54:	2000      	movs	r0, #0
 8006c56:	4770      	bx	lr
 8006c58:	2020      	movs	r0, #32
 8006c5a:	4770      	bx	lr

08006c5c <__i2b>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	460c      	mov	r4, r1
 8006c60:	2101      	movs	r1, #1
 8006c62:	f7ff febd 	bl	80069e0 <_Balloc>
 8006c66:	4602      	mov	r2, r0
 8006c68:	b928      	cbnz	r0, 8006c76 <__i2b+0x1a>
 8006c6a:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <__i2b+0x24>)
 8006c6c:	4805      	ldr	r0, [pc, #20]	@ (8006c84 <__i2b+0x28>)
 8006c6e:	f240 1145 	movw	r1, #325	@ 0x145
 8006c72:	f001 fe11 	bl	8008898 <__assert_func>
 8006c76:	2301      	movs	r3, #1
 8006c78:	6144      	str	r4, [r0, #20]
 8006c7a:	6103      	str	r3, [r0, #16]
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	08009301 	.word	0x08009301
 8006c84:	08009312 	.word	0x08009312

08006c88 <__multiply>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	4617      	mov	r7, r2
 8006c8e:	690a      	ldr	r2, [r1, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	bfa8      	it	ge
 8006c96:	463b      	movge	r3, r7
 8006c98:	4689      	mov	r9, r1
 8006c9a:	bfa4      	itt	ge
 8006c9c:	460f      	movge	r7, r1
 8006c9e:	4699      	movge	r9, r3
 8006ca0:	693d      	ldr	r5, [r7, #16]
 8006ca2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	eb05 060a 	add.w	r6, r5, sl
 8006cae:	42b3      	cmp	r3, r6
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	bfb8      	it	lt
 8006cb4:	3101      	addlt	r1, #1
 8006cb6:	f7ff fe93 	bl	80069e0 <_Balloc>
 8006cba:	b930      	cbnz	r0, 8006cca <__multiply+0x42>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	4b41      	ldr	r3, [pc, #260]	@ (8006dc4 <__multiply+0x13c>)
 8006cc0:	4841      	ldr	r0, [pc, #260]	@ (8006dc8 <__multiply+0x140>)
 8006cc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006cc6:	f001 fde7 	bl	8008898 <__assert_func>
 8006cca:	f100 0414 	add.w	r4, r0, #20
 8006cce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4573      	cmp	r3, lr
 8006cd8:	d320      	bcc.n	8006d1c <__multiply+0x94>
 8006cda:	f107 0814 	add.w	r8, r7, #20
 8006cde:	f109 0114 	add.w	r1, r9, #20
 8006ce2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006ce6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006cea:	9302      	str	r3, [sp, #8]
 8006cec:	1beb      	subs	r3, r5, r7
 8006cee:	3b15      	subs	r3, #21
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	3715      	adds	r7, #21
 8006cf8:	42bd      	cmp	r5, r7
 8006cfa:	bf38      	it	cc
 8006cfc:	2304      	movcc	r3, #4
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	9103      	str	r1, [sp, #12]
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d80c      	bhi.n	8006d22 <__multiply+0x9a>
 8006d08:	2e00      	cmp	r6, #0
 8006d0a:	dd03      	ble.n	8006d14 <__multiply+0x8c>
 8006d0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d055      	beq.n	8006dc0 <__multiply+0x138>
 8006d14:	6106      	str	r6, [r0, #16]
 8006d16:	b005      	add	sp, #20
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	f843 2b04 	str.w	r2, [r3], #4
 8006d20:	e7d9      	b.n	8006cd6 <__multiply+0x4e>
 8006d22:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d26:	f1ba 0f00 	cmp.w	sl, #0
 8006d2a:	d01f      	beq.n	8006d6c <__multiply+0xe4>
 8006d2c:	46c4      	mov	ip, r8
 8006d2e:	46a1      	mov	r9, r4
 8006d30:	2700      	movs	r7, #0
 8006d32:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d36:	f8d9 3000 	ldr.w	r3, [r9]
 8006d3a:	fa1f fb82 	uxth.w	fp, r2
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d44:	443b      	add	r3, r7
 8006d46:	f8d9 7000 	ldr.w	r7, [r9]
 8006d4a:	0c12      	lsrs	r2, r2, #16
 8006d4c:	0c3f      	lsrs	r7, r7, #16
 8006d4e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006d52:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d5c:	4565      	cmp	r5, ip
 8006d5e:	f849 3b04 	str.w	r3, [r9], #4
 8006d62:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006d66:	d8e4      	bhi.n	8006d32 <__multiply+0xaa>
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	50e7      	str	r7, [r4, r3]
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d72:	3104      	adds	r1, #4
 8006d74:	f1b9 0f00 	cmp.w	r9, #0
 8006d78:	d020      	beq.n	8006dbc <__multiply+0x134>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	4647      	mov	r7, r8
 8006d7e:	46a4      	mov	ip, r4
 8006d80:	f04f 0a00 	mov.w	sl, #0
 8006d84:	f8b7 b000 	ldrh.w	fp, [r7]
 8006d88:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006d8c:	fb09 220b 	mla	r2, r9, fp, r2
 8006d90:	4452      	add	r2, sl
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d98:	f84c 3b04 	str.w	r3, [ip], #4
 8006d9c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006da0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006da4:	f8bc 3000 	ldrh.w	r3, [ip]
 8006da8:	fb09 330a 	mla	r3, r9, sl, r3
 8006dac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006db0:	42bd      	cmp	r5, r7
 8006db2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006db6:	d8e5      	bhi.n	8006d84 <__multiply+0xfc>
 8006db8:	9a01      	ldr	r2, [sp, #4]
 8006dba:	50a3      	str	r3, [r4, r2]
 8006dbc:	3404      	adds	r4, #4
 8006dbe:	e79f      	b.n	8006d00 <__multiply+0x78>
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	e7a1      	b.n	8006d08 <__multiply+0x80>
 8006dc4:	08009301 	.word	0x08009301
 8006dc8:	08009312 	.word	0x08009312

08006dcc <__pow5mult>:
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	4615      	mov	r5, r2
 8006dd2:	f012 0203 	ands.w	r2, r2, #3
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	460e      	mov	r6, r1
 8006dda:	d007      	beq.n	8006dec <__pow5mult+0x20>
 8006ddc:	4c25      	ldr	r4, [pc, #148]	@ (8006e74 <__pow5mult+0xa8>)
 8006dde:	3a01      	subs	r2, #1
 8006de0:	2300      	movs	r3, #0
 8006de2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006de6:	f7ff fe5d 	bl	8006aa4 <__multadd>
 8006dea:	4606      	mov	r6, r0
 8006dec:	10ad      	asrs	r5, r5, #2
 8006dee:	d03d      	beq.n	8006e6c <__pow5mult+0xa0>
 8006df0:	69fc      	ldr	r4, [r7, #28]
 8006df2:	b97c      	cbnz	r4, 8006e14 <__pow5mult+0x48>
 8006df4:	2010      	movs	r0, #16
 8006df6:	f7ff fd3d 	bl	8006874 <malloc>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	61f8      	str	r0, [r7, #28]
 8006dfe:	b928      	cbnz	r0, 8006e0c <__pow5mult+0x40>
 8006e00:	4b1d      	ldr	r3, [pc, #116]	@ (8006e78 <__pow5mult+0xac>)
 8006e02:	481e      	ldr	r0, [pc, #120]	@ (8006e7c <__pow5mult+0xb0>)
 8006e04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e08:	f001 fd46 	bl	8008898 <__assert_func>
 8006e0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e10:	6004      	str	r4, [r0, #0]
 8006e12:	60c4      	str	r4, [r0, #12]
 8006e14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e1c:	b94c      	cbnz	r4, 8006e32 <__pow5mult+0x66>
 8006e1e:	f240 2171 	movw	r1, #625	@ 0x271
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff ff1a 	bl	8006c5c <__i2b>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e2e:	4604      	mov	r4, r0
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	f04f 0900 	mov.w	r9, #0
 8006e36:	07eb      	lsls	r3, r5, #31
 8006e38:	d50a      	bpl.n	8006e50 <__pow5mult+0x84>
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f7ff ff22 	bl	8006c88 <__multiply>
 8006e44:	4631      	mov	r1, r6
 8006e46:	4680      	mov	r8, r0
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f7ff fe09 	bl	8006a60 <_Bfree>
 8006e4e:	4646      	mov	r6, r8
 8006e50:	106d      	asrs	r5, r5, #1
 8006e52:	d00b      	beq.n	8006e6c <__pow5mult+0xa0>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	b938      	cbnz	r0, 8006e68 <__pow5mult+0x9c>
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	f7ff ff13 	bl	8006c88 <__multiply>
 8006e62:	6020      	str	r0, [r4, #0]
 8006e64:	f8c0 9000 	str.w	r9, [r0]
 8006e68:	4604      	mov	r4, r0
 8006e6a:	e7e4      	b.n	8006e36 <__pow5mult+0x6a>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e72:	bf00      	nop
 8006e74:	08009424 	.word	0x08009424
 8006e78:	08009292 	.word	0x08009292
 8006e7c:	08009312 	.word	0x08009312

08006e80 <__lshift>:
 8006e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	460c      	mov	r4, r1
 8006e86:	6849      	ldr	r1, [r1, #4]
 8006e88:	6923      	ldr	r3, [r4, #16]
 8006e8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	4607      	mov	r7, r0
 8006e92:	4691      	mov	r9, r2
 8006e94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e98:	f108 0601 	add.w	r6, r8, #1
 8006e9c:	42b3      	cmp	r3, r6
 8006e9e:	db0b      	blt.n	8006eb8 <__lshift+0x38>
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7ff fd9d 	bl	80069e0 <_Balloc>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b948      	cbnz	r0, 8006ebe <__lshift+0x3e>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b28      	ldr	r3, [pc, #160]	@ (8006f50 <__lshift+0xd0>)
 8006eae:	4829      	ldr	r0, [pc, #164]	@ (8006f54 <__lshift+0xd4>)
 8006eb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006eb4:	f001 fcf0 	bl	8008898 <__assert_func>
 8006eb8:	3101      	adds	r1, #1
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	e7ee      	b.n	8006e9c <__lshift+0x1c>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f100 0114 	add.w	r1, r0, #20
 8006ec4:	f100 0210 	add.w	r2, r0, #16
 8006ec8:	4618      	mov	r0, r3
 8006eca:	4553      	cmp	r3, sl
 8006ecc:	db33      	blt.n	8006f36 <__lshift+0xb6>
 8006ece:	6920      	ldr	r0, [r4, #16]
 8006ed0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ed4:	f104 0314 	add.w	r3, r4, #20
 8006ed8:	f019 091f 	ands.w	r9, r9, #31
 8006edc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ee0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ee4:	d02b      	beq.n	8006f3e <__lshift+0xbe>
 8006ee6:	f1c9 0e20 	rsb	lr, r9, #32
 8006eea:	468a      	mov	sl, r1
 8006eec:	2200      	movs	r2, #0
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ef4:	4310      	orrs	r0, r2
 8006ef6:	f84a 0b04 	str.w	r0, [sl], #4
 8006efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006efe:	459c      	cmp	ip, r3
 8006f00:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f04:	d8f3      	bhi.n	8006eee <__lshift+0x6e>
 8006f06:	ebac 0304 	sub.w	r3, ip, r4
 8006f0a:	3b15      	subs	r3, #21
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	3304      	adds	r3, #4
 8006f12:	f104 0015 	add.w	r0, r4, #21
 8006f16:	4560      	cmp	r0, ip
 8006f18:	bf88      	it	hi
 8006f1a:	2304      	movhi	r3, #4
 8006f1c:	50ca      	str	r2, [r1, r3]
 8006f1e:	b10a      	cbz	r2, 8006f24 <__lshift+0xa4>
 8006f20:	f108 0602 	add.w	r6, r8, #2
 8006f24:	3e01      	subs	r6, #1
 8006f26:	4638      	mov	r0, r7
 8006f28:	612e      	str	r6, [r5, #16]
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	f7ff fd98 	bl	8006a60 <_Bfree>
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f36:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	e7c5      	b.n	8006eca <__lshift+0x4a>
 8006f3e:	3904      	subs	r1, #4
 8006f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f44:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f48:	459c      	cmp	ip, r3
 8006f4a:	d8f9      	bhi.n	8006f40 <__lshift+0xc0>
 8006f4c:	e7ea      	b.n	8006f24 <__lshift+0xa4>
 8006f4e:	bf00      	nop
 8006f50:	08009301 	.word	0x08009301
 8006f54:	08009312 	.word	0x08009312

08006f58 <__mcmp>:
 8006f58:	690a      	ldr	r2, [r1, #16]
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6900      	ldr	r0, [r0, #16]
 8006f5e:	1a80      	subs	r0, r0, r2
 8006f60:	b530      	push	{r4, r5, lr}
 8006f62:	d10e      	bne.n	8006f82 <__mcmp+0x2a>
 8006f64:	3314      	adds	r3, #20
 8006f66:	3114      	adds	r1, #20
 8006f68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f78:	4295      	cmp	r5, r2
 8006f7a:	d003      	beq.n	8006f84 <__mcmp+0x2c>
 8006f7c:	d205      	bcs.n	8006f8a <__mcmp+0x32>
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f82:	bd30      	pop	{r4, r5, pc}
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	d3f3      	bcc.n	8006f70 <__mcmp+0x18>
 8006f88:	e7fb      	b.n	8006f82 <__mcmp+0x2a>
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	e7f9      	b.n	8006f82 <__mcmp+0x2a>
	...

08006f90 <__mdiff>:
 8006f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	4689      	mov	r9, r1
 8006f96:	4606      	mov	r6, r0
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4648      	mov	r0, r9
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	f7ff ffdb 	bl	8006f58 <__mcmp>
 8006fa2:	1e05      	subs	r5, r0, #0
 8006fa4:	d112      	bne.n	8006fcc <__mdiff+0x3c>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff fd19 	bl	80069e0 <_Balloc>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	b928      	cbnz	r0, 8006fbe <__mdiff+0x2e>
 8006fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80070b0 <__mdiff+0x120>)
 8006fb4:	f240 2137 	movw	r1, #567	@ 0x237
 8006fb8:	483e      	ldr	r0, [pc, #248]	@ (80070b4 <__mdiff+0x124>)
 8006fba:	f001 fc6d 	bl	8008898 <__assert_func>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	b003      	add	sp, #12
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	bfbc      	itt	lt
 8006fce:	464b      	movlt	r3, r9
 8006fd0:	46a1      	movlt	r9, r4
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fd8:	bfba      	itte	lt
 8006fda:	461c      	movlt	r4, r3
 8006fdc:	2501      	movlt	r5, #1
 8006fde:	2500      	movge	r5, #0
 8006fe0:	f7ff fcfe 	bl	80069e0 <_Balloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	b918      	cbnz	r0, 8006ff0 <__mdiff+0x60>
 8006fe8:	4b31      	ldr	r3, [pc, #196]	@ (80070b0 <__mdiff+0x120>)
 8006fea:	f240 2145 	movw	r1, #581	@ 0x245
 8006fee:	e7e3      	b.n	8006fb8 <__mdiff+0x28>
 8006ff0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ff4:	6926      	ldr	r6, [r4, #16]
 8006ff6:	60c5      	str	r5, [r0, #12]
 8006ff8:	f109 0310 	add.w	r3, r9, #16
 8006ffc:	f109 0514 	add.w	r5, r9, #20
 8007000:	f104 0e14 	add.w	lr, r4, #20
 8007004:	f100 0b14 	add.w	fp, r0, #20
 8007008:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800700c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	46d9      	mov	r9, fp
 8007014:	f04f 0c00 	mov.w	ip, #0
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800701e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	fa1f f38a 	uxth.w	r3, sl
 8007028:	4619      	mov	r1, r3
 800702a:	b283      	uxth	r3, r0
 800702c:	1acb      	subs	r3, r1, r3
 800702e:	0c00      	lsrs	r0, r0, #16
 8007030:	4463      	add	r3, ip
 8007032:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007036:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007040:	4576      	cmp	r6, lr
 8007042:	f849 3b04 	str.w	r3, [r9], #4
 8007046:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800704a:	d8e5      	bhi.n	8007018 <__mdiff+0x88>
 800704c:	1b33      	subs	r3, r6, r4
 800704e:	3b15      	subs	r3, #21
 8007050:	f023 0303 	bic.w	r3, r3, #3
 8007054:	3415      	adds	r4, #21
 8007056:	3304      	adds	r3, #4
 8007058:	42a6      	cmp	r6, r4
 800705a:	bf38      	it	cc
 800705c:	2304      	movcc	r3, #4
 800705e:	441d      	add	r5, r3
 8007060:	445b      	add	r3, fp
 8007062:	461e      	mov	r6, r3
 8007064:	462c      	mov	r4, r5
 8007066:	4544      	cmp	r4, r8
 8007068:	d30e      	bcc.n	8007088 <__mdiff+0xf8>
 800706a:	f108 0103 	add.w	r1, r8, #3
 800706e:	1b49      	subs	r1, r1, r5
 8007070:	f021 0103 	bic.w	r1, r1, #3
 8007074:	3d03      	subs	r5, #3
 8007076:	45a8      	cmp	r8, r5
 8007078:	bf38      	it	cc
 800707a:	2100      	movcc	r1, #0
 800707c:	440b      	add	r3, r1
 800707e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007082:	b191      	cbz	r1, 80070aa <__mdiff+0x11a>
 8007084:	6117      	str	r7, [r2, #16]
 8007086:	e79d      	b.n	8006fc4 <__mdiff+0x34>
 8007088:	f854 1b04 	ldr.w	r1, [r4], #4
 800708c:	46e6      	mov	lr, ip
 800708e:	0c08      	lsrs	r0, r1, #16
 8007090:	fa1c fc81 	uxtah	ip, ip, r1
 8007094:	4471      	add	r1, lr
 8007096:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800709a:	b289      	uxth	r1, r1
 800709c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070a0:	f846 1b04 	str.w	r1, [r6], #4
 80070a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070a8:	e7dd      	b.n	8007066 <__mdiff+0xd6>
 80070aa:	3f01      	subs	r7, #1
 80070ac:	e7e7      	b.n	800707e <__mdiff+0xee>
 80070ae:	bf00      	nop
 80070b0:	08009301 	.word	0x08009301
 80070b4:	08009312 	.word	0x08009312

080070b8 <__ulp>:
 80070b8:	b082      	sub	sp, #8
 80070ba:	ed8d 0b00 	vstr	d0, [sp]
 80070be:	9a01      	ldr	r2, [sp, #4]
 80070c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007100 <__ulp+0x48>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	dc08      	bgt.n	80070de <__ulp+0x26>
 80070cc:	425b      	negs	r3, r3
 80070ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80070d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070d6:	da04      	bge.n	80070e2 <__ulp+0x2a>
 80070d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80070dc:	4113      	asrs	r3, r2
 80070de:	2200      	movs	r2, #0
 80070e0:	e008      	b.n	80070f4 <__ulp+0x3c>
 80070e2:	f1a2 0314 	sub.w	r3, r2, #20
 80070e6:	2b1e      	cmp	r3, #30
 80070e8:	bfda      	itte	le
 80070ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80070ee:	40da      	lsrle	r2, r3
 80070f0:	2201      	movgt	r2, #1
 80070f2:	2300      	movs	r3, #0
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	ec41 0b10 	vmov	d0, r0, r1
 80070fc:	b002      	add	sp, #8
 80070fe:	4770      	bx	lr
 8007100:	7ff00000 	.word	0x7ff00000

08007104 <__b2d>:
 8007104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007108:	6906      	ldr	r6, [r0, #16]
 800710a:	f100 0814 	add.w	r8, r0, #20
 800710e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007112:	1f37      	subs	r7, r6, #4
 8007114:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007118:	4610      	mov	r0, r2
 800711a:	f7ff fd53 	bl	8006bc4 <__hi0bits>
 800711e:	f1c0 0320 	rsb	r3, r0, #32
 8007122:	280a      	cmp	r0, #10
 8007124:	600b      	str	r3, [r1, #0]
 8007126:	491b      	ldr	r1, [pc, #108]	@ (8007194 <__b2d+0x90>)
 8007128:	dc15      	bgt.n	8007156 <__b2d+0x52>
 800712a:	f1c0 0c0b 	rsb	ip, r0, #11
 800712e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007132:	45b8      	cmp	r8, r7
 8007134:	ea43 0501 	orr.w	r5, r3, r1
 8007138:	bf34      	ite	cc
 800713a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800713e:	2300      	movcs	r3, #0
 8007140:	3015      	adds	r0, #21
 8007142:	fa02 f000 	lsl.w	r0, r2, r0
 8007146:	fa23 f30c 	lsr.w	r3, r3, ip
 800714a:	4303      	orrs	r3, r0
 800714c:	461c      	mov	r4, r3
 800714e:	ec45 4b10 	vmov	d0, r4, r5
 8007152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007156:	45b8      	cmp	r8, r7
 8007158:	bf3a      	itte	cc
 800715a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800715e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007162:	2300      	movcs	r3, #0
 8007164:	380b      	subs	r0, #11
 8007166:	d012      	beq.n	800718e <__b2d+0x8a>
 8007168:	f1c0 0120 	rsb	r1, r0, #32
 800716c:	fa23 f401 	lsr.w	r4, r3, r1
 8007170:	4082      	lsls	r2, r0
 8007172:	4322      	orrs	r2, r4
 8007174:	4547      	cmp	r7, r8
 8007176:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800717a:	bf8c      	ite	hi
 800717c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007180:	2200      	movls	r2, #0
 8007182:	4083      	lsls	r3, r0
 8007184:	40ca      	lsrs	r2, r1
 8007186:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800718a:	4313      	orrs	r3, r2
 800718c:	e7de      	b.n	800714c <__b2d+0x48>
 800718e:	ea42 0501 	orr.w	r5, r2, r1
 8007192:	e7db      	b.n	800714c <__b2d+0x48>
 8007194:	3ff00000 	.word	0x3ff00000

08007198 <__d2b>:
 8007198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800719c:	460f      	mov	r7, r1
 800719e:	2101      	movs	r1, #1
 80071a0:	ec59 8b10 	vmov	r8, r9, d0
 80071a4:	4616      	mov	r6, r2
 80071a6:	f7ff fc1b 	bl	80069e0 <_Balloc>
 80071aa:	4604      	mov	r4, r0
 80071ac:	b930      	cbnz	r0, 80071bc <__d2b+0x24>
 80071ae:	4602      	mov	r2, r0
 80071b0:	4b23      	ldr	r3, [pc, #140]	@ (8007240 <__d2b+0xa8>)
 80071b2:	4824      	ldr	r0, [pc, #144]	@ (8007244 <__d2b+0xac>)
 80071b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80071b8:	f001 fb6e 	bl	8008898 <__assert_func>
 80071bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071c4:	b10d      	cbz	r5, 80071ca <__d2b+0x32>
 80071c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	f1b8 0300 	subs.w	r3, r8, #0
 80071d0:	d023      	beq.n	800721a <__d2b+0x82>
 80071d2:	4668      	mov	r0, sp
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	f7ff fd14 	bl	8006c02 <__lo0bits>
 80071da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071de:	b1d0      	cbz	r0, 8007216 <__d2b+0x7e>
 80071e0:	f1c0 0320 	rsb	r3, r0, #32
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	430b      	orrs	r3, r1
 80071ea:	40c2      	lsrs	r2, r0
 80071ec:	6163      	str	r3, [r4, #20]
 80071ee:	9201      	str	r2, [sp, #4]
 80071f0:	9b01      	ldr	r3, [sp, #4]
 80071f2:	61a3      	str	r3, [r4, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bf0c      	ite	eq
 80071f8:	2201      	moveq	r2, #1
 80071fa:	2202      	movne	r2, #2
 80071fc:	6122      	str	r2, [r4, #16]
 80071fe:	b1a5      	cbz	r5, 800722a <__d2b+0x92>
 8007200:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007204:	4405      	add	r5, r0
 8007206:	603d      	str	r5, [r7, #0]
 8007208:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800720c:	6030      	str	r0, [r6, #0]
 800720e:	4620      	mov	r0, r4
 8007210:	b003      	add	sp, #12
 8007212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007216:	6161      	str	r1, [r4, #20]
 8007218:	e7ea      	b.n	80071f0 <__d2b+0x58>
 800721a:	a801      	add	r0, sp, #4
 800721c:	f7ff fcf1 	bl	8006c02 <__lo0bits>
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	6163      	str	r3, [r4, #20]
 8007224:	3020      	adds	r0, #32
 8007226:	2201      	movs	r2, #1
 8007228:	e7e8      	b.n	80071fc <__d2b+0x64>
 800722a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800722e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007232:	6038      	str	r0, [r7, #0]
 8007234:	6918      	ldr	r0, [r3, #16]
 8007236:	f7ff fcc5 	bl	8006bc4 <__hi0bits>
 800723a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800723e:	e7e5      	b.n	800720c <__d2b+0x74>
 8007240:	08009301 	.word	0x08009301
 8007244:	08009312 	.word	0x08009312

08007248 <__ratio>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	b085      	sub	sp, #20
 800724e:	e9cd 1000 	strd	r1, r0, [sp]
 8007252:	a902      	add	r1, sp, #8
 8007254:	f7ff ff56 	bl	8007104 <__b2d>
 8007258:	9800      	ldr	r0, [sp, #0]
 800725a:	a903      	add	r1, sp, #12
 800725c:	ec55 4b10 	vmov	r4, r5, d0
 8007260:	f7ff ff50 	bl	8007104 <__b2d>
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	6919      	ldr	r1, [r3, #16]
 8007268:	9b00      	ldr	r3, [sp, #0]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	1ac9      	subs	r1, r1, r3
 800726e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	ec5b ab10 	vmov	sl, fp, d0
 8007278:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800727c:	2b00      	cmp	r3, #0
 800727e:	bfce      	itee	gt
 8007280:	462a      	movgt	r2, r5
 8007282:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007286:	465a      	movle	r2, fp
 8007288:	462f      	mov	r7, r5
 800728a:	46d9      	mov	r9, fp
 800728c:	bfcc      	ite	gt
 800728e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007292:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007296:	464b      	mov	r3, r9
 8007298:	4652      	mov	r2, sl
 800729a:	4620      	mov	r0, r4
 800729c:	4639      	mov	r1, r7
 800729e:	f7f9 fad5 	bl	800084c <__aeabi_ddiv>
 80072a2:	ec41 0b10 	vmov	d0, r0, r1
 80072a6:	b005      	add	sp, #20
 80072a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072ac <__copybits>:
 80072ac:	3901      	subs	r1, #1
 80072ae:	b570      	push	{r4, r5, r6, lr}
 80072b0:	1149      	asrs	r1, r1, #5
 80072b2:	6914      	ldr	r4, [r2, #16]
 80072b4:	3101      	adds	r1, #1
 80072b6:	f102 0314 	add.w	r3, r2, #20
 80072ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80072be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80072c2:	1f05      	subs	r5, r0, #4
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	d30c      	bcc.n	80072e2 <__copybits+0x36>
 80072c8:	1aa3      	subs	r3, r4, r2
 80072ca:	3b11      	subs	r3, #17
 80072cc:	f023 0303 	bic.w	r3, r3, #3
 80072d0:	3211      	adds	r2, #17
 80072d2:	42a2      	cmp	r2, r4
 80072d4:	bf88      	it	hi
 80072d6:	2300      	movhi	r3, #0
 80072d8:	4418      	add	r0, r3
 80072da:	2300      	movs	r3, #0
 80072dc:	4288      	cmp	r0, r1
 80072de:	d305      	bcc.n	80072ec <__copybits+0x40>
 80072e0:	bd70      	pop	{r4, r5, r6, pc}
 80072e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80072e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80072ea:	e7eb      	b.n	80072c4 <__copybits+0x18>
 80072ec:	f840 3b04 	str.w	r3, [r0], #4
 80072f0:	e7f4      	b.n	80072dc <__copybits+0x30>

080072f2 <__any_on>:
 80072f2:	f100 0214 	add.w	r2, r0, #20
 80072f6:	6900      	ldr	r0, [r0, #16]
 80072f8:	114b      	asrs	r3, r1, #5
 80072fa:	4298      	cmp	r0, r3
 80072fc:	b510      	push	{r4, lr}
 80072fe:	db11      	blt.n	8007324 <__any_on+0x32>
 8007300:	dd0a      	ble.n	8007318 <__any_on+0x26>
 8007302:	f011 011f 	ands.w	r1, r1, #31
 8007306:	d007      	beq.n	8007318 <__any_on+0x26>
 8007308:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800730c:	fa24 f001 	lsr.w	r0, r4, r1
 8007310:	fa00 f101 	lsl.w	r1, r0, r1
 8007314:	428c      	cmp	r4, r1
 8007316:	d10b      	bne.n	8007330 <__any_on+0x3e>
 8007318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800731c:	4293      	cmp	r3, r2
 800731e:	d803      	bhi.n	8007328 <__any_on+0x36>
 8007320:	2000      	movs	r0, #0
 8007322:	bd10      	pop	{r4, pc}
 8007324:	4603      	mov	r3, r0
 8007326:	e7f7      	b.n	8007318 <__any_on+0x26>
 8007328:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800732c:	2900      	cmp	r1, #0
 800732e:	d0f5      	beq.n	800731c <__any_on+0x2a>
 8007330:	2001      	movs	r0, #1
 8007332:	e7f6      	b.n	8007322 <__any_on+0x30>

08007334 <sulp>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4604      	mov	r4, r0
 8007338:	460d      	mov	r5, r1
 800733a:	ec45 4b10 	vmov	d0, r4, r5
 800733e:	4616      	mov	r6, r2
 8007340:	f7ff feba 	bl	80070b8 <__ulp>
 8007344:	ec51 0b10 	vmov	r0, r1, d0
 8007348:	b17e      	cbz	r6, 800736a <sulp+0x36>
 800734a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800734e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd09      	ble.n	800736a <sulp+0x36>
 8007356:	051b      	lsls	r3, r3, #20
 8007358:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800735c:	2400      	movs	r4, #0
 800735e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007362:	4622      	mov	r2, r4
 8007364:	462b      	mov	r3, r5
 8007366:	f7f9 f947 	bl	80005f8 <__aeabi_dmul>
 800736a:	ec41 0b10 	vmov	d0, r0, r1
 800736e:	bd70      	pop	{r4, r5, r6, pc}

08007370 <_strtod_l>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	b09f      	sub	sp, #124	@ 0x7c
 8007376:	460c      	mov	r4, r1
 8007378:	9217      	str	r2, [sp, #92]	@ 0x5c
 800737a:	2200      	movs	r2, #0
 800737c:	921a      	str	r2, [sp, #104]	@ 0x68
 800737e:	9005      	str	r0, [sp, #20]
 8007380:	f04f 0a00 	mov.w	sl, #0
 8007384:	f04f 0b00 	mov.w	fp, #0
 8007388:	460a      	mov	r2, r1
 800738a:	9219      	str	r2, [sp, #100]	@ 0x64
 800738c:	7811      	ldrb	r1, [r2, #0]
 800738e:	292b      	cmp	r1, #43	@ 0x2b
 8007390:	d04a      	beq.n	8007428 <_strtod_l+0xb8>
 8007392:	d838      	bhi.n	8007406 <_strtod_l+0x96>
 8007394:	290d      	cmp	r1, #13
 8007396:	d832      	bhi.n	80073fe <_strtod_l+0x8e>
 8007398:	2908      	cmp	r1, #8
 800739a:	d832      	bhi.n	8007402 <_strtod_l+0x92>
 800739c:	2900      	cmp	r1, #0
 800739e:	d03b      	beq.n	8007418 <_strtod_l+0xa8>
 80073a0:	2200      	movs	r2, #0
 80073a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80073a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80073a6:	782a      	ldrb	r2, [r5, #0]
 80073a8:	2a30      	cmp	r2, #48	@ 0x30
 80073aa:	f040 80b2 	bne.w	8007512 <_strtod_l+0x1a2>
 80073ae:	786a      	ldrb	r2, [r5, #1]
 80073b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073b4:	2a58      	cmp	r2, #88	@ 0x58
 80073b6:	d16e      	bne.n	8007496 <_strtod_l+0x126>
 80073b8:	9302      	str	r3, [sp, #8]
 80073ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	ab1a      	add	r3, sp, #104	@ 0x68
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	4a8f      	ldr	r2, [pc, #572]	@ (8007600 <_strtod_l+0x290>)
 80073c4:	9805      	ldr	r0, [sp, #20]
 80073c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073c8:	a919      	add	r1, sp, #100	@ 0x64
 80073ca:	f001 faff 	bl	80089cc <__gethex>
 80073ce:	f010 060f 	ands.w	r6, r0, #15
 80073d2:	4604      	mov	r4, r0
 80073d4:	d005      	beq.n	80073e2 <_strtod_l+0x72>
 80073d6:	2e06      	cmp	r6, #6
 80073d8:	d128      	bne.n	800742c <_strtod_l+0xbc>
 80073da:	3501      	adds	r5, #1
 80073dc:	2300      	movs	r3, #0
 80073de:	9519      	str	r5, [sp, #100]	@ 0x64
 80073e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80073e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f040 858e 	bne.w	8007f06 <_strtod_l+0xb96>
 80073ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ec:	b1cb      	cbz	r3, 8007422 <_strtod_l+0xb2>
 80073ee:	4652      	mov	r2, sl
 80073f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80073f4:	ec43 2b10 	vmov	d0, r2, r3
 80073f8:	b01f      	add	sp, #124	@ 0x7c
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	2920      	cmp	r1, #32
 8007400:	d1ce      	bne.n	80073a0 <_strtod_l+0x30>
 8007402:	3201      	adds	r2, #1
 8007404:	e7c1      	b.n	800738a <_strtod_l+0x1a>
 8007406:	292d      	cmp	r1, #45	@ 0x2d
 8007408:	d1ca      	bne.n	80073a0 <_strtod_l+0x30>
 800740a:	2101      	movs	r1, #1
 800740c:	910e      	str	r1, [sp, #56]	@ 0x38
 800740e:	1c51      	adds	r1, r2, #1
 8007410:	9119      	str	r1, [sp, #100]	@ 0x64
 8007412:	7852      	ldrb	r2, [r2, #1]
 8007414:	2a00      	cmp	r2, #0
 8007416:	d1c5      	bne.n	80073a4 <_strtod_l+0x34>
 8007418:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800741a:	9419      	str	r4, [sp, #100]	@ 0x64
 800741c:	2b00      	cmp	r3, #0
 800741e:	f040 8570 	bne.w	8007f02 <_strtod_l+0xb92>
 8007422:	4652      	mov	r2, sl
 8007424:	465b      	mov	r3, fp
 8007426:	e7e5      	b.n	80073f4 <_strtod_l+0x84>
 8007428:	2100      	movs	r1, #0
 800742a:	e7ef      	b.n	800740c <_strtod_l+0x9c>
 800742c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800742e:	b13a      	cbz	r2, 8007440 <_strtod_l+0xd0>
 8007430:	2135      	movs	r1, #53	@ 0x35
 8007432:	a81c      	add	r0, sp, #112	@ 0x70
 8007434:	f7ff ff3a 	bl	80072ac <__copybits>
 8007438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800743a:	9805      	ldr	r0, [sp, #20]
 800743c:	f7ff fb10 	bl	8006a60 <_Bfree>
 8007440:	3e01      	subs	r6, #1
 8007442:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007444:	2e04      	cmp	r6, #4
 8007446:	d806      	bhi.n	8007456 <_strtod_l+0xe6>
 8007448:	e8df f006 	tbb	[pc, r6]
 800744c:	201d0314 	.word	0x201d0314
 8007450:	14          	.byte	0x14
 8007451:	00          	.byte	0x00
 8007452:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007456:	05e1      	lsls	r1, r4, #23
 8007458:	bf48      	it	mi
 800745a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800745e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007462:	0d1b      	lsrs	r3, r3, #20
 8007464:	051b      	lsls	r3, r3, #20
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1bb      	bne.n	80073e2 <_strtod_l+0x72>
 800746a:	f7fe fb2d 	bl	8005ac8 <__errno>
 800746e:	2322      	movs	r3, #34	@ 0x22
 8007470:	6003      	str	r3, [r0, #0]
 8007472:	e7b6      	b.n	80073e2 <_strtod_l+0x72>
 8007474:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007478:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800747c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007480:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007484:	e7e7      	b.n	8007456 <_strtod_l+0xe6>
 8007486:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007608 <_strtod_l+0x298>
 800748a:	e7e4      	b.n	8007456 <_strtod_l+0xe6>
 800748c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007490:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007494:	e7df      	b.n	8007456 <_strtod_l+0xe6>
 8007496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	9219      	str	r2, [sp, #100]	@ 0x64
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b30      	cmp	r3, #48	@ 0x30
 80074a0:	d0f9      	beq.n	8007496 <_strtod_l+0x126>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d09d      	beq.n	80073e2 <_strtod_l+0x72>
 80074a6:	2301      	movs	r3, #1
 80074a8:	2700      	movs	r7, #0
 80074aa:	9308      	str	r3, [sp, #32]
 80074ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80074b0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80074b2:	46b9      	mov	r9, r7
 80074b4:	220a      	movs	r2, #10
 80074b6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80074b8:	7805      	ldrb	r5, [r0, #0]
 80074ba:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80074be:	b2d9      	uxtb	r1, r3
 80074c0:	2909      	cmp	r1, #9
 80074c2:	d928      	bls.n	8007516 <_strtod_l+0x1a6>
 80074c4:	494f      	ldr	r1, [pc, #316]	@ (8007604 <_strtod_l+0x294>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	f001 f9ac 	bl	8008824 <strncmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d032      	beq.n	8007536 <_strtod_l+0x1c6>
 80074d0:	2000      	movs	r0, #0
 80074d2:	462a      	mov	r2, r5
 80074d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80074d6:	464d      	mov	r5, r9
 80074d8:	4603      	mov	r3, r0
 80074da:	2a65      	cmp	r2, #101	@ 0x65
 80074dc:	d001      	beq.n	80074e2 <_strtod_l+0x172>
 80074de:	2a45      	cmp	r2, #69	@ 0x45
 80074e0:	d114      	bne.n	800750c <_strtod_l+0x19c>
 80074e2:	b91d      	cbnz	r5, 80074ec <_strtod_l+0x17c>
 80074e4:	9a08      	ldr	r2, [sp, #32]
 80074e6:	4302      	orrs	r2, r0
 80074e8:	d096      	beq.n	8007418 <_strtod_l+0xa8>
 80074ea:	2500      	movs	r5, #0
 80074ec:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80074ee:	1c62      	adds	r2, r4, #1
 80074f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80074f2:	7862      	ldrb	r2, [r4, #1]
 80074f4:	2a2b      	cmp	r2, #43	@ 0x2b
 80074f6:	d07a      	beq.n	80075ee <_strtod_l+0x27e>
 80074f8:	2a2d      	cmp	r2, #45	@ 0x2d
 80074fa:	d07e      	beq.n	80075fa <_strtod_l+0x28a>
 80074fc:	f04f 0c00 	mov.w	ip, #0
 8007500:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007504:	2909      	cmp	r1, #9
 8007506:	f240 8085 	bls.w	8007614 <_strtod_l+0x2a4>
 800750a:	9419      	str	r4, [sp, #100]	@ 0x64
 800750c:	f04f 0800 	mov.w	r8, #0
 8007510:	e0a5      	b.n	800765e <_strtod_l+0x2ee>
 8007512:	2300      	movs	r3, #0
 8007514:	e7c8      	b.n	80074a8 <_strtod_l+0x138>
 8007516:	f1b9 0f08 	cmp.w	r9, #8
 800751a:	bfd8      	it	le
 800751c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800751e:	f100 0001 	add.w	r0, r0, #1
 8007522:	bfda      	itte	le
 8007524:	fb02 3301 	mlale	r3, r2, r1, r3
 8007528:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800752a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800752e:	f109 0901 	add.w	r9, r9, #1
 8007532:	9019      	str	r0, [sp, #100]	@ 0x64
 8007534:	e7bf      	b.n	80074b6 <_strtod_l+0x146>
 8007536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	9219      	str	r2, [sp, #100]	@ 0x64
 800753c:	785a      	ldrb	r2, [r3, #1]
 800753e:	f1b9 0f00 	cmp.w	r9, #0
 8007542:	d03b      	beq.n	80075bc <_strtod_l+0x24c>
 8007544:	900a      	str	r0, [sp, #40]	@ 0x28
 8007546:	464d      	mov	r5, r9
 8007548:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800754c:	2b09      	cmp	r3, #9
 800754e:	d912      	bls.n	8007576 <_strtod_l+0x206>
 8007550:	2301      	movs	r3, #1
 8007552:	e7c2      	b.n	80074da <_strtod_l+0x16a>
 8007554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	9219      	str	r2, [sp, #100]	@ 0x64
 800755a:	785a      	ldrb	r2, [r3, #1]
 800755c:	3001      	adds	r0, #1
 800755e:	2a30      	cmp	r2, #48	@ 0x30
 8007560:	d0f8      	beq.n	8007554 <_strtod_l+0x1e4>
 8007562:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007566:	2b08      	cmp	r3, #8
 8007568:	f200 84d2 	bhi.w	8007f10 <_strtod_l+0xba0>
 800756c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800756e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007570:	2000      	movs	r0, #0
 8007572:	930c      	str	r3, [sp, #48]	@ 0x30
 8007574:	4605      	mov	r5, r0
 8007576:	3a30      	subs	r2, #48	@ 0x30
 8007578:	f100 0301 	add.w	r3, r0, #1
 800757c:	d018      	beq.n	80075b0 <_strtod_l+0x240>
 800757e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007580:	4419      	add	r1, r3
 8007582:	910a      	str	r1, [sp, #40]	@ 0x28
 8007584:	462e      	mov	r6, r5
 8007586:	f04f 0e0a 	mov.w	lr, #10
 800758a:	1c71      	adds	r1, r6, #1
 800758c:	eba1 0c05 	sub.w	ip, r1, r5
 8007590:	4563      	cmp	r3, ip
 8007592:	dc15      	bgt.n	80075c0 <_strtod_l+0x250>
 8007594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007598:	182b      	adds	r3, r5, r0
 800759a:	2b08      	cmp	r3, #8
 800759c:	f105 0501 	add.w	r5, r5, #1
 80075a0:	4405      	add	r5, r0
 80075a2:	dc1a      	bgt.n	80075da <_strtod_l+0x26a>
 80075a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075a6:	230a      	movs	r3, #10
 80075a8:	fb03 2301 	mla	r3, r3, r1, r2
 80075ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075ae:	2300      	movs	r3, #0
 80075b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075b2:	1c51      	adds	r1, r2, #1
 80075b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80075b6:	7852      	ldrb	r2, [r2, #1]
 80075b8:	4618      	mov	r0, r3
 80075ba:	e7c5      	b.n	8007548 <_strtod_l+0x1d8>
 80075bc:	4648      	mov	r0, r9
 80075be:	e7ce      	b.n	800755e <_strtod_l+0x1ee>
 80075c0:	2e08      	cmp	r6, #8
 80075c2:	dc05      	bgt.n	80075d0 <_strtod_l+0x260>
 80075c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80075c6:	fb0e f606 	mul.w	r6, lr, r6
 80075ca:	960b      	str	r6, [sp, #44]	@ 0x2c
 80075cc:	460e      	mov	r6, r1
 80075ce:	e7dc      	b.n	800758a <_strtod_l+0x21a>
 80075d0:	2910      	cmp	r1, #16
 80075d2:	bfd8      	it	le
 80075d4:	fb0e f707 	mulle.w	r7, lr, r7
 80075d8:	e7f8      	b.n	80075cc <_strtod_l+0x25c>
 80075da:	2b0f      	cmp	r3, #15
 80075dc:	bfdc      	itt	le
 80075de:	230a      	movle	r3, #10
 80075e0:	fb03 2707 	mlale	r7, r3, r7, r2
 80075e4:	e7e3      	b.n	80075ae <_strtod_l+0x23e>
 80075e6:	2300      	movs	r3, #0
 80075e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ea:	2301      	movs	r3, #1
 80075ec:	e77a      	b.n	80074e4 <_strtod_l+0x174>
 80075ee:	f04f 0c00 	mov.w	ip, #0
 80075f2:	1ca2      	adds	r2, r4, #2
 80075f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80075f6:	78a2      	ldrb	r2, [r4, #2]
 80075f8:	e782      	b.n	8007500 <_strtod_l+0x190>
 80075fa:	f04f 0c01 	mov.w	ip, #1
 80075fe:	e7f8      	b.n	80075f2 <_strtod_l+0x282>
 8007600:	08009534 	.word	0x08009534
 8007604:	0800936b 	.word	0x0800936b
 8007608:	7ff00000 	.word	0x7ff00000
 800760c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800760e:	1c51      	adds	r1, r2, #1
 8007610:	9119      	str	r1, [sp, #100]	@ 0x64
 8007612:	7852      	ldrb	r2, [r2, #1]
 8007614:	2a30      	cmp	r2, #48	@ 0x30
 8007616:	d0f9      	beq.n	800760c <_strtod_l+0x29c>
 8007618:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800761c:	2908      	cmp	r1, #8
 800761e:	f63f af75 	bhi.w	800750c <_strtod_l+0x19c>
 8007622:	3a30      	subs	r2, #48	@ 0x30
 8007624:	9209      	str	r2, [sp, #36]	@ 0x24
 8007626:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007628:	920f      	str	r2, [sp, #60]	@ 0x3c
 800762a:	f04f 080a 	mov.w	r8, #10
 800762e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007630:	1c56      	adds	r6, r2, #1
 8007632:	9619      	str	r6, [sp, #100]	@ 0x64
 8007634:	7852      	ldrb	r2, [r2, #1]
 8007636:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800763a:	f1be 0f09 	cmp.w	lr, #9
 800763e:	d939      	bls.n	80076b4 <_strtod_l+0x344>
 8007640:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007642:	1a76      	subs	r6, r6, r1
 8007644:	2e08      	cmp	r6, #8
 8007646:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800764a:	dc03      	bgt.n	8007654 <_strtod_l+0x2e4>
 800764c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800764e:	4588      	cmp	r8, r1
 8007650:	bfa8      	it	ge
 8007652:	4688      	movge	r8, r1
 8007654:	f1bc 0f00 	cmp.w	ip, #0
 8007658:	d001      	beq.n	800765e <_strtod_l+0x2ee>
 800765a:	f1c8 0800 	rsb	r8, r8, #0
 800765e:	2d00      	cmp	r5, #0
 8007660:	d14e      	bne.n	8007700 <_strtod_l+0x390>
 8007662:	9908      	ldr	r1, [sp, #32]
 8007664:	4308      	orrs	r0, r1
 8007666:	f47f aebc 	bne.w	80073e2 <_strtod_l+0x72>
 800766a:	2b00      	cmp	r3, #0
 800766c:	f47f aed4 	bne.w	8007418 <_strtod_l+0xa8>
 8007670:	2a69      	cmp	r2, #105	@ 0x69
 8007672:	d028      	beq.n	80076c6 <_strtod_l+0x356>
 8007674:	dc25      	bgt.n	80076c2 <_strtod_l+0x352>
 8007676:	2a49      	cmp	r2, #73	@ 0x49
 8007678:	d025      	beq.n	80076c6 <_strtod_l+0x356>
 800767a:	2a4e      	cmp	r2, #78	@ 0x4e
 800767c:	f47f aecc 	bne.w	8007418 <_strtod_l+0xa8>
 8007680:	499a      	ldr	r1, [pc, #616]	@ (80078ec <_strtod_l+0x57c>)
 8007682:	a819      	add	r0, sp, #100	@ 0x64
 8007684:	f001 fbc4 	bl	8008e10 <__match>
 8007688:	2800      	cmp	r0, #0
 800768a:	f43f aec5 	beq.w	8007418 <_strtod_l+0xa8>
 800768e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b28      	cmp	r3, #40	@ 0x28
 8007694:	d12e      	bne.n	80076f4 <_strtod_l+0x384>
 8007696:	4996      	ldr	r1, [pc, #600]	@ (80078f0 <_strtod_l+0x580>)
 8007698:	aa1c      	add	r2, sp, #112	@ 0x70
 800769a:	a819      	add	r0, sp, #100	@ 0x64
 800769c:	f001 fbcc 	bl	8008e38 <__hexnan>
 80076a0:	2805      	cmp	r0, #5
 80076a2:	d127      	bne.n	80076f4 <_strtod_l+0x384>
 80076a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80076a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80076aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80076ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80076b2:	e696      	b.n	80073e2 <_strtod_l+0x72>
 80076b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076b6:	fb08 2101 	mla	r1, r8, r1, r2
 80076ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80076be:	9209      	str	r2, [sp, #36]	@ 0x24
 80076c0:	e7b5      	b.n	800762e <_strtod_l+0x2be>
 80076c2:	2a6e      	cmp	r2, #110	@ 0x6e
 80076c4:	e7da      	b.n	800767c <_strtod_l+0x30c>
 80076c6:	498b      	ldr	r1, [pc, #556]	@ (80078f4 <_strtod_l+0x584>)
 80076c8:	a819      	add	r0, sp, #100	@ 0x64
 80076ca:	f001 fba1 	bl	8008e10 <__match>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f43f aea2 	beq.w	8007418 <_strtod_l+0xa8>
 80076d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076d6:	4988      	ldr	r1, [pc, #544]	@ (80078f8 <_strtod_l+0x588>)
 80076d8:	3b01      	subs	r3, #1
 80076da:	a819      	add	r0, sp, #100	@ 0x64
 80076dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80076de:	f001 fb97 	bl	8008e10 <__match>
 80076e2:	b910      	cbnz	r0, 80076ea <_strtod_l+0x37a>
 80076e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076e6:	3301      	adds	r3, #1
 80076e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80076ea:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007908 <_strtod_l+0x598>
 80076ee:	f04f 0a00 	mov.w	sl, #0
 80076f2:	e676      	b.n	80073e2 <_strtod_l+0x72>
 80076f4:	4881      	ldr	r0, [pc, #516]	@ (80078fc <_strtod_l+0x58c>)
 80076f6:	f001 f8c7 	bl	8008888 <nan>
 80076fa:	ec5b ab10 	vmov	sl, fp, d0
 80076fe:	e670      	b.n	80073e2 <_strtod_l+0x72>
 8007700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007702:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007704:	eba8 0303 	sub.w	r3, r8, r3
 8007708:	f1b9 0f00 	cmp.w	r9, #0
 800770c:	bf08      	it	eq
 800770e:	46a9      	moveq	r9, r5
 8007710:	2d10      	cmp	r5, #16
 8007712:	9309      	str	r3, [sp, #36]	@ 0x24
 8007714:	462c      	mov	r4, r5
 8007716:	bfa8      	it	ge
 8007718:	2410      	movge	r4, #16
 800771a:	f7f8 fef3 	bl	8000504 <__aeabi_ui2d>
 800771e:	2d09      	cmp	r5, #9
 8007720:	4682      	mov	sl, r0
 8007722:	468b      	mov	fp, r1
 8007724:	dc13      	bgt.n	800774e <_strtod_l+0x3de>
 8007726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	f43f ae5a 	beq.w	80073e2 <_strtod_l+0x72>
 800772e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007730:	dd78      	ble.n	8007824 <_strtod_l+0x4b4>
 8007732:	2b16      	cmp	r3, #22
 8007734:	dc5f      	bgt.n	80077f6 <_strtod_l+0x486>
 8007736:	4972      	ldr	r1, [pc, #456]	@ (8007900 <_strtod_l+0x590>)
 8007738:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800773c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007740:	4652      	mov	r2, sl
 8007742:	465b      	mov	r3, fp
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	4682      	mov	sl, r0
 800774a:	468b      	mov	fp, r1
 800774c:	e649      	b.n	80073e2 <_strtod_l+0x72>
 800774e:	4b6c      	ldr	r3, [pc, #432]	@ (8007900 <_strtod_l+0x590>)
 8007750:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007754:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007758:	f7f8 ff4e 	bl	80005f8 <__aeabi_dmul>
 800775c:	4682      	mov	sl, r0
 800775e:	4638      	mov	r0, r7
 8007760:	468b      	mov	fp, r1
 8007762:	f7f8 fecf 	bl	8000504 <__aeabi_ui2d>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4650      	mov	r0, sl
 800776c:	4659      	mov	r1, fp
 800776e:	f7f8 fd8d 	bl	800028c <__adddf3>
 8007772:	2d0f      	cmp	r5, #15
 8007774:	4682      	mov	sl, r0
 8007776:	468b      	mov	fp, r1
 8007778:	ddd5      	ble.n	8007726 <_strtod_l+0x3b6>
 800777a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777c:	1b2c      	subs	r4, r5, r4
 800777e:	441c      	add	r4, r3
 8007780:	2c00      	cmp	r4, #0
 8007782:	f340 8093 	ble.w	80078ac <_strtod_l+0x53c>
 8007786:	f014 030f 	ands.w	r3, r4, #15
 800778a:	d00a      	beq.n	80077a2 <_strtod_l+0x432>
 800778c:	495c      	ldr	r1, [pc, #368]	@ (8007900 <_strtod_l+0x590>)
 800778e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007792:	4652      	mov	r2, sl
 8007794:	465b      	mov	r3, fp
 8007796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800779a:	f7f8 ff2d 	bl	80005f8 <__aeabi_dmul>
 800779e:	4682      	mov	sl, r0
 80077a0:	468b      	mov	fp, r1
 80077a2:	f034 040f 	bics.w	r4, r4, #15
 80077a6:	d073      	beq.n	8007890 <_strtod_l+0x520>
 80077a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80077ac:	dd49      	ble.n	8007842 <_strtod_l+0x4d2>
 80077ae:	2400      	movs	r4, #0
 80077b0:	46a0      	mov	r8, r4
 80077b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077b4:	46a1      	mov	r9, r4
 80077b6:	9a05      	ldr	r2, [sp, #20]
 80077b8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007908 <_strtod_l+0x598>
 80077bc:	2322      	movs	r3, #34	@ 0x22
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	f04f 0a00 	mov.w	sl, #0
 80077c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f43f ae0b 	beq.w	80073e2 <_strtod_l+0x72>
 80077cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077ce:	9805      	ldr	r0, [sp, #20]
 80077d0:	f7ff f946 	bl	8006a60 <_Bfree>
 80077d4:	9805      	ldr	r0, [sp, #20]
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7ff f942 	bl	8006a60 <_Bfree>
 80077dc:	9805      	ldr	r0, [sp, #20]
 80077de:	4641      	mov	r1, r8
 80077e0:	f7ff f93e 	bl	8006a60 <_Bfree>
 80077e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077e6:	9805      	ldr	r0, [sp, #20]
 80077e8:	f7ff f93a 	bl	8006a60 <_Bfree>
 80077ec:	9805      	ldr	r0, [sp, #20]
 80077ee:	4621      	mov	r1, r4
 80077f0:	f7ff f936 	bl	8006a60 <_Bfree>
 80077f4:	e5f5      	b.n	80073e2 <_strtod_l+0x72>
 80077f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80077fc:	4293      	cmp	r3, r2
 80077fe:	dbbc      	blt.n	800777a <_strtod_l+0x40a>
 8007800:	4c3f      	ldr	r4, [pc, #252]	@ (8007900 <_strtod_l+0x590>)
 8007802:	f1c5 050f 	rsb	r5, r5, #15
 8007806:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800780a:	4652      	mov	r2, sl
 800780c:	465b      	mov	r3, fp
 800780e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007812:	f7f8 fef1 	bl	80005f8 <__aeabi_dmul>
 8007816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007818:	1b5d      	subs	r5, r3, r5
 800781a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800781e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007822:	e78f      	b.n	8007744 <_strtod_l+0x3d4>
 8007824:	3316      	adds	r3, #22
 8007826:	dba8      	blt.n	800777a <_strtod_l+0x40a>
 8007828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782a:	eba3 0808 	sub.w	r8, r3, r8
 800782e:	4b34      	ldr	r3, [pc, #208]	@ (8007900 <_strtod_l+0x590>)
 8007830:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007834:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007838:	4650      	mov	r0, sl
 800783a:	4659      	mov	r1, fp
 800783c:	f7f9 f806 	bl	800084c <__aeabi_ddiv>
 8007840:	e782      	b.n	8007748 <_strtod_l+0x3d8>
 8007842:	2300      	movs	r3, #0
 8007844:	4f2f      	ldr	r7, [pc, #188]	@ (8007904 <_strtod_l+0x594>)
 8007846:	1124      	asrs	r4, r4, #4
 8007848:	4650      	mov	r0, sl
 800784a:	4659      	mov	r1, fp
 800784c:	461e      	mov	r6, r3
 800784e:	2c01      	cmp	r4, #1
 8007850:	dc21      	bgt.n	8007896 <_strtod_l+0x526>
 8007852:	b10b      	cbz	r3, 8007858 <_strtod_l+0x4e8>
 8007854:	4682      	mov	sl, r0
 8007856:	468b      	mov	fp, r1
 8007858:	492a      	ldr	r1, [pc, #168]	@ (8007904 <_strtod_l+0x594>)
 800785a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800785e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007862:	4652      	mov	r2, sl
 8007864:	465b      	mov	r3, fp
 8007866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786a:	f7f8 fec5 	bl	80005f8 <__aeabi_dmul>
 800786e:	4b26      	ldr	r3, [pc, #152]	@ (8007908 <_strtod_l+0x598>)
 8007870:	460a      	mov	r2, r1
 8007872:	400b      	ands	r3, r1
 8007874:	4925      	ldr	r1, [pc, #148]	@ (800790c <_strtod_l+0x59c>)
 8007876:	428b      	cmp	r3, r1
 8007878:	4682      	mov	sl, r0
 800787a:	d898      	bhi.n	80077ae <_strtod_l+0x43e>
 800787c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007880:	428b      	cmp	r3, r1
 8007882:	bf86      	itte	hi
 8007884:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007910 <_strtod_l+0x5a0>
 8007888:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800788c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007890:	2300      	movs	r3, #0
 8007892:	9308      	str	r3, [sp, #32]
 8007894:	e076      	b.n	8007984 <_strtod_l+0x614>
 8007896:	07e2      	lsls	r2, r4, #31
 8007898:	d504      	bpl.n	80078a4 <_strtod_l+0x534>
 800789a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789e:	f7f8 feab 	bl	80005f8 <__aeabi_dmul>
 80078a2:	2301      	movs	r3, #1
 80078a4:	3601      	adds	r6, #1
 80078a6:	1064      	asrs	r4, r4, #1
 80078a8:	3708      	adds	r7, #8
 80078aa:	e7d0      	b.n	800784e <_strtod_l+0x4de>
 80078ac:	d0f0      	beq.n	8007890 <_strtod_l+0x520>
 80078ae:	4264      	negs	r4, r4
 80078b0:	f014 020f 	ands.w	r2, r4, #15
 80078b4:	d00a      	beq.n	80078cc <_strtod_l+0x55c>
 80078b6:	4b12      	ldr	r3, [pc, #72]	@ (8007900 <_strtod_l+0x590>)
 80078b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078bc:	4650      	mov	r0, sl
 80078be:	4659      	mov	r1, fp
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f7f8 ffc2 	bl	800084c <__aeabi_ddiv>
 80078c8:	4682      	mov	sl, r0
 80078ca:	468b      	mov	fp, r1
 80078cc:	1124      	asrs	r4, r4, #4
 80078ce:	d0df      	beq.n	8007890 <_strtod_l+0x520>
 80078d0:	2c1f      	cmp	r4, #31
 80078d2:	dd1f      	ble.n	8007914 <_strtod_l+0x5a4>
 80078d4:	2400      	movs	r4, #0
 80078d6:	46a0      	mov	r8, r4
 80078d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80078da:	46a1      	mov	r9, r4
 80078dc:	9a05      	ldr	r2, [sp, #20]
 80078de:	2322      	movs	r3, #34	@ 0x22
 80078e0:	f04f 0a00 	mov.w	sl, #0
 80078e4:	f04f 0b00 	mov.w	fp, #0
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e76b      	b.n	80077c4 <_strtod_l+0x454>
 80078ec:	08009259 	.word	0x08009259
 80078f0:	08009520 	.word	0x08009520
 80078f4:	08009251 	.word	0x08009251
 80078f8:	08009288 	.word	0x08009288
 80078fc:	080093c1 	.word	0x080093c1
 8007900:	08009458 	.word	0x08009458
 8007904:	08009430 	.word	0x08009430
 8007908:	7ff00000 	.word	0x7ff00000
 800790c:	7ca00000 	.word	0x7ca00000
 8007910:	7fefffff 	.word	0x7fefffff
 8007914:	f014 0310 	ands.w	r3, r4, #16
 8007918:	bf18      	it	ne
 800791a:	236a      	movne	r3, #106	@ 0x6a
 800791c:	4ea9      	ldr	r6, [pc, #676]	@ (8007bc4 <_strtod_l+0x854>)
 800791e:	9308      	str	r3, [sp, #32]
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	2300      	movs	r3, #0
 8007926:	07e7      	lsls	r7, r4, #31
 8007928:	d504      	bpl.n	8007934 <_strtod_l+0x5c4>
 800792a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	2301      	movs	r3, #1
 8007934:	1064      	asrs	r4, r4, #1
 8007936:	f106 0608 	add.w	r6, r6, #8
 800793a:	d1f4      	bne.n	8007926 <_strtod_l+0x5b6>
 800793c:	b10b      	cbz	r3, 8007942 <_strtod_l+0x5d2>
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	b1b3      	cbz	r3, 8007974 <_strtod_l+0x604>
 8007946:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800794a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800794e:	2b00      	cmp	r3, #0
 8007950:	4659      	mov	r1, fp
 8007952:	dd0f      	ble.n	8007974 <_strtod_l+0x604>
 8007954:	2b1f      	cmp	r3, #31
 8007956:	dd56      	ble.n	8007a06 <_strtod_l+0x696>
 8007958:	2b34      	cmp	r3, #52	@ 0x34
 800795a:	bfde      	ittt	le
 800795c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007960:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007964:	4093      	lslle	r3, r2
 8007966:	f04f 0a00 	mov.w	sl, #0
 800796a:	bfcc      	ite	gt
 800796c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007970:	ea03 0b01 	andle.w	fp, r3, r1
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	f7f9 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007980:	2800      	cmp	r0, #0
 8007982:	d1a7      	bne.n	80078d4 <_strtod_l+0x564>
 8007984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800798a:	9805      	ldr	r0, [sp, #20]
 800798c:	462b      	mov	r3, r5
 800798e:	464a      	mov	r2, r9
 8007990:	f7ff f8ce 	bl	8006b30 <__s2b>
 8007994:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f af09 	beq.w	80077ae <_strtod_l+0x43e>
 800799c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800799e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	eba3 0308 	sub.w	r3, r3, r8
 80079a6:	bfa8      	it	ge
 80079a8:	2300      	movge	r3, #0
 80079aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80079ac:	2400      	movs	r4, #0
 80079ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80079b4:	46a0      	mov	r8, r4
 80079b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b8:	9805      	ldr	r0, [sp, #20]
 80079ba:	6859      	ldr	r1, [r3, #4]
 80079bc:	f7ff f810 	bl	80069e0 <_Balloc>
 80079c0:	4681      	mov	r9, r0
 80079c2:	2800      	cmp	r0, #0
 80079c4:	f43f aef7 	beq.w	80077b6 <_strtod_l+0x446>
 80079c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	3202      	adds	r2, #2
 80079ce:	f103 010c 	add.w	r1, r3, #12
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	300c      	adds	r0, #12
 80079d6:	f000 ff47 	bl	8008868 <memcpy>
 80079da:	ec4b ab10 	vmov	d0, sl, fp
 80079de:	9805      	ldr	r0, [sp, #20]
 80079e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80079e2:	a91b      	add	r1, sp, #108	@ 0x6c
 80079e4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80079e8:	f7ff fbd6 	bl	8007198 <__d2b>
 80079ec:	901a      	str	r0, [sp, #104]	@ 0x68
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f43f aee1 	beq.w	80077b6 <_strtod_l+0x446>
 80079f4:	9805      	ldr	r0, [sp, #20]
 80079f6:	2101      	movs	r1, #1
 80079f8:	f7ff f930 	bl	8006c5c <__i2b>
 80079fc:	4680      	mov	r8, r0
 80079fe:	b948      	cbnz	r0, 8007a14 <_strtod_l+0x6a4>
 8007a00:	f04f 0800 	mov.w	r8, #0
 8007a04:	e6d7      	b.n	80077b6 <_strtod_l+0x446>
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	ea03 0a0a 	and.w	sl, r3, sl
 8007a12:	e7af      	b.n	8007974 <_strtod_l+0x604>
 8007a14:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007a16:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	bfab      	itete	ge
 8007a1c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007a1e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007a20:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007a22:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007a24:	bfac      	ite	ge
 8007a26:	18ef      	addge	r7, r5, r3
 8007a28:	1b5e      	sublt	r6, r3, r5
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	1aed      	subs	r5, r5, r3
 8007a2e:	4415      	add	r5, r2
 8007a30:	4b65      	ldr	r3, [pc, #404]	@ (8007bc8 <_strtod_l+0x858>)
 8007a32:	3d01      	subs	r5, #1
 8007a34:	429d      	cmp	r5, r3
 8007a36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007a3a:	da50      	bge.n	8007ade <_strtod_l+0x76e>
 8007a3c:	1b5b      	subs	r3, r3, r5
 8007a3e:	2b1f      	cmp	r3, #31
 8007a40:	eba2 0203 	sub.w	r2, r2, r3
 8007a44:	f04f 0101 	mov.w	r1, #1
 8007a48:	dc3d      	bgt.n	8007ac6 <_strtod_l+0x756>
 8007a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a50:	2300      	movs	r3, #0
 8007a52:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a54:	18bd      	adds	r5, r7, r2
 8007a56:	9b08      	ldr	r3, [sp, #32]
 8007a58:	42af      	cmp	r7, r5
 8007a5a:	4416      	add	r6, r2
 8007a5c:	441e      	add	r6, r3
 8007a5e:	463b      	mov	r3, r7
 8007a60:	bfa8      	it	ge
 8007a62:	462b      	movge	r3, r5
 8007a64:	42b3      	cmp	r3, r6
 8007a66:	bfa8      	it	ge
 8007a68:	4633      	movge	r3, r6
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfc2      	ittt	gt
 8007a6e:	1aed      	subgt	r5, r5, r3
 8007a70:	1af6      	subgt	r6, r6, r3
 8007a72:	1aff      	subgt	r7, r7, r3
 8007a74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd16      	ble.n	8007aa8 <_strtod_l+0x738>
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	9805      	ldr	r0, [sp, #20]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f7ff f9a4 	bl	8006dcc <__pow5mult>
 8007a84:	4680      	mov	r8, r0
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d0ba      	beq.n	8007a00 <_strtod_l+0x690>
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a8e:	9805      	ldr	r0, [sp, #20]
 8007a90:	f7ff f8fa 	bl	8006c88 <__multiply>
 8007a94:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f43f ae8d 	beq.w	80077b6 <_strtod_l+0x446>
 8007a9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a9e:	9805      	ldr	r0, [sp, #20]
 8007aa0:	f7fe ffde 	bl	8006a60 <_Bfree>
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	dc1d      	bgt.n	8007ae8 <_strtod_l+0x778>
 8007aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dd23      	ble.n	8007afa <_strtod_l+0x78a>
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ab6:	9805      	ldr	r0, [sp, #20]
 8007ab8:	f7ff f988 	bl	8006dcc <__pow5mult>
 8007abc:	4681      	mov	r9, r0
 8007abe:	b9e0      	cbnz	r0, 8007afa <_strtod_l+0x78a>
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	e677      	b.n	80077b6 <_strtod_l+0x446>
 8007ac6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007aca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ace:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007ad2:	35e2      	adds	r5, #226	@ 0xe2
 8007ad4:	fa01 f305 	lsl.w	r3, r1, r5
 8007ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ada:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007adc:	e7ba      	b.n	8007a54 <_strtod_l+0x6e4>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ae6:	e7b5      	b.n	8007a54 <_strtod_l+0x6e4>
 8007ae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007aea:	9805      	ldr	r0, [sp, #20]
 8007aec:	462a      	mov	r2, r5
 8007aee:	f7ff f9c7 	bl	8006e80 <__lshift>
 8007af2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d1d9      	bne.n	8007aac <_strtod_l+0x73c>
 8007af8:	e65d      	b.n	80077b6 <_strtod_l+0x446>
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	dd07      	ble.n	8007b0e <_strtod_l+0x79e>
 8007afe:	4649      	mov	r1, r9
 8007b00:	9805      	ldr	r0, [sp, #20]
 8007b02:	4632      	mov	r2, r6
 8007b04:	f7ff f9bc 	bl	8006e80 <__lshift>
 8007b08:	4681      	mov	r9, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d0d8      	beq.n	8007ac0 <_strtod_l+0x750>
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	dd08      	ble.n	8007b24 <_strtod_l+0x7b4>
 8007b12:	4641      	mov	r1, r8
 8007b14:	9805      	ldr	r0, [sp, #20]
 8007b16:	463a      	mov	r2, r7
 8007b18:	f7ff f9b2 	bl	8006e80 <__lshift>
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f43f ae49 	beq.w	80077b6 <_strtod_l+0x446>
 8007b24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b26:	9805      	ldr	r0, [sp, #20]
 8007b28:	464a      	mov	r2, r9
 8007b2a:	f7ff fa31 	bl	8006f90 <__mdiff>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f43f ae40 	beq.w	80077b6 <_strtod_l+0x446>
 8007b36:	68c3      	ldr	r3, [r0, #12]
 8007b38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60c3      	str	r3, [r0, #12]
 8007b3e:	4641      	mov	r1, r8
 8007b40:	f7ff fa0a 	bl	8006f58 <__mcmp>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	da45      	bge.n	8007bd4 <_strtod_l+0x864>
 8007b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b4e:	d16b      	bne.n	8007c28 <_strtod_l+0x8b8>
 8007b50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d167      	bne.n	8007c28 <_strtod_l+0x8b8>
 8007b58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b5c:	0d1b      	lsrs	r3, r3, #20
 8007b5e:	051b      	lsls	r3, r3, #20
 8007b60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b64:	d960      	bls.n	8007c28 <_strtod_l+0x8b8>
 8007b66:	6963      	ldr	r3, [r4, #20]
 8007b68:	b913      	cbnz	r3, 8007b70 <_strtod_l+0x800>
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	dd5b      	ble.n	8007c28 <_strtod_l+0x8b8>
 8007b70:	4621      	mov	r1, r4
 8007b72:	2201      	movs	r2, #1
 8007b74:	9805      	ldr	r0, [sp, #20]
 8007b76:	f7ff f983 	bl	8006e80 <__lshift>
 8007b7a:	4641      	mov	r1, r8
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	f7ff f9eb 	bl	8006f58 <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	dd50      	ble.n	8007c28 <_strtod_l+0x8b8>
 8007b86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b8a:	9a08      	ldr	r2, [sp, #32]
 8007b8c:	0d1b      	lsrs	r3, r3, #20
 8007b8e:	051b      	lsls	r3, r3, #20
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	d06a      	beq.n	8007c6a <_strtod_l+0x8fa>
 8007b94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b98:	d867      	bhi.n	8007c6a <_strtod_l+0x8fa>
 8007b9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b9e:	f67f ae9d 	bls.w	80078dc <_strtod_l+0x56c>
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bcc <_strtod_l+0x85c>)
 8007ba4:	4650      	mov	r0, sl
 8007ba6:	4659      	mov	r1, fp
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f7f8 fd25 	bl	80005f8 <__aeabi_dmul>
 8007bae:	4b08      	ldr	r3, [pc, #32]	@ (8007bd0 <_strtod_l+0x860>)
 8007bb0:	400b      	ands	r3, r1
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	468b      	mov	fp, r1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f47f ae08 	bne.w	80077cc <_strtod_l+0x45c>
 8007bbc:	9a05      	ldr	r2, [sp, #20]
 8007bbe:	2322      	movs	r3, #34	@ 0x22
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	e603      	b.n	80077cc <_strtod_l+0x45c>
 8007bc4:	08009548 	.word	0x08009548
 8007bc8:	fffffc02 	.word	0xfffffc02
 8007bcc:	39500000 	.word	0x39500000
 8007bd0:	7ff00000 	.word	0x7ff00000
 8007bd4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007bd8:	d165      	bne.n	8007ca6 <_strtod_l+0x936>
 8007bda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007be0:	b35a      	cbz	r2, 8007c3a <_strtod_l+0x8ca>
 8007be2:	4a9f      	ldr	r2, [pc, #636]	@ (8007e60 <_strtod_l+0xaf0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d12b      	bne.n	8007c40 <_strtod_l+0x8d0>
 8007be8:	9b08      	ldr	r3, [sp, #32]
 8007bea:	4651      	mov	r1, sl
 8007bec:	b303      	cbz	r3, 8007c30 <_strtod_l+0x8c0>
 8007bee:	4b9d      	ldr	r3, [pc, #628]	@ (8007e64 <_strtod_l+0xaf4>)
 8007bf0:	465a      	mov	r2, fp
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bfc:	d81b      	bhi.n	8007c36 <_strtod_l+0x8c6>
 8007bfe:	0d1b      	lsrs	r3, r3, #20
 8007c00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	4299      	cmp	r1, r3
 8007c0a:	d119      	bne.n	8007c40 <_strtod_l+0x8d0>
 8007c0c:	4b96      	ldr	r3, [pc, #600]	@ (8007e68 <_strtod_l+0xaf8>)
 8007c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d102      	bne.n	8007c1a <_strtod_l+0x8aa>
 8007c14:	3101      	adds	r1, #1
 8007c16:	f43f adce 	beq.w	80077b6 <_strtod_l+0x446>
 8007c1a:	4b92      	ldr	r3, [pc, #584]	@ (8007e64 <_strtod_l+0xaf4>)
 8007c1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c1e:	401a      	ands	r2, r3
 8007c20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007c24:	f04f 0a00 	mov.w	sl, #0
 8007c28:	9b08      	ldr	r3, [sp, #32]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1b9      	bne.n	8007ba2 <_strtod_l+0x832>
 8007c2e:	e5cd      	b.n	80077cc <_strtod_l+0x45c>
 8007c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c34:	e7e8      	b.n	8007c08 <_strtod_l+0x898>
 8007c36:	4613      	mov	r3, r2
 8007c38:	e7e6      	b.n	8007c08 <_strtod_l+0x898>
 8007c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c3e:	d0a2      	beq.n	8007b86 <_strtod_l+0x816>
 8007c40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c42:	b1db      	cbz	r3, 8007c7c <_strtod_l+0x90c>
 8007c44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c46:	4213      	tst	r3, r2
 8007c48:	d0ee      	beq.n	8007c28 <_strtod_l+0x8b8>
 8007c4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c4c:	9a08      	ldr	r2, [sp, #32]
 8007c4e:	4650      	mov	r0, sl
 8007c50:	4659      	mov	r1, fp
 8007c52:	b1bb      	cbz	r3, 8007c84 <_strtod_l+0x914>
 8007c54:	f7ff fb6e 	bl	8007334 <sulp>
 8007c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c5c:	ec53 2b10 	vmov	r2, r3, d0
 8007c60:	f7f8 fb14 	bl	800028c <__adddf3>
 8007c64:	4682      	mov	sl, r0
 8007c66:	468b      	mov	fp, r1
 8007c68:	e7de      	b.n	8007c28 <_strtod_l+0x8b8>
 8007c6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c76:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007c7a:	e7d5      	b.n	8007c28 <_strtod_l+0x8b8>
 8007c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c7e:	ea13 0f0a 	tst.w	r3, sl
 8007c82:	e7e1      	b.n	8007c48 <_strtod_l+0x8d8>
 8007c84:	f7ff fb56 	bl	8007334 <sulp>
 8007c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c8c:	ec53 2b10 	vmov	r2, r3, d0
 8007c90:	f7f8 fafa 	bl	8000288 <__aeabi_dsub>
 8007c94:	2200      	movs	r2, #0
 8007c96:	2300      	movs	r3, #0
 8007c98:	4682      	mov	sl, r0
 8007c9a:	468b      	mov	fp, r1
 8007c9c:	f7f8 ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d0c1      	beq.n	8007c28 <_strtod_l+0x8b8>
 8007ca4:	e61a      	b.n	80078dc <_strtod_l+0x56c>
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f7ff facd 	bl	8007248 <__ratio>
 8007cae:	ec57 6b10 	vmov	r6, r7, d0
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 ff18 	bl	8000af0 <__aeabi_dcmple>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d06f      	beq.n	8007da4 <_strtod_l+0xa34>
 8007cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d17a      	bne.n	8007dc0 <_strtod_l+0xa50>
 8007cca:	f1ba 0f00 	cmp.w	sl, #0
 8007cce:	d158      	bne.n	8007d82 <_strtod_l+0xa12>
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d15a      	bne.n	8007d90 <_strtod_l+0xa20>
 8007cda:	4b64      	ldr	r3, [pc, #400]	@ (8007e6c <_strtod_l+0xafc>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4630      	mov	r0, r6
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	f7f8 fefb 	bl	8000adc <__aeabi_dcmplt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d159      	bne.n	8007d9e <_strtod_l+0xa2e>
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	4b60      	ldr	r3, [pc, #384]	@ (8007e70 <_strtod_l+0xb00>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f7f8 fc81 	bl	80005f8 <__aeabi_dmul>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007cfe:	9606      	str	r6, [sp, #24]
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d06:	4d57      	ldr	r5, [pc, #348]	@ (8007e64 <_strtod_l+0xaf4>)
 8007d08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d0e:	401d      	ands	r5, r3
 8007d10:	4b58      	ldr	r3, [pc, #352]	@ (8007e74 <_strtod_l+0xb04>)
 8007d12:	429d      	cmp	r5, r3
 8007d14:	f040 80b2 	bne.w	8007e7c <_strtod_l+0xb0c>
 8007d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007d1e:	ec4b ab10 	vmov	d0, sl, fp
 8007d22:	f7ff f9c9 	bl	80070b8 <__ulp>
 8007d26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d2a:	ec51 0b10 	vmov	r0, r1, d0
 8007d2e:	f7f8 fc63 	bl	80005f8 <__aeabi_dmul>
 8007d32:	4652      	mov	r2, sl
 8007d34:	465b      	mov	r3, fp
 8007d36:	f7f8 faa9 	bl	800028c <__adddf3>
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4949      	ldr	r1, [pc, #292]	@ (8007e64 <_strtod_l+0xaf4>)
 8007d3e:	4a4e      	ldr	r2, [pc, #312]	@ (8007e78 <_strtod_l+0xb08>)
 8007d40:	4019      	ands	r1, r3
 8007d42:	4291      	cmp	r1, r2
 8007d44:	4682      	mov	sl, r0
 8007d46:	d942      	bls.n	8007dce <_strtod_l+0xa5e>
 8007d48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d4a:	4b47      	ldr	r3, [pc, #284]	@ (8007e68 <_strtod_l+0xaf8>)
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d103      	bne.n	8007d58 <_strtod_l+0x9e8>
 8007d50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d52:	3301      	adds	r3, #1
 8007d54:	f43f ad2f 	beq.w	80077b6 <_strtod_l+0x446>
 8007d58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007e68 <_strtod_l+0xaf8>
 8007d5c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007d60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d62:	9805      	ldr	r0, [sp, #20]
 8007d64:	f7fe fe7c 	bl	8006a60 <_Bfree>
 8007d68:	9805      	ldr	r0, [sp, #20]
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7fe fe78 	bl	8006a60 <_Bfree>
 8007d70:	9805      	ldr	r0, [sp, #20]
 8007d72:	4641      	mov	r1, r8
 8007d74:	f7fe fe74 	bl	8006a60 <_Bfree>
 8007d78:	9805      	ldr	r0, [sp, #20]
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	f7fe fe70 	bl	8006a60 <_Bfree>
 8007d80:	e619      	b.n	80079b6 <_strtod_l+0x646>
 8007d82:	f1ba 0f01 	cmp.w	sl, #1
 8007d86:	d103      	bne.n	8007d90 <_strtod_l+0xa20>
 8007d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f43f ada6 	beq.w	80078dc <_strtod_l+0x56c>
 8007d90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007e40 <_strtod_l+0xad0>
 8007d94:	4f35      	ldr	r7, [pc, #212]	@ (8007e6c <_strtod_l+0xafc>)
 8007d96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d9a:	2600      	movs	r6, #0
 8007d9c:	e7b1      	b.n	8007d02 <_strtod_l+0x992>
 8007d9e:	4f34      	ldr	r7, [pc, #208]	@ (8007e70 <_strtod_l+0xb00>)
 8007da0:	2600      	movs	r6, #0
 8007da2:	e7aa      	b.n	8007cfa <_strtod_l+0x98a>
 8007da4:	4b32      	ldr	r3, [pc, #200]	@ (8007e70 <_strtod_l+0xb00>)
 8007da6:	4630      	mov	r0, r6
 8007da8:	4639      	mov	r1, r7
 8007daa:	2200      	movs	r2, #0
 8007dac:	f7f8 fc24 	bl	80005f8 <__aeabi_dmul>
 8007db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db2:	4606      	mov	r6, r0
 8007db4:	460f      	mov	r7, r1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d09f      	beq.n	8007cfa <_strtod_l+0x98a>
 8007dba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007dbe:	e7a0      	b.n	8007d02 <_strtod_l+0x992>
 8007dc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007e48 <_strtod_l+0xad8>
 8007dc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007dc8:	ec57 6b17 	vmov	r6, r7, d7
 8007dcc:	e799      	b.n	8007d02 <_strtod_l+0x992>
 8007dce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1c1      	bne.n	8007d60 <_strtod_l+0x9f0>
 8007ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007de0:	0d1b      	lsrs	r3, r3, #20
 8007de2:	051b      	lsls	r3, r3, #20
 8007de4:	429d      	cmp	r5, r3
 8007de6:	d1bb      	bne.n	8007d60 <_strtod_l+0x9f0>
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 ff64 	bl	8000cb8 <__aeabi_d2lz>
 8007df0:	f7f8 fbd4 	bl	800059c <__aeabi_l2d>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4630      	mov	r0, r6
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f8 fa44 	bl	8000288 <__aeabi_dsub>
 8007e00:	460b      	mov	r3, r1
 8007e02:	4602      	mov	r2, r0
 8007e04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0e:	ea46 060a 	orr.w	r6, r6, sl
 8007e12:	431e      	orrs	r6, r3
 8007e14:	d06f      	beq.n	8007ef6 <_strtod_l+0xb86>
 8007e16:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e50 <_strtod_l+0xae0>)
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f7f8 fe5e 	bl	8000adc <__aeabi_dcmplt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f47f acd3 	bne.w	80077cc <_strtod_l+0x45c>
 8007e26:	a30c      	add	r3, pc, #48	@ (adr r3, 8007e58 <_strtod_l+0xae8>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e30:	f7f8 fe72 	bl	8000b18 <__aeabi_dcmpgt>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d093      	beq.n	8007d60 <_strtod_l+0x9f0>
 8007e38:	e4c8      	b.n	80077cc <_strtod_l+0x45c>
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w
 8007e40:	00000000 	.word	0x00000000
 8007e44:	bff00000 	.word	0xbff00000
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	3ff00000 	.word	0x3ff00000
 8007e50:	94a03595 	.word	0x94a03595
 8007e54:	3fdfffff 	.word	0x3fdfffff
 8007e58:	35afe535 	.word	0x35afe535
 8007e5c:	3fe00000 	.word	0x3fe00000
 8007e60:	000fffff 	.word	0x000fffff
 8007e64:	7ff00000 	.word	0x7ff00000
 8007e68:	7fefffff 	.word	0x7fefffff
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	3fe00000 	.word	0x3fe00000
 8007e74:	7fe00000 	.word	0x7fe00000
 8007e78:	7c9fffff 	.word	0x7c9fffff
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	b323      	cbz	r3, 8007eca <_strtod_l+0xb5a>
 8007e80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e84:	d821      	bhi.n	8007eca <_strtod_l+0xb5a>
 8007e86:	a328      	add	r3, pc, #160	@ (adr r3, 8007f28 <_strtod_l+0xbb8>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fe2e 	bl	8000af0 <__aeabi_dcmple>
 8007e94:	b1a0      	cbz	r0, 8007ec0 <_strtod_l+0xb50>
 8007e96:	4639      	mov	r1, r7
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7f8 fe85 	bl	8000ba8 <__aeabi_d2uiz>
 8007e9e:	2801      	cmp	r0, #1
 8007ea0:	bf38      	it	cc
 8007ea2:	2001      	movcc	r0, #1
 8007ea4:	f7f8 fb2e 	bl	8000504 <__aeabi_ui2d>
 8007ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	b9fb      	cbnz	r3, 8007ef0 <_strtod_l+0xb80>
 8007eb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007eb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007eb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007eb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007ebc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ec0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ec2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007ec6:	1b5b      	subs	r3, r3, r5
 8007ec8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007eca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007ece:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007ed2:	f7ff f8f1 	bl	80070b8 <__ulp>
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	ec53 2b10 	vmov	r2, r3, d0
 8007edc:	4659      	mov	r1, fp
 8007ede:	f7f8 fb8b 	bl	80005f8 <__aeabi_dmul>
 8007ee2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ee6:	f7f8 f9d1 	bl	800028c <__adddf3>
 8007eea:	4682      	mov	sl, r0
 8007eec:	468b      	mov	fp, r1
 8007eee:	e770      	b.n	8007dd2 <_strtod_l+0xa62>
 8007ef0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ef4:	e7e0      	b.n	8007eb8 <_strtod_l+0xb48>
 8007ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f30 <_strtod_l+0xbc0>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 fdee 	bl	8000adc <__aeabi_dcmplt>
 8007f00:	e798      	b.n	8007e34 <_strtod_l+0xac4>
 8007f02:	2300      	movs	r3, #0
 8007f04:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	f7ff ba6d 	b.w	80073ea <_strtod_l+0x7a>
 8007f10:	2a65      	cmp	r2, #101	@ 0x65
 8007f12:	f43f ab68 	beq.w	80075e6 <_strtod_l+0x276>
 8007f16:	2a45      	cmp	r2, #69	@ 0x45
 8007f18:	f43f ab65 	beq.w	80075e6 <_strtod_l+0x276>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f7ff bba0 	b.w	8007662 <_strtod_l+0x2f2>
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	ffc00000 	.word	0xffc00000
 8007f2c:	41dfffff 	.word	0x41dfffff
 8007f30:	94a03595 	.word	0x94a03595
 8007f34:	3fcfffff 	.word	0x3fcfffff

08007f38 <_strtod_r>:
 8007f38:	4b01      	ldr	r3, [pc, #4]	@ (8007f40 <_strtod_r+0x8>)
 8007f3a:	f7ff ba19 	b.w	8007370 <_strtod_l>
 8007f3e:	bf00      	nop
 8007f40:	20000068 	.word	0x20000068

08007f44 <_strtol_l.isra.0>:
 8007f44:	2b24      	cmp	r3, #36	@ 0x24
 8007f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4a:	4686      	mov	lr, r0
 8007f4c:	4690      	mov	r8, r2
 8007f4e:	d801      	bhi.n	8007f54 <_strtol_l.isra.0+0x10>
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d106      	bne.n	8007f62 <_strtol_l.isra.0+0x1e>
 8007f54:	f7fd fdb8 	bl	8005ac8 <__errno>
 8007f58:	2316      	movs	r3, #22
 8007f5a:	6003      	str	r3, [r0, #0]
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	4834      	ldr	r0, [pc, #208]	@ (8008034 <_strtol_l.isra.0+0xf0>)
 8007f64:	460d      	mov	r5, r1
 8007f66:	462a      	mov	r2, r5
 8007f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f6c:	5d06      	ldrb	r6, [r0, r4]
 8007f6e:	f016 0608 	ands.w	r6, r6, #8
 8007f72:	d1f8      	bne.n	8007f66 <_strtol_l.isra.0+0x22>
 8007f74:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f76:	d110      	bne.n	8007f9a <_strtol_l.isra.0+0x56>
 8007f78:	782c      	ldrb	r4, [r5, #0]
 8007f7a:	2601      	movs	r6, #1
 8007f7c:	1c95      	adds	r5, r2, #2
 8007f7e:	f033 0210 	bics.w	r2, r3, #16
 8007f82:	d115      	bne.n	8007fb0 <_strtol_l.isra.0+0x6c>
 8007f84:	2c30      	cmp	r4, #48	@ 0x30
 8007f86:	d10d      	bne.n	8007fa4 <_strtol_l.isra.0+0x60>
 8007f88:	782a      	ldrb	r2, [r5, #0]
 8007f8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f8e:	2a58      	cmp	r2, #88	@ 0x58
 8007f90:	d108      	bne.n	8007fa4 <_strtol_l.isra.0+0x60>
 8007f92:	786c      	ldrb	r4, [r5, #1]
 8007f94:	3502      	adds	r5, #2
 8007f96:	2310      	movs	r3, #16
 8007f98:	e00a      	b.n	8007fb0 <_strtol_l.isra.0+0x6c>
 8007f9a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f9c:	bf04      	itt	eq
 8007f9e:	782c      	ldrbeq	r4, [r5, #0]
 8007fa0:	1c95      	addeq	r5, r2, #2
 8007fa2:	e7ec      	b.n	8007f7e <_strtol_l.isra.0+0x3a>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f6      	bne.n	8007f96 <_strtol_l.isra.0+0x52>
 8007fa8:	2c30      	cmp	r4, #48	@ 0x30
 8007faa:	bf14      	ite	ne
 8007fac:	230a      	movne	r3, #10
 8007fae:	2308      	moveq	r3, #8
 8007fb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007fb4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007fb8:	2200      	movs	r2, #0
 8007fba:	fbbc f9f3 	udiv	r9, ip, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007fc8:	2f09      	cmp	r7, #9
 8007fca:	d80f      	bhi.n	8007fec <_strtol_l.isra.0+0xa8>
 8007fcc:	463c      	mov	r4, r7
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	dd1b      	ble.n	800800a <_strtol_l.isra.0+0xc6>
 8007fd2:	1c57      	adds	r7, r2, #1
 8007fd4:	d007      	beq.n	8007fe6 <_strtol_l.isra.0+0xa2>
 8007fd6:	4581      	cmp	r9, r0
 8007fd8:	d314      	bcc.n	8008004 <_strtol_l.isra.0+0xc0>
 8007fda:	d101      	bne.n	8007fe0 <_strtol_l.isra.0+0x9c>
 8007fdc:	45a2      	cmp	sl, r4
 8007fde:	db11      	blt.n	8008004 <_strtol_l.isra.0+0xc0>
 8007fe0:	fb00 4003 	mla	r0, r0, r3, r4
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fea:	e7eb      	b.n	8007fc4 <_strtol_l.isra.0+0x80>
 8007fec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ff0:	2f19      	cmp	r7, #25
 8007ff2:	d801      	bhi.n	8007ff8 <_strtol_l.isra.0+0xb4>
 8007ff4:	3c37      	subs	r4, #55	@ 0x37
 8007ff6:	e7ea      	b.n	8007fce <_strtol_l.isra.0+0x8a>
 8007ff8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ffc:	2f19      	cmp	r7, #25
 8007ffe:	d804      	bhi.n	800800a <_strtol_l.isra.0+0xc6>
 8008000:	3c57      	subs	r4, #87	@ 0x57
 8008002:	e7e4      	b.n	8007fce <_strtol_l.isra.0+0x8a>
 8008004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008008:	e7ed      	b.n	8007fe6 <_strtol_l.isra.0+0xa2>
 800800a:	1c53      	adds	r3, r2, #1
 800800c:	d108      	bne.n	8008020 <_strtol_l.isra.0+0xdc>
 800800e:	2322      	movs	r3, #34	@ 0x22
 8008010:	f8ce 3000 	str.w	r3, [lr]
 8008014:	4660      	mov	r0, ip
 8008016:	f1b8 0f00 	cmp.w	r8, #0
 800801a:	d0a0      	beq.n	8007f5e <_strtol_l.isra.0+0x1a>
 800801c:	1e69      	subs	r1, r5, #1
 800801e:	e006      	b.n	800802e <_strtol_l.isra.0+0xea>
 8008020:	b106      	cbz	r6, 8008024 <_strtol_l.isra.0+0xe0>
 8008022:	4240      	negs	r0, r0
 8008024:	f1b8 0f00 	cmp.w	r8, #0
 8008028:	d099      	beq.n	8007f5e <_strtol_l.isra.0+0x1a>
 800802a:	2a00      	cmp	r2, #0
 800802c:	d1f6      	bne.n	800801c <_strtol_l.isra.0+0xd8>
 800802e:	f8c8 1000 	str.w	r1, [r8]
 8008032:	e794      	b.n	8007f5e <_strtol_l.isra.0+0x1a>
 8008034:	08009571 	.word	0x08009571

08008038 <_strtol_r>:
 8008038:	f7ff bf84 	b.w	8007f44 <_strtol_l.isra.0>

0800803c <__ssputs_r>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	688e      	ldr	r6, [r1, #8]
 8008042:	461f      	mov	r7, r3
 8008044:	42be      	cmp	r6, r7
 8008046:	680b      	ldr	r3, [r1, #0]
 8008048:	4682      	mov	sl, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4690      	mov	r8, r2
 800804e:	d82d      	bhi.n	80080ac <__ssputs_r+0x70>
 8008050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008054:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008058:	d026      	beq.n	80080a8 <__ssputs_r+0x6c>
 800805a:	6965      	ldr	r5, [r4, #20]
 800805c:	6909      	ldr	r1, [r1, #16]
 800805e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008062:	eba3 0901 	sub.w	r9, r3, r1
 8008066:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800806a:	1c7b      	adds	r3, r7, #1
 800806c:	444b      	add	r3, r9
 800806e:	106d      	asrs	r5, r5, #1
 8008070:	429d      	cmp	r5, r3
 8008072:	bf38      	it	cc
 8008074:	461d      	movcc	r5, r3
 8008076:	0553      	lsls	r3, r2, #21
 8008078:	d527      	bpl.n	80080ca <__ssputs_r+0x8e>
 800807a:	4629      	mov	r1, r5
 800807c:	f7fe fc24 	bl	80068c8 <_malloc_r>
 8008080:	4606      	mov	r6, r0
 8008082:	b360      	cbz	r0, 80080de <__ssputs_r+0xa2>
 8008084:	6921      	ldr	r1, [r4, #16]
 8008086:	464a      	mov	r2, r9
 8008088:	f000 fbee 	bl	8008868 <memcpy>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	6126      	str	r6, [r4, #16]
 800809a:	6165      	str	r5, [r4, #20]
 800809c:	444e      	add	r6, r9
 800809e:	eba5 0509 	sub.w	r5, r5, r9
 80080a2:	6026      	str	r6, [r4, #0]
 80080a4:	60a5      	str	r5, [r4, #8]
 80080a6:	463e      	mov	r6, r7
 80080a8:	42be      	cmp	r6, r7
 80080aa:	d900      	bls.n	80080ae <__ssputs_r+0x72>
 80080ac:	463e      	mov	r6, r7
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	4632      	mov	r2, r6
 80080b2:	4641      	mov	r1, r8
 80080b4:	f000 fb9c 	bl	80087f0 <memmove>
 80080b8:	68a3      	ldr	r3, [r4, #8]
 80080ba:	1b9b      	subs	r3, r3, r6
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	4433      	add	r3, r6
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	2000      	movs	r0, #0
 80080c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ca:	462a      	mov	r2, r5
 80080cc:	f000 ff61 	bl	8008f92 <_realloc_r>
 80080d0:	4606      	mov	r6, r0
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d1e0      	bne.n	8008098 <__ssputs_r+0x5c>
 80080d6:	6921      	ldr	r1, [r4, #16]
 80080d8:	4650      	mov	r0, sl
 80080da:	f7fe fb81 	bl	80067e0 <_free_r>
 80080de:	230c      	movs	r3, #12
 80080e0:	f8ca 3000 	str.w	r3, [sl]
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ea:	81a3      	strh	r3, [r4, #12]
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080f0:	e7e9      	b.n	80080c6 <__ssputs_r+0x8a>
	...

080080f4 <_svfiprintf_r>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	4698      	mov	r8, r3
 80080fa:	898b      	ldrh	r3, [r1, #12]
 80080fc:	061b      	lsls	r3, r3, #24
 80080fe:	b09d      	sub	sp, #116	@ 0x74
 8008100:	4607      	mov	r7, r0
 8008102:	460d      	mov	r5, r1
 8008104:	4614      	mov	r4, r2
 8008106:	d510      	bpl.n	800812a <_svfiprintf_r+0x36>
 8008108:	690b      	ldr	r3, [r1, #16]
 800810a:	b973      	cbnz	r3, 800812a <_svfiprintf_r+0x36>
 800810c:	2140      	movs	r1, #64	@ 0x40
 800810e:	f7fe fbdb 	bl	80068c8 <_malloc_r>
 8008112:	6028      	str	r0, [r5, #0]
 8008114:	6128      	str	r0, [r5, #16]
 8008116:	b930      	cbnz	r0, 8008126 <_svfiprintf_r+0x32>
 8008118:	230c      	movs	r3, #12
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008120:	b01d      	add	sp, #116	@ 0x74
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	2340      	movs	r3, #64	@ 0x40
 8008128:	616b      	str	r3, [r5, #20]
 800812a:	2300      	movs	r3, #0
 800812c:	9309      	str	r3, [sp, #36]	@ 0x24
 800812e:	2320      	movs	r3, #32
 8008130:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008134:	f8cd 800c 	str.w	r8, [sp, #12]
 8008138:	2330      	movs	r3, #48	@ 0x30
 800813a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082d8 <_svfiprintf_r+0x1e4>
 800813e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008142:	f04f 0901 	mov.w	r9, #1
 8008146:	4623      	mov	r3, r4
 8008148:	469a      	mov	sl, r3
 800814a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814e:	b10a      	cbz	r2, 8008154 <_svfiprintf_r+0x60>
 8008150:	2a25      	cmp	r2, #37	@ 0x25
 8008152:	d1f9      	bne.n	8008148 <_svfiprintf_r+0x54>
 8008154:	ebba 0b04 	subs.w	fp, sl, r4
 8008158:	d00b      	beq.n	8008172 <_svfiprintf_r+0x7e>
 800815a:	465b      	mov	r3, fp
 800815c:	4622      	mov	r2, r4
 800815e:	4629      	mov	r1, r5
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff ff6b 	bl	800803c <__ssputs_r>
 8008166:	3001      	adds	r0, #1
 8008168:	f000 80a7 	beq.w	80082ba <_svfiprintf_r+0x1c6>
 800816c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800816e:	445a      	add	r2, fp
 8008170:	9209      	str	r2, [sp, #36]	@ 0x24
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 809f 	beq.w	80082ba <_svfiprintf_r+0x1c6>
 800817c:	2300      	movs	r3, #0
 800817e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008186:	f10a 0a01 	add.w	sl, sl, #1
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	9307      	str	r3, [sp, #28]
 800818e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008192:	931a      	str	r3, [sp, #104]	@ 0x68
 8008194:	4654      	mov	r4, sl
 8008196:	2205      	movs	r2, #5
 8008198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819c:	484e      	ldr	r0, [pc, #312]	@ (80082d8 <_svfiprintf_r+0x1e4>)
 800819e:	f7f8 f817 	bl	80001d0 <memchr>
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	b9d8      	cbnz	r0, 80081de <_svfiprintf_r+0xea>
 80081a6:	06d0      	lsls	r0, r2, #27
 80081a8:	bf44      	itt	mi
 80081aa:	2320      	movmi	r3, #32
 80081ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b0:	0711      	lsls	r1, r2, #28
 80081b2:	bf44      	itt	mi
 80081b4:	232b      	movmi	r3, #43	@ 0x2b
 80081b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ba:	f89a 3000 	ldrb.w	r3, [sl]
 80081be:	2b2a      	cmp	r3, #42	@ 0x2a
 80081c0:	d015      	beq.n	80081ee <_svfiprintf_r+0xfa>
 80081c2:	9a07      	ldr	r2, [sp, #28]
 80081c4:	4654      	mov	r4, sl
 80081c6:	2000      	movs	r0, #0
 80081c8:	f04f 0c0a 	mov.w	ip, #10
 80081cc:	4621      	mov	r1, r4
 80081ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d2:	3b30      	subs	r3, #48	@ 0x30
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d94b      	bls.n	8008270 <_svfiprintf_r+0x17c>
 80081d8:	b1b0      	cbz	r0, 8008208 <_svfiprintf_r+0x114>
 80081da:	9207      	str	r2, [sp, #28]
 80081dc:	e014      	b.n	8008208 <_svfiprintf_r+0x114>
 80081de:	eba0 0308 	sub.w	r3, r0, r8
 80081e2:	fa09 f303 	lsl.w	r3, r9, r3
 80081e6:	4313      	orrs	r3, r2
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	46a2      	mov	sl, r4
 80081ec:	e7d2      	b.n	8008194 <_svfiprintf_r+0xa0>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	1d19      	adds	r1, r3, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	9103      	str	r1, [sp, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bfbb      	ittet	lt
 80081fa:	425b      	neglt	r3, r3
 80081fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008200:	9307      	strge	r3, [sp, #28]
 8008202:	9307      	strlt	r3, [sp, #28]
 8008204:	bfb8      	it	lt
 8008206:	9204      	strlt	r2, [sp, #16]
 8008208:	7823      	ldrb	r3, [r4, #0]
 800820a:	2b2e      	cmp	r3, #46	@ 0x2e
 800820c:	d10a      	bne.n	8008224 <_svfiprintf_r+0x130>
 800820e:	7863      	ldrb	r3, [r4, #1]
 8008210:	2b2a      	cmp	r3, #42	@ 0x2a
 8008212:	d132      	bne.n	800827a <_svfiprintf_r+0x186>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	9203      	str	r2, [sp, #12]
 800821c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008220:	3402      	adds	r4, #2
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082e8 <_svfiprintf_r+0x1f4>
 8008228:	7821      	ldrb	r1, [r4, #0]
 800822a:	2203      	movs	r2, #3
 800822c:	4650      	mov	r0, sl
 800822e:	f7f7 ffcf 	bl	80001d0 <memchr>
 8008232:	b138      	cbz	r0, 8008244 <_svfiprintf_r+0x150>
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	eba0 000a 	sub.w	r0, r0, sl
 800823a:	2240      	movs	r2, #64	@ 0x40
 800823c:	4082      	lsls	r2, r0
 800823e:	4313      	orrs	r3, r2
 8008240:	3401      	adds	r4, #1
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008248:	4824      	ldr	r0, [pc, #144]	@ (80082dc <_svfiprintf_r+0x1e8>)
 800824a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800824e:	2206      	movs	r2, #6
 8008250:	f7f7 ffbe 	bl	80001d0 <memchr>
 8008254:	2800      	cmp	r0, #0
 8008256:	d036      	beq.n	80082c6 <_svfiprintf_r+0x1d2>
 8008258:	4b21      	ldr	r3, [pc, #132]	@ (80082e0 <_svfiprintf_r+0x1ec>)
 800825a:	bb1b      	cbnz	r3, 80082a4 <_svfiprintf_r+0x1b0>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	3307      	adds	r3, #7
 8008260:	f023 0307 	bic.w	r3, r3, #7
 8008264:	3308      	adds	r3, #8
 8008266:	9303      	str	r3, [sp, #12]
 8008268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826a:	4433      	add	r3, r6
 800826c:	9309      	str	r3, [sp, #36]	@ 0x24
 800826e:	e76a      	b.n	8008146 <_svfiprintf_r+0x52>
 8008270:	fb0c 3202 	mla	r2, ip, r2, r3
 8008274:	460c      	mov	r4, r1
 8008276:	2001      	movs	r0, #1
 8008278:	e7a8      	b.n	80081cc <_svfiprintf_r+0xd8>
 800827a:	2300      	movs	r3, #0
 800827c:	3401      	adds	r4, #1
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	4619      	mov	r1, r3
 8008282:	f04f 0c0a 	mov.w	ip, #10
 8008286:	4620      	mov	r0, r4
 8008288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828c:	3a30      	subs	r2, #48	@ 0x30
 800828e:	2a09      	cmp	r2, #9
 8008290:	d903      	bls.n	800829a <_svfiprintf_r+0x1a6>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0c6      	beq.n	8008224 <_svfiprintf_r+0x130>
 8008296:	9105      	str	r1, [sp, #20]
 8008298:	e7c4      	b.n	8008224 <_svfiprintf_r+0x130>
 800829a:	fb0c 2101 	mla	r1, ip, r1, r2
 800829e:	4604      	mov	r4, r0
 80082a0:	2301      	movs	r3, #1
 80082a2:	e7f0      	b.n	8008286 <_svfiprintf_r+0x192>
 80082a4:	ab03      	add	r3, sp, #12
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	462a      	mov	r2, r5
 80082aa:	4b0e      	ldr	r3, [pc, #56]	@ (80082e4 <_svfiprintf_r+0x1f0>)
 80082ac:	a904      	add	r1, sp, #16
 80082ae:	4638      	mov	r0, r7
 80082b0:	f7fc fcba 	bl	8004c28 <_printf_float>
 80082b4:	1c42      	adds	r2, r0, #1
 80082b6:	4606      	mov	r6, r0
 80082b8:	d1d6      	bne.n	8008268 <_svfiprintf_r+0x174>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	065b      	lsls	r3, r3, #25
 80082be:	f53f af2d 	bmi.w	800811c <_svfiprintf_r+0x28>
 80082c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082c4:	e72c      	b.n	8008120 <_svfiprintf_r+0x2c>
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	462a      	mov	r2, r5
 80082cc:	4b05      	ldr	r3, [pc, #20]	@ (80082e4 <_svfiprintf_r+0x1f0>)
 80082ce:	a904      	add	r1, sp, #16
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7fc ff41 	bl	8005158 <_printf_i>
 80082d6:	e7ed      	b.n	80082b4 <_svfiprintf_r+0x1c0>
 80082d8:	0800936d 	.word	0x0800936d
 80082dc:	08009377 	.word	0x08009377
 80082e0:	08004c29 	.word	0x08004c29
 80082e4:	0800803d 	.word	0x0800803d
 80082e8:	08009373 	.word	0x08009373

080082ec <__sfputc_r>:
 80082ec:	6893      	ldr	r3, [r2, #8]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	b410      	push	{r4}
 80082f4:	6093      	str	r3, [r2, #8]
 80082f6:	da08      	bge.n	800830a <__sfputc_r+0x1e>
 80082f8:	6994      	ldr	r4, [r2, #24]
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	db01      	blt.n	8008302 <__sfputc_r+0x16>
 80082fe:	290a      	cmp	r1, #10
 8008300:	d103      	bne.n	800830a <__sfputc_r+0x1e>
 8008302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008306:	f000 b9df 	b.w	80086c8 <__swbuf_r>
 800830a:	6813      	ldr	r3, [r2, #0]
 800830c:	1c58      	adds	r0, r3, #1
 800830e:	6010      	str	r0, [r2, #0]
 8008310:	7019      	strb	r1, [r3, #0]
 8008312:	4608      	mov	r0, r1
 8008314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008318:	4770      	bx	lr

0800831a <__sfputs_r>:
 800831a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831c:	4606      	mov	r6, r0
 800831e:	460f      	mov	r7, r1
 8008320:	4614      	mov	r4, r2
 8008322:	18d5      	adds	r5, r2, r3
 8008324:	42ac      	cmp	r4, r5
 8008326:	d101      	bne.n	800832c <__sfputs_r+0x12>
 8008328:	2000      	movs	r0, #0
 800832a:	e007      	b.n	800833c <__sfputs_r+0x22>
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	463a      	mov	r2, r7
 8008332:	4630      	mov	r0, r6
 8008334:	f7ff ffda 	bl	80082ec <__sfputc_r>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d1f3      	bne.n	8008324 <__sfputs_r+0xa>
 800833c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008340 <_vfiprintf_r>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	460d      	mov	r5, r1
 8008346:	b09d      	sub	sp, #116	@ 0x74
 8008348:	4614      	mov	r4, r2
 800834a:	4698      	mov	r8, r3
 800834c:	4606      	mov	r6, r0
 800834e:	b118      	cbz	r0, 8008358 <_vfiprintf_r+0x18>
 8008350:	6a03      	ldr	r3, [r0, #32]
 8008352:	b90b      	cbnz	r3, 8008358 <_vfiprintf_r+0x18>
 8008354:	f7fd fab8 	bl	80058c8 <__sinit>
 8008358:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800835a:	07d9      	lsls	r1, r3, #31
 800835c:	d405      	bmi.n	800836a <_vfiprintf_r+0x2a>
 800835e:	89ab      	ldrh	r3, [r5, #12]
 8008360:	059a      	lsls	r2, r3, #22
 8008362:	d402      	bmi.n	800836a <_vfiprintf_r+0x2a>
 8008364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008366:	f7fd fbda 	bl	8005b1e <__retarget_lock_acquire_recursive>
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	071b      	lsls	r3, r3, #28
 800836e:	d501      	bpl.n	8008374 <_vfiprintf_r+0x34>
 8008370:	692b      	ldr	r3, [r5, #16]
 8008372:	b99b      	cbnz	r3, 800839c <_vfiprintf_r+0x5c>
 8008374:	4629      	mov	r1, r5
 8008376:	4630      	mov	r0, r6
 8008378:	f000 f9e4 	bl	8008744 <__swsetup_r>
 800837c:	b170      	cbz	r0, 800839c <_vfiprintf_r+0x5c>
 800837e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008380:	07dc      	lsls	r4, r3, #31
 8008382:	d504      	bpl.n	800838e <_vfiprintf_r+0x4e>
 8008384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008388:	b01d      	add	sp, #116	@ 0x74
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	0598      	lsls	r0, r3, #22
 8008392:	d4f7      	bmi.n	8008384 <_vfiprintf_r+0x44>
 8008394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008396:	f7fd fbc3 	bl	8005b20 <__retarget_lock_release_recursive>
 800839a:	e7f3      	b.n	8008384 <_vfiprintf_r+0x44>
 800839c:	2300      	movs	r3, #0
 800839e:	9309      	str	r3, [sp, #36]	@ 0x24
 80083a0:	2320      	movs	r3, #32
 80083a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083aa:	2330      	movs	r3, #48	@ 0x30
 80083ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800855c <_vfiprintf_r+0x21c>
 80083b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083b4:	f04f 0901 	mov.w	r9, #1
 80083b8:	4623      	mov	r3, r4
 80083ba:	469a      	mov	sl, r3
 80083bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c0:	b10a      	cbz	r2, 80083c6 <_vfiprintf_r+0x86>
 80083c2:	2a25      	cmp	r2, #37	@ 0x25
 80083c4:	d1f9      	bne.n	80083ba <_vfiprintf_r+0x7a>
 80083c6:	ebba 0b04 	subs.w	fp, sl, r4
 80083ca:	d00b      	beq.n	80083e4 <_vfiprintf_r+0xa4>
 80083cc:	465b      	mov	r3, fp
 80083ce:	4622      	mov	r2, r4
 80083d0:	4629      	mov	r1, r5
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff ffa1 	bl	800831a <__sfputs_r>
 80083d8:	3001      	adds	r0, #1
 80083da:	f000 80a7 	beq.w	800852c <_vfiprintf_r+0x1ec>
 80083de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083e0:	445a      	add	r2, fp
 80083e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 809f 	beq.w	800852c <_vfiprintf_r+0x1ec>
 80083ee:	2300      	movs	r3, #0
 80083f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083f8:	f10a 0a01 	add.w	sl, sl, #1
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008404:	931a      	str	r3, [sp, #104]	@ 0x68
 8008406:	4654      	mov	r4, sl
 8008408:	2205      	movs	r2, #5
 800840a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840e:	4853      	ldr	r0, [pc, #332]	@ (800855c <_vfiprintf_r+0x21c>)
 8008410:	f7f7 fede 	bl	80001d0 <memchr>
 8008414:	9a04      	ldr	r2, [sp, #16]
 8008416:	b9d8      	cbnz	r0, 8008450 <_vfiprintf_r+0x110>
 8008418:	06d1      	lsls	r1, r2, #27
 800841a:	bf44      	itt	mi
 800841c:	2320      	movmi	r3, #32
 800841e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008422:	0713      	lsls	r3, r2, #28
 8008424:	bf44      	itt	mi
 8008426:	232b      	movmi	r3, #43	@ 0x2b
 8008428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800842c:	f89a 3000 	ldrb.w	r3, [sl]
 8008430:	2b2a      	cmp	r3, #42	@ 0x2a
 8008432:	d015      	beq.n	8008460 <_vfiprintf_r+0x120>
 8008434:	9a07      	ldr	r2, [sp, #28]
 8008436:	4654      	mov	r4, sl
 8008438:	2000      	movs	r0, #0
 800843a:	f04f 0c0a 	mov.w	ip, #10
 800843e:	4621      	mov	r1, r4
 8008440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008444:	3b30      	subs	r3, #48	@ 0x30
 8008446:	2b09      	cmp	r3, #9
 8008448:	d94b      	bls.n	80084e2 <_vfiprintf_r+0x1a2>
 800844a:	b1b0      	cbz	r0, 800847a <_vfiprintf_r+0x13a>
 800844c:	9207      	str	r2, [sp, #28]
 800844e:	e014      	b.n	800847a <_vfiprintf_r+0x13a>
 8008450:	eba0 0308 	sub.w	r3, r0, r8
 8008454:	fa09 f303 	lsl.w	r3, r9, r3
 8008458:	4313      	orrs	r3, r2
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	46a2      	mov	sl, r4
 800845e:	e7d2      	b.n	8008406 <_vfiprintf_r+0xc6>
 8008460:	9b03      	ldr	r3, [sp, #12]
 8008462:	1d19      	adds	r1, r3, #4
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	9103      	str	r1, [sp, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfbb      	ittet	lt
 800846c:	425b      	neglt	r3, r3
 800846e:	f042 0202 	orrlt.w	r2, r2, #2
 8008472:	9307      	strge	r3, [sp, #28]
 8008474:	9307      	strlt	r3, [sp, #28]
 8008476:	bfb8      	it	lt
 8008478:	9204      	strlt	r2, [sp, #16]
 800847a:	7823      	ldrb	r3, [r4, #0]
 800847c:	2b2e      	cmp	r3, #46	@ 0x2e
 800847e:	d10a      	bne.n	8008496 <_vfiprintf_r+0x156>
 8008480:	7863      	ldrb	r3, [r4, #1]
 8008482:	2b2a      	cmp	r3, #42	@ 0x2a
 8008484:	d132      	bne.n	80084ec <_vfiprintf_r+0x1ac>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	1d1a      	adds	r2, r3, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	9203      	str	r2, [sp, #12]
 800848e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008492:	3402      	adds	r4, #2
 8008494:	9305      	str	r3, [sp, #20]
 8008496:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800856c <_vfiprintf_r+0x22c>
 800849a:	7821      	ldrb	r1, [r4, #0]
 800849c:	2203      	movs	r2, #3
 800849e:	4650      	mov	r0, sl
 80084a0:	f7f7 fe96 	bl	80001d0 <memchr>
 80084a4:	b138      	cbz	r0, 80084b6 <_vfiprintf_r+0x176>
 80084a6:	9b04      	ldr	r3, [sp, #16]
 80084a8:	eba0 000a 	sub.w	r0, r0, sl
 80084ac:	2240      	movs	r2, #64	@ 0x40
 80084ae:	4082      	lsls	r2, r0
 80084b0:	4313      	orrs	r3, r2
 80084b2:	3401      	adds	r4, #1
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ba:	4829      	ldr	r0, [pc, #164]	@ (8008560 <_vfiprintf_r+0x220>)
 80084bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084c0:	2206      	movs	r2, #6
 80084c2:	f7f7 fe85 	bl	80001d0 <memchr>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d03f      	beq.n	800854a <_vfiprintf_r+0x20a>
 80084ca:	4b26      	ldr	r3, [pc, #152]	@ (8008564 <_vfiprintf_r+0x224>)
 80084cc:	bb1b      	cbnz	r3, 8008516 <_vfiprintf_r+0x1d6>
 80084ce:	9b03      	ldr	r3, [sp, #12]
 80084d0:	3307      	adds	r3, #7
 80084d2:	f023 0307 	bic.w	r3, r3, #7
 80084d6:	3308      	adds	r3, #8
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084dc:	443b      	add	r3, r7
 80084de:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e0:	e76a      	b.n	80083b8 <_vfiprintf_r+0x78>
 80084e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084e6:	460c      	mov	r4, r1
 80084e8:	2001      	movs	r0, #1
 80084ea:	e7a8      	b.n	800843e <_vfiprintf_r+0xfe>
 80084ec:	2300      	movs	r3, #0
 80084ee:	3401      	adds	r4, #1
 80084f0:	9305      	str	r3, [sp, #20]
 80084f2:	4619      	mov	r1, r3
 80084f4:	f04f 0c0a 	mov.w	ip, #10
 80084f8:	4620      	mov	r0, r4
 80084fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084fe:	3a30      	subs	r2, #48	@ 0x30
 8008500:	2a09      	cmp	r2, #9
 8008502:	d903      	bls.n	800850c <_vfiprintf_r+0x1cc>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d0c6      	beq.n	8008496 <_vfiprintf_r+0x156>
 8008508:	9105      	str	r1, [sp, #20]
 800850a:	e7c4      	b.n	8008496 <_vfiprintf_r+0x156>
 800850c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008510:	4604      	mov	r4, r0
 8008512:	2301      	movs	r3, #1
 8008514:	e7f0      	b.n	80084f8 <_vfiprintf_r+0x1b8>
 8008516:	ab03      	add	r3, sp, #12
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	462a      	mov	r2, r5
 800851c:	4b12      	ldr	r3, [pc, #72]	@ (8008568 <_vfiprintf_r+0x228>)
 800851e:	a904      	add	r1, sp, #16
 8008520:	4630      	mov	r0, r6
 8008522:	f7fc fb81 	bl	8004c28 <_printf_float>
 8008526:	4607      	mov	r7, r0
 8008528:	1c78      	adds	r0, r7, #1
 800852a:	d1d6      	bne.n	80084da <_vfiprintf_r+0x19a>
 800852c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800852e:	07d9      	lsls	r1, r3, #31
 8008530:	d405      	bmi.n	800853e <_vfiprintf_r+0x1fe>
 8008532:	89ab      	ldrh	r3, [r5, #12]
 8008534:	059a      	lsls	r2, r3, #22
 8008536:	d402      	bmi.n	800853e <_vfiprintf_r+0x1fe>
 8008538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800853a:	f7fd faf1 	bl	8005b20 <__retarget_lock_release_recursive>
 800853e:	89ab      	ldrh	r3, [r5, #12]
 8008540:	065b      	lsls	r3, r3, #25
 8008542:	f53f af1f 	bmi.w	8008384 <_vfiprintf_r+0x44>
 8008546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008548:	e71e      	b.n	8008388 <_vfiprintf_r+0x48>
 800854a:	ab03      	add	r3, sp, #12
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	462a      	mov	r2, r5
 8008550:	4b05      	ldr	r3, [pc, #20]	@ (8008568 <_vfiprintf_r+0x228>)
 8008552:	a904      	add	r1, sp, #16
 8008554:	4630      	mov	r0, r6
 8008556:	f7fc fdff 	bl	8005158 <_printf_i>
 800855a:	e7e4      	b.n	8008526 <_vfiprintf_r+0x1e6>
 800855c:	0800936d 	.word	0x0800936d
 8008560:	08009377 	.word	0x08009377
 8008564:	08004c29 	.word	0x08004c29
 8008568:	0800831b 	.word	0x0800831b
 800856c:	08009373 	.word	0x08009373

08008570 <__sflush_r>:
 8008570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	0716      	lsls	r6, r2, #28
 800857a:	4605      	mov	r5, r0
 800857c:	460c      	mov	r4, r1
 800857e:	d454      	bmi.n	800862a <__sflush_r+0xba>
 8008580:	684b      	ldr	r3, [r1, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dc02      	bgt.n	800858c <__sflush_r+0x1c>
 8008586:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	dd48      	ble.n	800861e <__sflush_r+0xae>
 800858c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800858e:	2e00      	cmp	r6, #0
 8008590:	d045      	beq.n	800861e <__sflush_r+0xae>
 8008592:	2300      	movs	r3, #0
 8008594:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008598:	682f      	ldr	r7, [r5, #0]
 800859a:	6a21      	ldr	r1, [r4, #32]
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	d030      	beq.n	8008602 <__sflush_r+0x92>
 80085a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	0759      	lsls	r1, r3, #29
 80085a6:	d505      	bpl.n	80085b4 <__sflush_r+0x44>
 80085a8:	6863      	ldr	r3, [r4, #4]
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085ae:	b10b      	cbz	r3, 80085b4 <__sflush_r+0x44>
 80085b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085b2:	1ad2      	subs	r2, r2, r3
 80085b4:	2300      	movs	r3, #0
 80085b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085b8:	6a21      	ldr	r1, [r4, #32]
 80085ba:	4628      	mov	r0, r5
 80085bc:	47b0      	blx	r6
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	d106      	bne.n	80085d2 <__sflush_r+0x62>
 80085c4:	6829      	ldr	r1, [r5, #0]
 80085c6:	291d      	cmp	r1, #29
 80085c8:	d82b      	bhi.n	8008622 <__sflush_r+0xb2>
 80085ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008674 <__sflush_r+0x104>)
 80085cc:	40ca      	lsrs	r2, r1
 80085ce:	07d6      	lsls	r6, r2, #31
 80085d0:	d527      	bpl.n	8008622 <__sflush_r+0xb2>
 80085d2:	2200      	movs	r2, #0
 80085d4:	6062      	str	r2, [r4, #4]
 80085d6:	04d9      	lsls	r1, r3, #19
 80085d8:	6922      	ldr	r2, [r4, #16]
 80085da:	6022      	str	r2, [r4, #0]
 80085dc:	d504      	bpl.n	80085e8 <__sflush_r+0x78>
 80085de:	1c42      	adds	r2, r0, #1
 80085e0:	d101      	bne.n	80085e6 <__sflush_r+0x76>
 80085e2:	682b      	ldr	r3, [r5, #0]
 80085e4:	b903      	cbnz	r3, 80085e8 <__sflush_r+0x78>
 80085e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80085e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085ea:	602f      	str	r7, [r5, #0]
 80085ec:	b1b9      	cbz	r1, 800861e <__sflush_r+0xae>
 80085ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085f2:	4299      	cmp	r1, r3
 80085f4:	d002      	beq.n	80085fc <__sflush_r+0x8c>
 80085f6:	4628      	mov	r0, r5
 80085f8:	f7fe f8f2 	bl	80067e0 <_free_r>
 80085fc:	2300      	movs	r3, #0
 80085fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008600:	e00d      	b.n	800861e <__sflush_r+0xae>
 8008602:	2301      	movs	r3, #1
 8008604:	4628      	mov	r0, r5
 8008606:	47b0      	blx	r6
 8008608:	4602      	mov	r2, r0
 800860a:	1c50      	adds	r0, r2, #1
 800860c:	d1c9      	bne.n	80085a2 <__sflush_r+0x32>
 800860e:	682b      	ldr	r3, [r5, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0c6      	beq.n	80085a2 <__sflush_r+0x32>
 8008614:	2b1d      	cmp	r3, #29
 8008616:	d001      	beq.n	800861c <__sflush_r+0xac>
 8008618:	2b16      	cmp	r3, #22
 800861a:	d11e      	bne.n	800865a <__sflush_r+0xea>
 800861c:	602f      	str	r7, [r5, #0]
 800861e:	2000      	movs	r0, #0
 8008620:	e022      	b.n	8008668 <__sflush_r+0xf8>
 8008622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008626:	b21b      	sxth	r3, r3
 8008628:	e01b      	b.n	8008662 <__sflush_r+0xf2>
 800862a:	690f      	ldr	r7, [r1, #16]
 800862c:	2f00      	cmp	r7, #0
 800862e:	d0f6      	beq.n	800861e <__sflush_r+0xae>
 8008630:	0793      	lsls	r3, r2, #30
 8008632:	680e      	ldr	r6, [r1, #0]
 8008634:	bf08      	it	eq
 8008636:	694b      	ldreq	r3, [r1, #20]
 8008638:	600f      	str	r7, [r1, #0]
 800863a:	bf18      	it	ne
 800863c:	2300      	movne	r3, #0
 800863e:	eba6 0807 	sub.w	r8, r6, r7
 8008642:	608b      	str	r3, [r1, #8]
 8008644:	f1b8 0f00 	cmp.w	r8, #0
 8008648:	dde9      	ble.n	800861e <__sflush_r+0xae>
 800864a:	6a21      	ldr	r1, [r4, #32]
 800864c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800864e:	4643      	mov	r3, r8
 8008650:	463a      	mov	r2, r7
 8008652:	4628      	mov	r0, r5
 8008654:	47b0      	blx	r6
 8008656:	2800      	cmp	r0, #0
 8008658:	dc08      	bgt.n	800866c <__sflush_r+0xfc>
 800865a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800865e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866c:	4407      	add	r7, r0
 800866e:	eba8 0800 	sub.w	r8, r8, r0
 8008672:	e7e7      	b.n	8008644 <__sflush_r+0xd4>
 8008674:	20400001 	.word	0x20400001

08008678 <_fflush_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	690b      	ldr	r3, [r1, #16]
 800867c:	4605      	mov	r5, r0
 800867e:	460c      	mov	r4, r1
 8008680:	b913      	cbnz	r3, 8008688 <_fflush_r+0x10>
 8008682:	2500      	movs	r5, #0
 8008684:	4628      	mov	r0, r5
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	b118      	cbz	r0, 8008692 <_fflush_r+0x1a>
 800868a:	6a03      	ldr	r3, [r0, #32]
 800868c:	b90b      	cbnz	r3, 8008692 <_fflush_r+0x1a>
 800868e:	f7fd f91b 	bl	80058c8 <__sinit>
 8008692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0f3      	beq.n	8008682 <_fflush_r+0xa>
 800869a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800869c:	07d0      	lsls	r0, r2, #31
 800869e:	d404      	bmi.n	80086aa <_fflush_r+0x32>
 80086a0:	0599      	lsls	r1, r3, #22
 80086a2:	d402      	bmi.n	80086aa <_fflush_r+0x32>
 80086a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086a6:	f7fd fa3a 	bl	8005b1e <__retarget_lock_acquire_recursive>
 80086aa:	4628      	mov	r0, r5
 80086ac:	4621      	mov	r1, r4
 80086ae:	f7ff ff5f 	bl	8008570 <__sflush_r>
 80086b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086b4:	07da      	lsls	r2, r3, #31
 80086b6:	4605      	mov	r5, r0
 80086b8:	d4e4      	bmi.n	8008684 <_fflush_r+0xc>
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	059b      	lsls	r3, r3, #22
 80086be:	d4e1      	bmi.n	8008684 <_fflush_r+0xc>
 80086c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086c2:	f7fd fa2d 	bl	8005b20 <__retarget_lock_release_recursive>
 80086c6:	e7dd      	b.n	8008684 <_fflush_r+0xc>

080086c8 <__swbuf_r>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	460e      	mov	r6, r1
 80086cc:	4614      	mov	r4, r2
 80086ce:	4605      	mov	r5, r0
 80086d0:	b118      	cbz	r0, 80086da <__swbuf_r+0x12>
 80086d2:	6a03      	ldr	r3, [r0, #32]
 80086d4:	b90b      	cbnz	r3, 80086da <__swbuf_r+0x12>
 80086d6:	f7fd f8f7 	bl	80058c8 <__sinit>
 80086da:	69a3      	ldr	r3, [r4, #24]
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	071a      	lsls	r2, r3, #28
 80086e2:	d501      	bpl.n	80086e8 <__swbuf_r+0x20>
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	b943      	cbnz	r3, 80086fa <__swbuf_r+0x32>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f82a 	bl	8008744 <__swsetup_r>
 80086f0:	b118      	cbz	r0, 80086fa <__swbuf_r+0x32>
 80086f2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80086f6:	4638      	mov	r0, r7
 80086f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	6922      	ldr	r2, [r4, #16]
 80086fe:	1a98      	subs	r0, r3, r2
 8008700:	6963      	ldr	r3, [r4, #20]
 8008702:	b2f6      	uxtb	r6, r6
 8008704:	4283      	cmp	r3, r0
 8008706:	4637      	mov	r7, r6
 8008708:	dc05      	bgt.n	8008716 <__swbuf_r+0x4e>
 800870a:	4621      	mov	r1, r4
 800870c:	4628      	mov	r0, r5
 800870e:	f7ff ffb3 	bl	8008678 <_fflush_r>
 8008712:	2800      	cmp	r0, #0
 8008714:	d1ed      	bne.n	80086f2 <__swbuf_r+0x2a>
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	3b01      	subs	r3, #1
 800871a:	60a3      	str	r3, [r4, #8]
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	6022      	str	r2, [r4, #0]
 8008722:	701e      	strb	r6, [r3, #0]
 8008724:	6962      	ldr	r2, [r4, #20]
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	429a      	cmp	r2, r3
 800872a:	d004      	beq.n	8008736 <__swbuf_r+0x6e>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	07db      	lsls	r3, r3, #31
 8008730:	d5e1      	bpl.n	80086f6 <__swbuf_r+0x2e>
 8008732:	2e0a      	cmp	r6, #10
 8008734:	d1df      	bne.n	80086f6 <__swbuf_r+0x2e>
 8008736:	4621      	mov	r1, r4
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff ff9d 	bl	8008678 <_fflush_r>
 800873e:	2800      	cmp	r0, #0
 8008740:	d0d9      	beq.n	80086f6 <__swbuf_r+0x2e>
 8008742:	e7d6      	b.n	80086f2 <__swbuf_r+0x2a>

08008744 <__swsetup_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4b29      	ldr	r3, [pc, #164]	@ (80087ec <__swsetup_r+0xa8>)
 8008748:	4605      	mov	r5, r0
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	460c      	mov	r4, r1
 800874e:	b118      	cbz	r0, 8008758 <__swsetup_r+0x14>
 8008750:	6a03      	ldr	r3, [r0, #32]
 8008752:	b90b      	cbnz	r3, 8008758 <__swsetup_r+0x14>
 8008754:	f7fd f8b8 	bl	80058c8 <__sinit>
 8008758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875c:	0719      	lsls	r1, r3, #28
 800875e:	d422      	bmi.n	80087a6 <__swsetup_r+0x62>
 8008760:	06da      	lsls	r2, r3, #27
 8008762:	d407      	bmi.n	8008774 <__swsetup_r+0x30>
 8008764:	2209      	movs	r2, #9
 8008766:	602a      	str	r2, [r5, #0]
 8008768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008772:	e033      	b.n	80087dc <__swsetup_r+0x98>
 8008774:	0758      	lsls	r0, r3, #29
 8008776:	d512      	bpl.n	800879e <__swsetup_r+0x5a>
 8008778:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800877a:	b141      	cbz	r1, 800878e <__swsetup_r+0x4a>
 800877c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <__swsetup_r+0x46>
 8008784:	4628      	mov	r0, r5
 8008786:	f7fe f82b 	bl	80067e0 <_free_r>
 800878a:	2300      	movs	r3, #0
 800878c:	6363      	str	r3, [r4, #52]	@ 0x34
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	2300      	movs	r3, #0
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	b94b      	cbnz	r3, 80087be <__swsetup_r+0x7a>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b4:	d003      	beq.n	80087be <__swsetup_r+0x7a>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 fc5d 	bl	8009078 <__smakebuf_r>
 80087be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c2:	f013 0201 	ands.w	r2, r3, #1
 80087c6:	d00a      	beq.n	80087de <__swsetup_r+0x9a>
 80087c8:	2200      	movs	r2, #0
 80087ca:	60a2      	str	r2, [r4, #8]
 80087cc:	6962      	ldr	r2, [r4, #20]
 80087ce:	4252      	negs	r2, r2
 80087d0:	61a2      	str	r2, [r4, #24]
 80087d2:	6922      	ldr	r2, [r4, #16]
 80087d4:	b942      	cbnz	r2, 80087e8 <__swsetup_r+0xa4>
 80087d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087da:	d1c5      	bne.n	8008768 <__swsetup_r+0x24>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	0799      	lsls	r1, r3, #30
 80087e0:	bf58      	it	pl
 80087e2:	6962      	ldrpl	r2, [r4, #20]
 80087e4:	60a2      	str	r2, [r4, #8]
 80087e6:	e7f4      	b.n	80087d2 <__swsetup_r+0x8e>
 80087e8:	2000      	movs	r0, #0
 80087ea:	e7f7      	b.n	80087dc <__swsetup_r+0x98>
 80087ec:	20000018 	.word	0x20000018

080087f0 <memmove>:
 80087f0:	4288      	cmp	r0, r1
 80087f2:	b510      	push	{r4, lr}
 80087f4:	eb01 0402 	add.w	r4, r1, r2
 80087f8:	d902      	bls.n	8008800 <memmove+0x10>
 80087fa:	4284      	cmp	r4, r0
 80087fc:	4623      	mov	r3, r4
 80087fe:	d807      	bhi.n	8008810 <memmove+0x20>
 8008800:	1e43      	subs	r3, r0, #1
 8008802:	42a1      	cmp	r1, r4
 8008804:	d008      	beq.n	8008818 <memmove+0x28>
 8008806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800880a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800880e:	e7f8      	b.n	8008802 <memmove+0x12>
 8008810:	4402      	add	r2, r0
 8008812:	4601      	mov	r1, r0
 8008814:	428a      	cmp	r2, r1
 8008816:	d100      	bne.n	800881a <memmove+0x2a>
 8008818:	bd10      	pop	{r4, pc}
 800881a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800881e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008822:	e7f7      	b.n	8008814 <memmove+0x24>

08008824 <strncmp>:
 8008824:	b510      	push	{r4, lr}
 8008826:	b16a      	cbz	r2, 8008844 <strncmp+0x20>
 8008828:	3901      	subs	r1, #1
 800882a:	1884      	adds	r4, r0, r2
 800882c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008830:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008834:	429a      	cmp	r2, r3
 8008836:	d103      	bne.n	8008840 <strncmp+0x1c>
 8008838:	42a0      	cmp	r0, r4
 800883a:	d001      	beq.n	8008840 <strncmp+0x1c>
 800883c:	2a00      	cmp	r2, #0
 800883e:	d1f5      	bne.n	800882c <strncmp+0x8>
 8008840:	1ad0      	subs	r0, r2, r3
 8008842:	bd10      	pop	{r4, pc}
 8008844:	4610      	mov	r0, r2
 8008846:	e7fc      	b.n	8008842 <strncmp+0x1e>

08008848 <_sbrk_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	@ (8008864 <_sbrk_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f9 f828 	bl	80018a8 <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_sbrk_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_sbrk_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000434 	.word	0x20000434

08008868 <memcpy>:
 8008868:	440a      	add	r2, r1
 800886a:	4291      	cmp	r1, r2
 800886c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008870:	d100      	bne.n	8008874 <memcpy+0xc>
 8008872:	4770      	bx	lr
 8008874:	b510      	push	{r4, lr}
 8008876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800887e:	4291      	cmp	r1, r2
 8008880:	d1f9      	bne.n	8008876 <memcpy+0xe>
 8008882:	bd10      	pop	{r4, pc}
 8008884:	0000      	movs	r0, r0
	...

08008888 <nan>:
 8008888:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008890 <nan+0x8>
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	00000000 	.word	0x00000000
 8008894:	7ff80000 	.word	0x7ff80000

08008898 <__assert_func>:
 8008898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800889a:	4614      	mov	r4, r2
 800889c:	461a      	mov	r2, r3
 800889e:	4b09      	ldr	r3, [pc, #36]	@ (80088c4 <__assert_func+0x2c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4605      	mov	r5, r0
 80088a4:	68d8      	ldr	r0, [r3, #12]
 80088a6:	b14c      	cbz	r4, 80088bc <__assert_func+0x24>
 80088a8:	4b07      	ldr	r3, [pc, #28]	@ (80088c8 <__assert_func+0x30>)
 80088aa:	9100      	str	r1, [sp, #0]
 80088ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088b0:	4906      	ldr	r1, [pc, #24]	@ (80088cc <__assert_func+0x34>)
 80088b2:	462b      	mov	r3, r5
 80088b4:	f000 fba8 	bl	8009008 <fiprintf>
 80088b8:	f000 fc3c 	bl	8009134 <abort>
 80088bc:	4b04      	ldr	r3, [pc, #16]	@ (80088d0 <__assert_func+0x38>)
 80088be:	461c      	mov	r4, r3
 80088c0:	e7f3      	b.n	80088aa <__assert_func+0x12>
 80088c2:	bf00      	nop
 80088c4:	20000018 	.word	0x20000018
 80088c8:	08009386 	.word	0x08009386
 80088cc:	08009393 	.word	0x08009393
 80088d0:	080093c1 	.word	0x080093c1

080088d4 <_calloc_r>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	fba1 5402 	umull	r5, r4, r1, r2
 80088da:	b934      	cbnz	r4, 80088ea <_calloc_r+0x16>
 80088dc:	4629      	mov	r1, r5
 80088de:	f7fd fff3 	bl	80068c8 <_malloc_r>
 80088e2:	4606      	mov	r6, r0
 80088e4:	b928      	cbnz	r0, 80088f2 <_calloc_r+0x1e>
 80088e6:	4630      	mov	r0, r6
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	220c      	movs	r2, #12
 80088ec:	6002      	str	r2, [r0, #0]
 80088ee:	2600      	movs	r6, #0
 80088f0:	e7f9      	b.n	80088e6 <_calloc_r+0x12>
 80088f2:	462a      	mov	r2, r5
 80088f4:	4621      	mov	r1, r4
 80088f6:	f7fd f894 	bl	8005a22 <memset>
 80088fa:	e7f4      	b.n	80088e6 <_calloc_r+0x12>

080088fc <rshift>:
 80088fc:	6903      	ldr	r3, [r0, #16]
 80088fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008906:	ea4f 1261 	mov.w	r2, r1, asr #5
 800890a:	f100 0414 	add.w	r4, r0, #20
 800890e:	dd45      	ble.n	800899c <rshift+0xa0>
 8008910:	f011 011f 	ands.w	r1, r1, #31
 8008914:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008918:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800891c:	d10c      	bne.n	8008938 <rshift+0x3c>
 800891e:	f100 0710 	add.w	r7, r0, #16
 8008922:	4629      	mov	r1, r5
 8008924:	42b1      	cmp	r1, r6
 8008926:	d334      	bcc.n	8008992 <rshift+0x96>
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	1eea      	subs	r2, r5, #3
 800892e:	4296      	cmp	r6, r2
 8008930:	bf38      	it	cc
 8008932:	2300      	movcc	r3, #0
 8008934:	4423      	add	r3, r4
 8008936:	e015      	b.n	8008964 <rshift+0x68>
 8008938:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800893c:	f1c1 0820 	rsb	r8, r1, #32
 8008940:	40cf      	lsrs	r7, r1
 8008942:	f105 0e04 	add.w	lr, r5, #4
 8008946:	46a1      	mov	r9, r4
 8008948:	4576      	cmp	r6, lr
 800894a:	46f4      	mov	ip, lr
 800894c:	d815      	bhi.n	800897a <rshift+0x7e>
 800894e:	1a9a      	subs	r2, r3, r2
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	3a04      	subs	r2, #4
 8008954:	3501      	adds	r5, #1
 8008956:	42ae      	cmp	r6, r5
 8008958:	bf38      	it	cc
 800895a:	2200      	movcc	r2, #0
 800895c:	18a3      	adds	r3, r4, r2
 800895e:	50a7      	str	r7, [r4, r2]
 8008960:	b107      	cbz	r7, 8008964 <rshift+0x68>
 8008962:	3304      	adds	r3, #4
 8008964:	1b1a      	subs	r2, r3, r4
 8008966:	42a3      	cmp	r3, r4
 8008968:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800896c:	bf08      	it	eq
 800896e:	2300      	moveq	r3, #0
 8008970:	6102      	str	r2, [r0, #16]
 8008972:	bf08      	it	eq
 8008974:	6143      	streq	r3, [r0, #20]
 8008976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800897a:	f8dc c000 	ldr.w	ip, [ip]
 800897e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008982:	ea4c 0707 	orr.w	r7, ip, r7
 8008986:	f849 7b04 	str.w	r7, [r9], #4
 800898a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800898e:	40cf      	lsrs	r7, r1
 8008990:	e7da      	b.n	8008948 <rshift+0x4c>
 8008992:	f851 cb04 	ldr.w	ip, [r1], #4
 8008996:	f847 cf04 	str.w	ip, [r7, #4]!
 800899a:	e7c3      	b.n	8008924 <rshift+0x28>
 800899c:	4623      	mov	r3, r4
 800899e:	e7e1      	b.n	8008964 <rshift+0x68>

080089a0 <__hexdig_fun>:
 80089a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d802      	bhi.n	80089ae <__hexdig_fun+0xe>
 80089a8:	3820      	subs	r0, #32
 80089aa:	b2c0      	uxtb	r0, r0
 80089ac:	4770      	bx	lr
 80089ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d801      	bhi.n	80089ba <__hexdig_fun+0x1a>
 80089b6:	3847      	subs	r0, #71	@ 0x47
 80089b8:	e7f7      	b.n	80089aa <__hexdig_fun+0xa>
 80089ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80089be:	2b05      	cmp	r3, #5
 80089c0:	d801      	bhi.n	80089c6 <__hexdig_fun+0x26>
 80089c2:	3827      	subs	r0, #39	@ 0x27
 80089c4:	e7f1      	b.n	80089aa <__hexdig_fun+0xa>
 80089c6:	2000      	movs	r0, #0
 80089c8:	4770      	bx	lr
	...

080089cc <__gethex>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	b085      	sub	sp, #20
 80089d2:	468a      	mov	sl, r1
 80089d4:	9302      	str	r3, [sp, #8]
 80089d6:	680b      	ldr	r3, [r1, #0]
 80089d8:	9001      	str	r0, [sp, #4]
 80089da:	4690      	mov	r8, r2
 80089dc:	1c9c      	adds	r4, r3, #2
 80089de:	46a1      	mov	r9, r4
 80089e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80089e4:	2830      	cmp	r0, #48	@ 0x30
 80089e6:	d0fa      	beq.n	80089de <__gethex+0x12>
 80089e8:	eba9 0303 	sub.w	r3, r9, r3
 80089ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80089f0:	f7ff ffd6 	bl	80089a0 <__hexdig_fun>
 80089f4:	4605      	mov	r5, r0
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d168      	bne.n	8008acc <__gethex+0x100>
 80089fa:	49a0      	ldr	r1, [pc, #640]	@ (8008c7c <__gethex+0x2b0>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	4648      	mov	r0, r9
 8008a00:	f7ff ff10 	bl	8008824 <strncmp>
 8008a04:	4607      	mov	r7, r0
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d167      	bne.n	8008ada <__gethex+0x10e>
 8008a0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008a0e:	4626      	mov	r6, r4
 8008a10:	f7ff ffc6 	bl	80089a0 <__hexdig_fun>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d062      	beq.n	8008ade <__gethex+0x112>
 8008a18:	4623      	mov	r3, r4
 8008a1a:	7818      	ldrb	r0, [r3, #0]
 8008a1c:	2830      	cmp	r0, #48	@ 0x30
 8008a1e:	4699      	mov	r9, r3
 8008a20:	f103 0301 	add.w	r3, r3, #1
 8008a24:	d0f9      	beq.n	8008a1a <__gethex+0x4e>
 8008a26:	f7ff ffbb 	bl	80089a0 <__hexdig_fun>
 8008a2a:	fab0 f580 	clz	r5, r0
 8008a2e:	096d      	lsrs	r5, r5, #5
 8008a30:	f04f 0b01 	mov.w	fp, #1
 8008a34:	464a      	mov	r2, r9
 8008a36:	4616      	mov	r6, r2
 8008a38:	3201      	adds	r2, #1
 8008a3a:	7830      	ldrb	r0, [r6, #0]
 8008a3c:	f7ff ffb0 	bl	80089a0 <__hexdig_fun>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1f8      	bne.n	8008a36 <__gethex+0x6a>
 8008a44:	498d      	ldr	r1, [pc, #564]	@ (8008c7c <__gethex+0x2b0>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff feeb 	bl	8008824 <strncmp>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d13f      	bne.n	8008ad2 <__gethex+0x106>
 8008a52:	b944      	cbnz	r4, 8008a66 <__gethex+0x9a>
 8008a54:	1c74      	adds	r4, r6, #1
 8008a56:	4622      	mov	r2, r4
 8008a58:	4616      	mov	r6, r2
 8008a5a:	3201      	adds	r2, #1
 8008a5c:	7830      	ldrb	r0, [r6, #0]
 8008a5e:	f7ff ff9f 	bl	80089a0 <__hexdig_fun>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d1f8      	bne.n	8008a58 <__gethex+0x8c>
 8008a66:	1ba4      	subs	r4, r4, r6
 8008a68:	00a7      	lsls	r7, r4, #2
 8008a6a:	7833      	ldrb	r3, [r6, #0]
 8008a6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a70:	2b50      	cmp	r3, #80	@ 0x50
 8008a72:	d13e      	bne.n	8008af2 <__gethex+0x126>
 8008a74:	7873      	ldrb	r3, [r6, #1]
 8008a76:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a78:	d033      	beq.n	8008ae2 <__gethex+0x116>
 8008a7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a7c:	d034      	beq.n	8008ae8 <__gethex+0x11c>
 8008a7e:	1c71      	adds	r1, r6, #1
 8008a80:	2400      	movs	r4, #0
 8008a82:	7808      	ldrb	r0, [r1, #0]
 8008a84:	f7ff ff8c 	bl	80089a0 <__hexdig_fun>
 8008a88:	1e43      	subs	r3, r0, #1
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b18      	cmp	r3, #24
 8008a8e:	d830      	bhi.n	8008af2 <__gethex+0x126>
 8008a90:	f1a0 0210 	sub.w	r2, r0, #16
 8008a94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a98:	f7ff ff82 	bl	80089a0 <__hexdig_fun>
 8008a9c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008aa0:	fa5f fc8c 	uxtb.w	ip, ip
 8008aa4:	f1bc 0f18 	cmp.w	ip, #24
 8008aa8:	f04f 030a 	mov.w	r3, #10
 8008aac:	d91e      	bls.n	8008aec <__gethex+0x120>
 8008aae:	b104      	cbz	r4, 8008ab2 <__gethex+0xe6>
 8008ab0:	4252      	negs	r2, r2
 8008ab2:	4417      	add	r7, r2
 8008ab4:	f8ca 1000 	str.w	r1, [sl]
 8008ab8:	b1ed      	cbz	r5, 8008af6 <__gethex+0x12a>
 8008aba:	f1bb 0f00 	cmp.w	fp, #0
 8008abe:	bf0c      	ite	eq
 8008ac0:	2506      	moveq	r5, #6
 8008ac2:	2500      	movne	r5, #0
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	b005      	add	sp, #20
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	2500      	movs	r5, #0
 8008ace:	462c      	mov	r4, r5
 8008ad0:	e7b0      	b.n	8008a34 <__gethex+0x68>
 8008ad2:	2c00      	cmp	r4, #0
 8008ad4:	d1c7      	bne.n	8008a66 <__gethex+0x9a>
 8008ad6:	4627      	mov	r7, r4
 8008ad8:	e7c7      	b.n	8008a6a <__gethex+0x9e>
 8008ada:	464e      	mov	r6, r9
 8008adc:	462f      	mov	r7, r5
 8008ade:	2501      	movs	r5, #1
 8008ae0:	e7c3      	b.n	8008a6a <__gethex+0x9e>
 8008ae2:	2400      	movs	r4, #0
 8008ae4:	1cb1      	adds	r1, r6, #2
 8008ae6:	e7cc      	b.n	8008a82 <__gethex+0xb6>
 8008ae8:	2401      	movs	r4, #1
 8008aea:	e7fb      	b.n	8008ae4 <__gethex+0x118>
 8008aec:	fb03 0002 	mla	r0, r3, r2, r0
 8008af0:	e7ce      	b.n	8008a90 <__gethex+0xc4>
 8008af2:	4631      	mov	r1, r6
 8008af4:	e7de      	b.n	8008ab4 <__gethex+0xe8>
 8008af6:	eba6 0309 	sub.w	r3, r6, r9
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4629      	mov	r1, r5
 8008afe:	2b07      	cmp	r3, #7
 8008b00:	dc0a      	bgt.n	8008b18 <__gethex+0x14c>
 8008b02:	9801      	ldr	r0, [sp, #4]
 8008b04:	f7fd ff6c 	bl	80069e0 <_Balloc>
 8008b08:	4604      	mov	r4, r0
 8008b0a:	b940      	cbnz	r0, 8008b1e <__gethex+0x152>
 8008b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008c80 <__gethex+0x2b4>)
 8008b0e:	4602      	mov	r2, r0
 8008b10:	21e4      	movs	r1, #228	@ 0xe4
 8008b12:	485c      	ldr	r0, [pc, #368]	@ (8008c84 <__gethex+0x2b8>)
 8008b14:	f7ff fec0 	bl	8008898 <__assert_func>
 8008b18:	3101      	adds	r1, #1
 8008b1a:	105b      	asrs	r3, r3, #1
 8008b1c:	e7ef      	b.n	8008afe <__gethex+0x132>
 8008b1e:	f100 0a14 	add.w	sl, r0, #20
 8008b22:	2300      	movs	r3, #0
 8008b24:	4655      	mov	r5, sl
 8008b26:	469b      	mov	fp, r3
 8008b28:	45b1      	cmp	r9, r6
 8008b2a:	d337      	bcc.n	8008b9c <__gethex+0x1d0>
 8008b2c:	f845 bb04 	str.w	fp, [r5], #4
 8008b30:	eba5 050a 	sub.w	r5, r5, sl
 8008b34:	10ad      	asrs	r5, r5, #2
 8008b36:	6125      	str	r5, [r4, #16]
 8008b38:	4658      	mov	r0, fp
 8008b3a:	f7fe f843 	bl	8006bc4 <__hi0bits>
 8008b3e:	016d      	lsls	r5, r5, #5
 8008b40:	f8d8 6000 	ldr.w	r6, [r8]
 8008b44:	1a2d      	subs	r5, r5, r0
 8008b46:	42b5      	cmp	r5, r6
 8008b48:	dd54      	ble.n	8008bf4 <__gethex+0x228>
 8008b4a:	1bad      	subs	r5, r5, r6
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7fe fbcf 	bl	80072f2 <__any_on>
 8008b54:	4681      	mov	r9, r0
 8008b56:	b178      	cbz	r0, 8008b78 <__gethex+0x1ac>
 8008b58:	1e6b      	subs	r3, r5, #1
 8008b5a:	1159      	asrs	r1, r3, #5
 8008b5c:	f003 021f 	and.w	r2, r3, #31
 8008b60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b64:	f04f 0901 	mov.w	r9, #1
 8008b68:	fa09 f202 	lsl.w	r2, r9, r2
 8008b6c:	420a      	tst	r2, r1
 8008b6e:	d003      	beq.n	8008b78 <__gethex+0x1ac>
 8008b70:	454b      	cmp	r3, r9
 8008b72:	dc36      	bgt.n	8008be2 <__gethex+0x216>
 8008b74:	f04f 0902 	mov.w	r9, #2
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7ff febe 	bl	80088fc <rshift>
 8008b80:	442f      	add	r7, r5
 8008b82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b86:	42bb      	cmp	r3, r7
 8008b88:	da42      	bge.n	8008c10 <__gethex+0x244>
 8008b8a:	9801      	ldr	r0, [sp, #4]
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	f7fd ff67 	bl	8006a60 <_Bfree>
 8008b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b94:	2300      	movs	r3, #0
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	25a3      	movs	r5, #163	@ 0xa3
 8008b9a:	e793      	b.n	8008ac4 <__gethex+0xf8>
 8008b9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ba0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008ba2:	d012      	beq.n	8008bca <__gethex+0x1fe>
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d104      	bne.n	8008bb2 <__gethex+0x1e6>
 8008ba8:	f845 bb04 	str.w	fp, [r5], #4
 8008bac:	f04f 0b00 	mov.w	fp, #0
 8008bb0:	465b      	mov	r3, fp
 8008bb2:	7830      	ldrb	r0, [r6, #0]
 8008bb4:	9303      	str	r3, [sp, #12]
 8008bb6:	f7ff fef3 	bl	80089a0 <__hexdig_fun>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	f000 000f 	and.w	r0, r0, #15
 8008bc0:	4098      	lsls	r0, r3
 8008bc2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	e7ae      	b.n	8008b28 <__gethex+0x15c>
 8008bca:	45b1      	cmp	r9, r6
 8008bcc:	d8ea      	bhi.n	8008ba4 <__gethex+0x1d8>
 8008bce:	492b      	ldr	r1, [pc, #172]	@ (8008c7c <__gethex+0x2b0>)
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff fe25 	bl	8008824 <strncmp>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d1e1      	bne.n	8008ba4 <__gethex+0x1d8>
 8008be0:	e7a2      	b.n	8008b28 <__gethex+0x15c>
 8008be2:	1ea9      	subs	r1, r5, #2
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7fe fb84 	bl	80072f2 <__any_on>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d0c2      	beq.n	8008b74 <__gethex+0x1a8>
 8008bee:	f04f 0903 	mov.w	r9, #3
 8008bf2:	e7c1      	b.n	8008b78 <__gethex+0x1ac>
 8008bf4:	da09      	bge.n	8008c0a <__gethex+0x23e>
 8008bf6:	1b75      	subs	r5, r6, r5
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	9801      	ldr	r0, [sp, #4]
 8008bfc:	462a      	mov	r2, r5
 8008bfe:	f7fe f93f 	bl	8006e80 <__lshift>
 8008c02:	1b7f      	subs	r7, r7, r5
 8008c04:	4604      	mov	r4, r0
 8008c06:	f100 0a14 	add.w	sl, r0, #20
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	e7b8      	b.n	8008b82 <__gethex+0x1b6>
 8008c10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c14:	42bd      	cmp	r5, r7
 8008c16:	dd6f      	ble.n	8008cf8 <__gethex+0x32c>
 8008c18:	1bed      	subs	r5, r5, r7
 8008c1a:	42ae      	cmp	r6, r5
 8008c1c:	dc34      	bgt.n	8008c88 <__gethex+0x2bc>
 8008c1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d022      	beq.n	8008c6c <__gethex+0x2a0>
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d024      	beq.n	8008c74 <__gethex+0x2a8>
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d115      	bne.n	8008c5a <__gethex+0x28e>
 8008c2e:	42ae      	cmp	r6, r5
 8008c30:	d113      	bne.n	8008c5a <__gethex+0x28e>
 8008c32:	2e01      	cmp	r6, #1
 8008c34:	d10b      	bne.n	8008c4e <__gethex+0x282>
 8008c36:	9a02      	ldr	r2, [sp, #8]
 8008c38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	f8ca 3000 	str.w	r3, [sl]
 8008c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c48:	2562      	movs	r5, #98	@ 0x62
 8008c4a:	601c      	str	r4, [r3, #0]
 8008c4c:	e73a      	b.n	8008ac4 <__gethex+0xf8>
 8008c4e:	1e71      	subs	r1, r6, #1
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7fe fb4e 	bl	80072f2 <__any_on>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d1ed      	bne.n	8008c36 <__gethex+0x26a>
 8008c5a:	9801      	ldr	r0, [sp, #4]
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f7fd feff 	bl	8006a60 <_Bfree>
 8008c62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c64:	2300      	movs	r3, #0
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	2550      	movs	r5, #80	@ 0x50
 8008c6a:	e72b      	b.n	8008ac4 <__gethex+0xf8>
 8008c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f3      	bne.n	8008c5a <__gethex+0x28e>
 8008c72:	e7e0      	b.n	8008c36 <__gethex+0x26a>
 8008c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1dd      	bne.n	8008c36 <__gethex+0x26a>
 8008c7a:	e7ee      	b.n	8008c5a <__gethex+0x28e>
 8008c7c:	0800936b 	.word	0x0800936b
 8008c80:	08009301 	.word	0x08009301
 8008c84:	080093c2 	.word	0x080093c2
 8008c88:	1e6f      	subs	r7, r5, #1
 8008c8a:	f1b9 0f00 	cmp.w	r9, #0
 8008c8e:	d130      	bne.n	8008cf2 <__gethex+0x326>
 8008c90:	b127      	cbz	r7, 8008c9c <__gethex+0x2d0>
 8008c92:	4639      	mov	r1, r7
 8008c94:	4620      	mov	r0, r4
 8008c96:	f7fe fb2c 	bl	80072f2 <__any_on>
 8008c9a:	4681      	mov	r9, r0
 8008c9c:	117a      	asrs	r2, r7, #5
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008ca4:	f007 071f 	and.w	r7, r7, #31
 8008ca8:	40bb      	lsls	r3, r7
 8008caa:	4213      	tst	r3, r2
 8008cac:	4629      	mov	r1, r5
 8008cae:	4620      	mov	r0, r4
 8008cb0:	bf18      	it	ne
 8008cb2:	f049 0902 	orrne.w	r9, r9, #2
 8008cb6:	f7ff fe21 	bl	80088fc <rshift>
 8008cba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008cbe:	1b76      	subs	r6, r6, r5
 8008cc0:	2502      	movs	r5, #2
 8008cc2:	f1b9 0f00 	cmp.w	r9, #0
 8008cc6:	d047      	beq.n	8008d58 <__gethex+0x38c>
 8008cc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d015      	beq.n	8008cfc <__gethex+0x330>
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d017      	beq.n	8008d04 <__gethex+0x338>
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d109      	bne.n	8008cec <__gethex+0x320>
 8008cd8:	f019 0f02 	tst.w	r9, #2
 8008cdc:	d006      	beq.n	8008cec <__gethex+0x320>
 8008cde:	f8da 3000 	ldr.w	r3, [sl]
 8008ce2:	ea49 0903 	orr.w	r9, r9, r3
 8008ce6:	f019 0f01 	tst.w	r9, #1
 8008cea:	d10e      	bne.n	8008d0a <__gethex+0x33e>
 8008cec:	f045 0510 	orr.w	r5, r5, #16
 8008cf0:	e032      	b.n	8008d58 <__gethex+0x38c>
 8008cf2:	f04f 0901 	mov.w	r9, #1
 8008cf6:	e7d1      	b.n	8008c9c <__gethex+0x2d0>
 8008cf8:	2501      	movs	r5, #1
 8008cfa:	e7e2      	b.n	8008cc2 <__gethex+0x2f6>
 8008cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cfe:	f1c3 0301 	rsb	r3, r3, #1
 8008d02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f0      	beq.n	8008cec <__gethex+0x320>
 8008d0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d0e:	f104 0314 	add.w	r3, r4, #20
 8008d12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d1a:	f04f 0c00 	mov.w	ip, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d24:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008d28:	d01b      	beq.n	8008d62 <__gethex+0x396>
 8008d2a:	3201      	adds	r2, #1
 8008d2c:	6002      	str	r2, [r0, #0]
 8008d2e:	2d02      	cmp	r5, #2
 8008d30:	f104 0314 	add.w	r3, r4, #20
 8008d34:	d13c      	bne.n	8008db0 <__gethex+0x3e4>
 8008d36:	f8d8 2000 	ldr.w	r2, [r8]
 8008d3a:	3a01      	subs	r2, #1
 8008d3c:	42b2      	cmp	r2, r6
 8008d3e:	d109      	bne.n	8008d54 <__gethex+0x388>
 8008d40:	1171      	asrs	r1, r6, #5
 8008d42:	2201      	movs	r2, #1
 8008d44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d48:	f006 061f 	and.w	r6, r6, #31
 8008d4c:	fa02 f606 	lsl.w	r6, r2, r6
 8008d50:	421e      	tst	r6, r3
 8008d52:	d13a      	bne.n	8008dca <__gethex+0x3fe>
 8008d54:	f045 0520 	orr.w	r5, r5, #32
 8008d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d5a:	601c      	str	r4, [r3, #0]
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	601f      	str	r7, [r3, #0]
 8008d60:	e6b0      	b.n	8008ac4 <__gethex+0xf8>
 8008d62:	4299      	cmp	r1, r3
 8008d64:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d68:	d8d9      	bhi.n	8008d1e <__gethex+0x352>
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	459b      	cmp	fp, r3
 8008d6e:	db17      	blt.n	8008da0 <__gethex+0x3d4>
 8008d70:	6861      	ldr	r1, [r4, #4]
 8008d72:	9801      	ldr	r0, [sp, #4]
 8008d74:	3101      	adds	r1, #1
 8008d76:	f7fd fe33 	bl	80069e0 <_Balloc>
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	b918      	cbnz	r0, 8008d86 <__gethex+0x3ba>
 8008d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008de8 <__gethex+0x41c>)
 8008d80:	4602      	mov	r2, r0
 8008d82:	2184      	movs	r1, #132	@ 0x84
 8008d84:	e6c5      	b.n	8008b12 <__gethex+0x146>
 8008d86:	6922      	ldr	r2, [r4, #16]
 8008d88:	3202      	adds	r2, #2
 8008d8a:	f104 010c 	add.w	r1, r4, #12
 8008d8e:	0092      	lsls	r2, r2, #2
 8008d90:	300c      	adds	r0, #12
 8008d92:	f7ff fd69 	bl	8008868 <memcpy>
 8008d96:	4621      	mov	r1, r4
 8008d98:	9801      	ldr	r0, [sp, #4]
 8008d9a:	f7fd fe61 	bl	8006a60 <_Bfree>
 8008d9e:	464c      	mov	r4, r9
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008da8:	6122      	str	r2, [r4, #16]
 8008daa:	2201      	movs	r2, #1
 8008dac:	615a      	str	r2, [r3, #20]
 8008dae:	e7be      	b.n	8008d2e <__gethex+0x362>
 8008db0:	6922      	ldr	r2, [r4, #16]
 8008db2:	455a      	cmp	r2, fp
 8008db4:	dd0b      	ble.n	8008dce <__gethex+0x402>
 8008db6:	2101      	movs	r1, #1
 8008db8:	4620      	mov	r0, r4
 8008dba:	f7ff fd9f 	bl	80088fc <rshift>
 8008dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dc2:	3701      	adds	r7, #1
 8008dc4:	42bb      	cmp	r3, r7
 8008dc6:	f6ff aee0 	blt.w	8008b8a <__gethex+0x1be>
 8008dca:	2501      	movs	r5, #1
 8008dcc:	e7c2      	b.n	8008d54 <__gethex+0x388>
 8008dce:	f016 061f 	ands.w	r6, r6, #31
 8008dd2:	d0fa      	beq.n	8008dca <__gethex+0x3fe>
 8008dd4:	4453      	add	r3, sl
 8008dd6:	f1c6 0620 	rsb	r6, r6, #32
 8008dda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dde:	f7fd fef1 	bl	8006bc4 <__hi0bits>
 8008de2:	42b0      	cmp	r0, r6
 8008de4:	dbe7      	blt.n	8008db6 <__gethex+0x3ea>
 8008de6:	e7f0      	b.n	8008dca <__gethex+0x3fe>
 8008de8:	08009301 	.word	0x08009301

08008dec <L_shift>:
 8008dec:	f1c2 0208 	rsb	r2, r2, #8
 8008df0:	0092      	lsls	r2, r2, #2
 8008df2:	b570      	push	{r4, r5, r6, lr}
 8008df4:	f1c2 0620 	rsb	r6, r2, #32
 8008df8:	6843      	ldr	r3, [r0, #4]
 8008dfa:	6804      	ldr	r4, [r0, #0]
 8008dfc:	fa03 f506 	lsl.w	r5, r3, r6
 8008e00:	432c      	orrs	r4, r5
 8008e02:	40d3      	lsrs	r3, r2
 8008e04:	6004      	str	r4, [r0, #0]
 8008e06:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e0a:	4288      	cmp	r0, r1
 8008e0c:	d3f4      	bcc.n	8008df8 <L_shift+0xc>
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}

08008e10 <__match>:
 8008e10:	b530      	push	{r4, r5, lr}
 8008e12:	6803      	ldr	r3, [r0, #0]
 8008e14:	3301      	adds	r3, #1
 8008e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e1a:	b914      	cbnz	r4, 8008e22 <__match+0x12>
 8008e1c:	6003      	str	r3, [r0, #0]
 8008e1e:	2001      	movs	r0, #1
 8008e20:	bd30      	pop	{r4, r5, pc}
 8008e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008e2a:	2d19      	cmp	r5, #25
 8008e2c:	bf98      	it	ls
 8008e2e:	3220      	addls	r2, #32
 8008e30:	42a2      	cmp	r2, r4
 8008e32:	d0f0      	beq.n	8008e16 <__match+0x6>
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7f3      	b.n	8008e20 <__match+0x10>

08008e38 <__hexnan>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	680b      	ldr	r3, [r1, #0]
 8008e3e:	6801      	ldr	r1, [r0, #0]
 8008e40:	115e      	asrs	r6, r3, #5
 8008e42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e46:	f013 031f 	ands.w	r3, r3, #31
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	bf18      	it	ne
 8008e4e:	3604      	addne	r6, #4
 8008e50:	2500      	movs	r5, #0
 8008e52:	1f37      	subs	r7, r6, #4
 8008e54:	4682      	mov	sl, r0
 8008e56:	4690      	mov	r8, r2
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e5e:	46b9      	mov	r9, r7
 8008e60:	463c      	mov	r4, r7
 8008e62:	9502      	str	r5, [sp, #8]
 8008e64:	46ab      	mov	fp, r5
 8008e66:	784a      	ldrb	r2, [r1, #1]
 8008e68:	1c4b      	adds	r3, r1, #1
 8008e6a:	9303      	str	r3, [sp, #12]
 8008e6c:	b342      	cbz	r2, 8008ec0 <__hexnan+0x88>
 8008e6e:	4610      	mov	r0, r2
 8008e70:	9105      	str	r1, [sp, #20]
 8008e72:	9204      	str	r2, [sp, #16]
 8008e74:	f7ff fd94 	bl	80089a0 <__hexdig_fun>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d151      	bne.n	8008f20 <__hexnan+0xe8>
 8008e7c:	9a04      	ldr	r2, [sp, #16]
 8008e7e:	9905      	ldr	r1, [sp, #20]
 8008e80:	2a20      	cmp	r2, #32
 8008e82:	d818      	bhi.n	8008eb6 <__hexnan+0x7e>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	459b      	cmp	fp, r3
 8008e88:	dd13      	ble.n	8008eb2 <__hexnan+0x7a>
 8008e8a:	454c      	cmp	r4, r9
 8008e8c:	d206      	bcs.n	8008e9c <__hexnan+0x64>
 8008e8e:	2d07      	cmp	r5, #7
 8008e90:	dc04      	bgt.n	8008e9c <__hexnan+0x64>
 8008e92:	462a      	mov	r2, r5
 8008e94:	4649      	mov	r1, r9
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff ffa8 	bl	8008dec <L_shift>
 8008e9c:	4544      	cmp	r4, r8
 8008e9e:	d952      	bls.n	8008f46 <__hexnan+0x10e>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f1a4 0904 	sub.w	r9, r4, #4
 8008ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008eaa:	f8cd b008 	str.w	fp, [sp, #8]
 8008eae:	464c      	mov	r4, r9
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	9903      	ldr	r1, [sp, #12]
 8008eb4:	e7d7      	b.n	8008e66 <__hexnan+0x2e>
 8008eb6:	2a29      	cmp	r2, #41	@ 0x29
 8008eb8:	d157      	bne.n	8008f6a <__hexnan+0x132>
 8008eba:	3102      	adds	r1, #2
 8008ebc:	f8ca 1000 	str.w	r1, [sl]
 8008ec0:	f1bb 0f00 	cmp.w	fp, #0
 8008ec4:	d051      	beq.n	8008f6a <__hexnan+0x132>
 8008ec6:	454c      	cmp	r4, r9
 8008ec8:	d206      	bcs.n	8008ed8 <__hexnan+0xa0>
 8008eca:	2d07      	cmp	r5, #7
 8008ecc:	dc04      	bgt.n	8008ed8 <__hexnan+0xa0>
 8008ece:	462a      	mov	r2, r5
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff ff8a 	bl	8008dec <L_shift>
 8008ed8:	4544      	cmp	r4, r8
 8008eda:	d936      	bls.n	8008f4a <__hexnan+0x112>
 8008edc:	f1a8 0204 	sub.w	r2, r8, #4
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ee6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008eea:	429f      	cmp	r7, r3
 8008eec:	d2f9      	bcs.n	8008ee2 <__hexnan+0xaa>
 8008eee:	1b3b      	subs	r3, r7, r4
 8008ef0:	f023 0303 	bic.w	r3, r3, #3
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	3401      	adds	r4, #1
 8008ef8:	3e03      	subs	r6, #3
 8008efa:	42b4      	cmp	r4, r6
 8008efc:	bf88      	it	hi
 8008efe:	2304      	movhi	r3, #4
 8008f00:	4443      	add	r3, r8
 8008f02:	2200      	movs	r2, #0
 8008f04:	f843 2b04 	str.w	r2, [r3], #4
 8008f08:	429f      	cmp	r7, r3
 8008f0a:	d2fb      	bcs.n	8008f04 <__hexnan+0xcc>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	b91b      	cbnz	r3, 8008f18 <__hexnan+0xe0>
 8008f10:	4547      	cmp	r7, r8
 8008f12:	d128      	bne.n	8008f66 <__hexnan+0x12e>
 8008f14:	2301      	movs	r3, #1
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	2005      	movs	r0, #5
 8008f1a:	b007      	add	sp, #28
 8008f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f20:	3501      	adds	r5, #1
 8008f22:	2d08      	cmp	r5, #8
 8008f24:	f10b 0b01 	add.w	fp, fp, #1
 8008f28:	dd06      	ble.n	8008f38 <__hexnan+0x100>
 8008f2a:	4544      	cmp	r4, r8
 8008f2c:	d9c1      	bls.n	8008eb2 <__hexnan+0x7a>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f34:	2501      	movs	r5, #1
 8008f36:	3c04      	subs	r4, #4
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	f000 000f 	and.w	r0, r0, #15
 8008f3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f42:	6020      	str	r0, [r4, #0]
 8008f44:	e7b5      	b.n	8008eb2 <__hexnan+0x7a>
 8008f46:	2508      	movs	r5, #8
 8008f48:	e7b3      	b.n	8008eb2 <__hexnan+0x7a>
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0dd      	beq.n	8008f0c <__hexnan+0xd4>
 8008f50:	f1c3 0320 	rsb	r3, r3, #32
 8008f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f58:	40da      	lsrs	r2, r3
 8008f5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f64:	e7d2      	b.n	8008f0c <__hexnan+0xd4>
 8008f66:	3f04      	subs	r7, #4
 8008f68:	e7d0      	b.n	8008f0c <__hexnan+0xd4>
 8008f6a:	2004      	movs	r0, #4
 8008f6c:	e7d5      	b.n	8008f1a <__hexnan+0xe2>

08008f6e <__ascii_mbtowc>:
 8008f6e:	b082      	sub	sp, #8
 8008f70:	b901      	cbnz	r1, 8008f74 <__ascii_mbtowc+0x6>
 8008f72:	a901      	add	r1, sp, #4
 8008f74:	b142      	cbz	r2, 8008f88 <__ascii_mbtowc+0x1a>
 8008f76:	b14b      	cbz	r3, 8008f8c <__ascii_mbtowc+0x1e>
 8008f78:	7813      	ldrb	r3, [r2, #0]
 8008f7a:	600b      	str	r3, [r1, #0]
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	1e10      	subs	r0, r2, #0
 8008f80:	bf18      	it	ne
 8008f82:	2001      	movne	r0, #1
 8008f84:	b002      	add	sp, #8
 8008f86:	4770      	bx	lr
 8008f88:	4610      	mov	r0, r2
 8008f8a:	e7fb      	b.n	8008f84 <__ascii_mbtowc+0x16>
 8008f8c:	f06f 0001 	mvn.w	r0, #1
 8008f90:	e7f8      	b.n	8008f84 <__ascii_mbtowc+0x16>

08008f92 <_realloc_r>:
 8008f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f96:	4607      	mov	r7, r0
 8008f98:	4614      	mov	r4, r2
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	b921      	cbnz	r1, 8008fa8 <_realloc_r+0x16>
 8008f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	f7fd bc90 	b.w	80068c8 <_malloc_r>
 8008fa8:	b92a      	cbnz	r2, 8008fb6 <_realloc_r+0x24>
 8008faa:	f7fd fc19 	bl	80067e0 <_free_r>
 8008fae:	4625      	mov	r5, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb6:	f000 f8c4 	bl	8009142 <_malloc_usable_size_r>
 8008fba:	4284      	cmp	r4, r0
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	d802      	bhi.n	8008fc6 <_realloc_r+0x34>
 8008fc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fc4:	d8f4      	bhi.n	8008fb0 <_realloc_r+0x1e>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7fd fc7d 	bl	80068c8 <_malloc_r>
 8008fce:	4680      	mov	r8, r0
 8008fd0:	b908      	cbnz	r0, 8008fd6 <_realloc_r+0x44>
 8008fd2:	4645      	mov	r5, r8
 8008fd4:	e7ec      	b.n	8008fb0 <_realloc_r+0x1e>
 8008fd6:	42b4      	cmp	r4, r6
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	bf28      	it	cs
 8008fde:	4632      	movcs	r2, r6
 8008fe0:	f7ff fc42 	bl	8008868 <memcpy>
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f7fd fbfa 	bl	80067e0 <_free_r>
 8008fec:	e7f1      	b.n	8008fd2 <_realloc_r+0x40>

08008fee <__ascii_wctomb>:
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	b141      	cbz	r1, 8009006 <__ascii_wctomb+0x18>
 8008ff4:	2aff      	cmp	r2, #255	@ 0xff
 8008ff6:	d904      	bls.n	8009002 <__ascii_wctomb+0x14>
 8008ff8:	228a      	movs	r2, #138	@ 0x8a
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009000:	4770      	bx	lr
 8009002:	700a      	strb	r2, [r1, #0]
 8009004:	2001      	movs	r0, #1
 8009006:	4770      	bx	lr

08009008 <fiprintf>:
 8009008:	b40e      	push	{r1, r2, r3}
 800900a:	b503      	push	{r0, r1, lr}
 800900c:	4601      	mov	r1, r0
 800900e:	ab03      	add	r3, sp, #12
 8009010:	4805      	ldr	r0, [pc, #20]	@ (8009028 <fiprintf+0x20>)
 8009012:	f853 2b04 	ldr.w	r2, [r3], #4
 8009016:	6800      	ldr	r0, [r0, #0]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	f7ff f991 	bl	8008340 <_vfiprintf_r>
 800901e:	b002      	add	sp, #8
 8009020:	f85d eb04 	ldr.w	lr, [sp], #4
 8009024:	b003      	add	sp, #12
 8009026:	4770      	bx	lr
 8009028:	20000018 	.word	0x20000018

0800902c <__swhatbuf_r>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	460c      	mov	r4, r1
 8009030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009034:	2900      	cmp	r1, #0
 8009036:	b096      	sub	sp, #88	@ 0x58
 8009038:	4615      	mov	r5, r2
 800903a:	461e      	mov	r6, r3
 800903c:	da0d      	bge.n	800905a <__swhatbuf_r+0x2e>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009044:	f04f 0100 	mov.w	r1, #0
 8009048:	bf14      	ite	ne
 800904a:	2340      	movne	r3, #64	@ 0x40
 800904c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009050:	2000      	movs	r0, #0
 8009052:	6031      	str	r1, [r6, #0]
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	b016      	add	sp, #88	@ 0x58
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	466a      	mov	r2, sp
 800905c:	f000 f848 	bl	80090f0 <_fstat_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	dbec      	blt.n	800903e <__swhatbuf_r+0x12>
 8009064:	9901      	ldr	r1, [sp, #4]
 8009066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800906a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800906e:	4259      	negs	r1, r3
 8009070:	4159      	adcs	r1, r3
 8009072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009076:	e7eb      	b.n	8009050 <__swhatbuf_r+0x24>

08009078 <__smakebuf_r>:
 8009078:	898b      	ldrh	r3, [r1, #12]
 800907a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800907c:	079d      	lsls	r5, r3, #30
 800907e:	4606      	mov	r6, r0
 8009080:	460c      	mov	r4, r1
 8009082:	d507      	bpl.n	8009094 <__smakebuf_r+0x1c>
 8009084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	6123      	str	r3, [r4, #16]
 800908c:	2301      	movs	r3, #1
 800908e:	6163      	str	r3, [r4, #20]
 8009090:	b003      	add	sp, #12
 8009092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009094:	ab01      	add	r3, sp, #4
 8009096:	466a      	mov	r2, sp
 8009098:	f7ff ffc8 	bl	800902c <__swhatbuf_r>
 800909c:	9f00      	ldr	r7, [sp, #0]
 800909e:	4605      	mov	r5, r0
 80090a0:	4639      	mov	r1, r7
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7fd fc10 	bl	80068c8 <_malloc_r>
 80090a8:	b948      	cbnz	r0, 80090be <__smakebuf_r+0x46>
 80090aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ae:	059a      	lsls	r2, r3, #22
 80090b0:	d4ee      	bmi.n	8009090 <__smakebuf_r+0x18>
 80090b2:	f023 0303 	bic.w	r3, r3, #3
 80090b6:	f043 0302 	orr.w	r3, r3, #2
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	e7e2      	b.n	8009084 <__smakebuf_r+0xc>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	6020      	str	r0, [r4, #0]
 80090c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	9b01      	ldr	r3, [sp, #4]
 80090ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090ce:	b15b      	cbz	r3, 80090e8 <__smakebuf_r+0x70>
 80090d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090d4:	4630      	mov	r0, r6
 80090d6:	f000 f81d 	bl	8009114 <_isatty_r>
 80090da:	b128      	cbz	r0, 80090e8 <__smakebuf_r+0x70>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	f043 0301 	orr.w	r3, r3, #1
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	431d      	orrs	r5, r3
 80090ec:	81a5      	strh	r5, [r4, #12]
 80090ee:	e7cf      	b.n	8009090 <__smakebuf_r+0x18>

080090f0 <_fstat_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d07      	ldr	r5, [pc, #28]	@ (8009110 <_fstat_r+0x20>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	4611      	mov	r1, r2
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f7f8 fbaa 	bl	8001856 <_fstat>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d102      	bne.n	800910c <_fstat_r+0x1c>
 8009106:	682b      	ldr	r3, [r5, #0]
 8009108:	b103      	cbz	r3, 800910c <_fstat_r+0x1c>
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	bd38      	pop	{r3, r4, r5, pc}
 800910e:	bf00      	nop
 8009110:	20000434 	.word	0x20000434

08009114 <_isatty_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d06      	ldr	r5, [pc, #24]	@ (8009130 <_isatty_r+0x1c>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	f7f8 fba9 	bl	8001876 <_isatty>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_isatty_r+0x1a>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_isatty_r+0x1a>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000434 	.word	0x20000434

08009134 <abort>:
 8009134:	b508      	push	{r3, lr}
 8009136:	2006      	movs	r0, #6
 8009138:	f000 f834 	bl	80091a4 <raise>
 800913c:	2001      	movs	r0, #1
 800913e:	f7f8 fb3a 	bl	80017b6 <_exit>

08009142 <_malloc_usable_size_r>:
 8009142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009146:	1f18      	subs	r0, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfbc      	itt	lt
 800914c:	580b      	ldrlt	r3, [r1, r0]
 800914e:	18c0      	addlt	r0, r0, r3
 8009150:	4770      	bx	lr

08009152 <_raise_r>:
 8009152:	291f      	cmp	r1, #31
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4605      	mov	r5, r0
 8009158:	460c      	mov	r4, r1
 800915a:	d904      	bls.n	8009166 <_raise_r+0x14>
 800915c:	2316      	movs	r3, #22
 800915e:	6003      	str	r3, [r0, #0]
 8009160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009164:	bd38      	pop	{r3, r4, r5, pc}
 8009166:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009168:	b112      	cbz	r2, 8009170 <_raise_r+0x1e>
 800916a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800916e:	b94b      	cbnz	r3, 8009184 <_raise_r+0x32>
 8009170:	4628      	mov	r0, r5
 8009172:	f000 f831 	bl	80091d8 <_getpid_r>
 8009176:	4622      	mov	r2, r4
 8009178:	4601      	mov	r1, r0
 800917a:	4628      	mov	r0, r5
 800917c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009180:	f000 b818 	b.w	80091b4 <_kill_r>
 8009184:	2b01      	cmp	r3, #1
 8009186:	d00a      	beq.n	800919e <_raise_r+0x4c>
 8009188:	1c59      	adds	r1, r3, #1
 800918a:	d103      	bne.n	8009194 <_raise_r+0x42>
 800918c:	2316      	movs	r3, #22
 800918e:	6003      	str	r3, [r0, #0]
 8009190:	2001      	movs	r0, #1
 8009192:	e7e7      	b.n	8009164 <_raise_r+0x12>
 8009194:	2100      	movs	r1, #0
 8009196:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800919a:	4620      	mov	r0, r4
 800919c:	4798      	blx	r3
 800919e:	2000      	movs	r0, #0
 80091a0:	e7e0      	b.n	8009164 <_raise_r+0x12>
	...

080091a4 <raise>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	@ (80091b0 <raise+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f7ff bfd2 	b.w	8009152 <_raise_r>
 80091ae:	bf00      	nop
 80091b0:	20000018 	.word	0x20000018

080091b4 <_kill_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d07      	ldr	r5, [pc, #28]	@ (80091d4 <_kill_r+0x20>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f7f8 fae8 	bl	8001796 <_kill>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	d102      	bne.n	80091d0 <_kill_r+0x1c>
 80091ca:	682b      	ldr	r3, [r5, #0]
 80091cc:	b103      	cbz	r3, 80091d0 <_kill_r+0x1c>
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	20000434 	.word	0x20000434

080091d8 <_getpid_r>:
 80091d8:	f7f8 bad5 	b.w	8001786 <_getpid>

080091dc <_init>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr

080091e8 <_fini>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr
